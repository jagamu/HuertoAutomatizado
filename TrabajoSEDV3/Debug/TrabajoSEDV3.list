
TrabajoSEDV3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009528  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  080096b8  080096b8  0000a6b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b50  08009b50  0000b1e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009b50  08009b50  0000ab50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b58  08009b58  0000b1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b58  08009b58  0000ab58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009b5c  08009b5c  0000ab5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08009b60  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1e8  2**0
                  CONTENTS
 10 .bss          000003fc  200001e8  200001e8  0000b1e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005e4  200005e4  0000b1e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e9fa  00000000  00000000  0000b218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023c0  00000000  00000000  00019c12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d28  00000000  00000000  0001bfd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a38  00000000  00000000  0001cd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023085  00000000  00000000  0001d738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000105c7  00000000  00000000  000407bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d47e0  00000000  00000000  00050d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00125564  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004898  00000000  00000000  001255a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00129e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080096a0 	.word	0x080096a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	080096a0 	.word	0x080096a0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca6:	f000 b9b5 	b.w	8001014 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f84d 	bl	8000d58 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f840 	bl	8000d58 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f82f 	bl	8000d58 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f821 	bl	8000d58 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295
 8000d3c:	f000 b96a 	b.w	8001014 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f806 	bl	8000d58 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9d08      	ldr	r5, [sp, #32]
 8000d5e:	460c      	mov	r4, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14e      	bne.n	8000e02 <__udivmoddi4+0xaa>
 8000d64:	4694      	mov	ip, r2
 8000d66:	458c      	cmp	ip, r1
 8000d68:	4686      	mov	lr, r0
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	d962      	bls.n	8000e36 <__udivmoddi4+0xde>
 8000d70:	b14a      	cbz	r2, 8000d86 <__udivmoddi4+0x2e>
 8000d72:	f1c2 0320 	rsb	r3, r2, #32
 8000d76:	4091      	lsls	r1, r2
 8000d78:	fa20 f303 	lsr.w	r3, r0, r3
 8000d7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d80:	4319      	orrs	r1, r3
 8000d82:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8a:	fa1f f68c 	uxth.w	r6, ip
 8000d8e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d96:	fb07 1114 	mls	r1, r7, r4, r1
 8000d9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9e:	fb04 f106 	mul.w	r1, r4, r6
 8000da2:	4299      	cmp	r1, r3
 8000da4:	d90a      	bls.n	8000dbc <__udivmoddi4+0x64>
 8000da6:	eb1c 0303 	adds.w	r3, ip, r3
 8000daa:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dae:	f080 8112 	bcs.w	8000fd6 <__udivmoddi4+0x27e>
 8000db2:	4299      	cmp	r1, r3
 8000db4:	f240 810f 	bls.w	8000fd6 <__udivmoddi4+0x27e>
 8000db8:	3c02      	subs	r4, #2
 8000dba:	4463      	add	r3, ip
 8000dbc:	1a59      	subs	r1, r3, r1
 8000dbe:	fa1f f38e 	uxth.w	r3, lr
 8000dc2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc6:	fb07 1110 	mls	r1, r7, r0, r1
 8000dca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dce:	fb00 f606 	mul.w	r6, r0, r6
 8000dd2:	429e      	cmp	r6, r3
 8000dd4:	d90a      	bls.n	8000dec <__udivmoddi4+0x94>
 8000dd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dda:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dde:	f080 80fc 	bcs.w	8000fda <__udivmoddi4+0x282>
 8000de2:	429e      	cmp	r6, r3
 8000de4:	f240 80f9 	bls.w	8000fda <__udivmoddi4+0x282>
 8000de8:	4463      	add	r3, ip
 8000dea:	3802      	subs	r0, #2
 8000dec:	1b9b      	subs	r3, r3, r6
 8000dee:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000df2:	2100      	movs	r1, #0
 8000df4:	b11d      	cbz	r5, 8000dfe <__udivmoddi4+0xa6>
 8000df6:	40d3      	lsrs	r3, r2
 8000df8:	2200      	movs	r2, #0
 8000dfa:	e9c5 3200 	strd	r3, r2, [r5]
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d905      	bls.n	8000e12 <__udivmoddi4+0xba>
 8000e06:	b10d      	cbz	r5, 8000e0c <__udivmoddi4+0xb4>
 8000e08:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4608      	mov	r0, r1
 8000e10:	e7f5      	b.n	8000dfe <__udivmoddi4+0xa6>
 8000e12:	fab3 f183 	clz	r1, r3
 8000e16:	2900      	cmp	r1, #0
 8000e18:	d146      	bne.n	8000ea8 <__udivmoddi4+0x150>
 8000e1a:	42a3      	cmp	r3, r4
 8000e1c:	d302      	bcc.n	8000e24 <__udivmoddi4+0xcc>
 8000e1e:	4290      	cmp	r0, r2
 8000e20:	f0c0 80f0 	bcc.w	8001004 <__udivmoddi4+0x2ac>
 8000e24:	1a86      	subs	r6, r0, r2
 8000e26:	eb64 0303 	sbc.w	r3, r4, r3
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	2d00      	cmp	r5, #0
 8000e2e:	d0e6      	beq.n	8000dfe <__udivmoddi4+0xa6>
 8000e30:	e9c5 6300 	strd	r6, r3, [r5]
 8000e34:	e7e3      	b.n	8000dfe <__udivmoddi4+0xa6>
 8000e36:	2a00      	cmp	r2, #0
 8000e38:	f040 8090 	bne.w	8000f5c <__udivmoddi4+0x204>
 8000e3c:	eba1 040c 	sub.w	r4, r1, ip
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa1f f78c 	uxth.w	r7, ip
 8000e48:	2101      	movs	r1, #1
 8000e4a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e4e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e52:	fb08 4416 	mls	r4, r8, r6, r4
 8000e56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e5a:	fb07 f006 	mul.w	r0, r7, r6
 8000e5e:	4298      	cmp	r0, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x11c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e6a:	d202      	bcs.n	8000e72 <__udivmoddi4+0x11a>
 8000e6c:	4298      	cmp	r0, r3
 8000e6e:	f200 80cd 	bhi.w	800100c <__udivmoddi4+0x2b4>
 8000e72:	4626      	mov	r6, r4
 8000e74:	1a1c      	subs	r4, r3, r0
 8000e76:	fa1f f38e 	uxth.w	r3, lr
 8000e7a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e7e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e86:	fb00 f707 	mul.w	r7, r0, r7
 8000e8a:	429f      	cmp	r7, r3
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x148>
 8000e8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e92:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x146>
 8000e98:	429f      	cmp	r7, r3
 8000e9a:	f200 80b0 	bhi.w	8000ffe <__udivmoddi4+0x2a6>
 8000e9e:	4620      	mov	r0, r4
 8000ea0:	1bdb      	subs	r3, r3, r7
 8000ea2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0x9c>
 8000ea8:	f1c1 0620 	rsb	r6, r1, #32
 8000eac:	408b      	lsls	r3, r1
 8000eae:	fa22 f706 	lsr.w	r7, r2, r6
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eb8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ebc:	ea43 030c 	orr.w	r3, r3, ip
 8000ec0:	40f4      	lsrs	r4, r6
 8000ec2:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec6:	0c38      	lsrs	r0, r7, #16
 8000ec8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ecc:	fbb4 fef0 	udiv	lr, r4, r0
 8000ed0:	fa1f fc87 	uxth.w	ip, r7
 8000ed4:	fb00 441e 	mls	r4, r0, lr, r4
 8000ed8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000edc:	fb0e f90c 	mul.w	r9, lr, ip
 8000ee0:	45a1      	cmp	r9, r4
 8000ee2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee6:	d90a      	bls.n	8000efe <__udivmoddi4+0x1a6>
 8000ee8:	193c      	adds	r4, r7, r4
 8000eea:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eee:	f080 8084 	bcs.w	8000ffa <__udivmoddi4+0x2a2>
 8000ef2:	45a1      	cmp	r9, r4
 8000ef4:	f240 8081 	bls.w	8000ffa <__udivmoddi4+0x2a2>
 8000ef8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000efc:	443c      	add	r4, r7
 8000efe:	eba4 0409 	sub.w	r4, r4, r9
 8000f02:	fa1f f983 	uxth.w	r9, r3
 8000f06:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f0a:	fb00 4413 	mls	r4, r0, r3, r4
 8000f0e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f12:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f16:	45a4      	cmp	ip, r4
 8000f18:	d907      	bls.n	8000f2a <__udivmoddi4+0x1d2>
 8000f1a:	193c      	adds	r4, r7, r4
 8000f1c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f20:	d267      	bcs.n	8000ff2 <__udivmoddi4+0x29a>
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d965      	bls.n	8000ff2 <__udivmoddi4+0x29a>
 8000f26:	3b02      	subs	r3, #2
 8000f28:	443c      	add	r4, r7
 8000f2a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f2e:	fba0 9302 	umull	r9, r3, r0, r2
 8000f32:	eba4 040c 	sub.w	r4, r4, ip
 8000f36:	429c      	cmp	r4, r3
 8000f38:	46ce      	mov	lr, r9
 8000f3a:	469c      	mov	ip, r3
 8000f3c:	d351      	bcc.n	8000fe2 <__udivmoddi4+0x28a>
 8000f3e:	d04e      	beq.n	8000fde <__udivmoddi4+0x286>
 8000f40:	b155      	cbz	r5, 8000f58 <__udivmoddi4+0x200>
 8000f42:	ebb8 030e 	subs.w	r3, r8, lr
 8000f46:	eb64 040c 	sbc.w	r4, r4, ip
 8000f4a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f4e:	40cb      	lsrs	r3, r1
 8000f50:	431e      	orrs	r6, r3
 8000f52:	40cc      	lsrs	r4, r1
 8000f54:	e9c5 6400 	strd	r6, r4, [r5]
 8000f58:	2100      	movs	r1, #0
 8000f5a:	e750      	b.n	8000dfe <__udivmoddi4+0xa6>
 8000f5c:	f1c2 0320 	rsb	r3, r2, #32
 8000f60:	fa20 f103 	lsr.w	r1, r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa24 f303 	lsr.w	r3, r4, r3
 8000f6c:	4094      	lsls	r4, r2
 8000f6e:	430c      	orrs	r4, r1
 8000f70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f74:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f78:	fa1f f78c 	uxth.w	r7, ip
 8000f7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f80:	fb08 3110 	mls	r1, r8, r0, r3
 8000f84:	0c23      	lsrs	r3, r4, #16
 8000f86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f8a:	fb00 f107 	mul.w	r1, r0, r7
 8000f8e:	4299      	cmp	r1, r3
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x24c>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f9a:	d22c      	bcs.n	8000ff6 <__udivmoddi4+0x29e>
 8000f9c:	4299      	cmp	r1, r3
 8000f9e:	d92a      	bls.n	8000ff6 <__udivmoddi4+0x29e>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1a5b      	subs	r3, r3, r1
 8000fa6:	b2a4      	uxth	r4, r4
 8000fa8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fac:	fb08 3311 	mls	r3, r8, r1, r3
 8000fb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fb4:	fb01 f307 	mul.w	r3, r1, r7
 8000fb8:	42a3      	cmp	r3, r4
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x276>
 8000fbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fc0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fc4:	d213      	bcs.n	8000fee <__udivmoddi4+0x296>
 8000fc6:	42a3      	cmp	r3, r4
 8000fc8:	d911      	bls.n	8000fee <__udivmoddi4+0x296>
 8000fca:	3902      	subs	r1, #2
 8000fcc:	4464      	add	r4, ip
 8000fce:	1ae4      	subs	r4, r4, r3
 8000fd0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fd4:	e739      	b.n	8000e4a <__udivmoddi4+0xf2>
 8000fd6:	4604      	mov	r4, r0
 8000fd8:	e6f0      	b.n	8000dbc <__udivmoddi4+0x64>
 8000fda:	4608      	mov	r0, r1
 8000fdc:	e706      	b.n	8000dec <__udivmoddi4+0x94>
 8000fde:	45c8      	cmp	r8, r9
 8000fe0:	d2ae      	bcs.n	8000f40 <__udivmoddi4+0x1e8>
 8000fe2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fe6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fea:	3801      	subs	r0, #1
 8000fec:	e7a8      	b.n	8000f40 <__udivmoddi4+0x1e8>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	e7ed      	b.n	8000fce <__udivmoddi4+0x276>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	e799      	b.n	8000f2a <__udivmoddi4+0x1d2>
 8000ff6:	4630      	mov	r0, r6
 8000ff8:	e7d4      	b.n	8000fa4 <__udivmoddi4+0x24c>
 8000ffa:	46d6      	mov	lr, sl
 8000ffc:	e77f      	b.n	8000efe <__udivmoddi4+0x1a6>
 8000ffe:	4463      	add	r3, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e74d      	b.n	8000ea0 <__udivmoddi4+0x148>
 8001004:	4606      	mov	r6, r0
 8001006:	4623      	mov	r3, r4
 8001008:	4608      	mov	r0, r1
 800100a:	e70f      	b.n	8000e2c <__udivmoddi4+0xd4>
 800100c:	3e02      	subs	r6, #2
 800100e:	4463      	add	r3, ip
 8001010:	e730      	b.n	8000e74 <__udivmoddi4+0x11c>
 8001012:	bf00      	nop

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2203      	movs	r2, #3
 8001024:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2203      	movs	r2, #3
 8001030:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2203      	movs	r2, #3
 8001036:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2203      	movs	r2, #3
 800103c:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2203      	movs	r2, #3
 8001042:	715a      	strb	r2, [r3, #5]
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	@ 0x28
 8001054:	af04      	add	r7, sp, #16
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	460b      	mov	r3, r1
 800105a:	607a      	str	r2, [r7, #4]
 800105c:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800106a:	7afb      	ldrb	r3, [r7, #11]
 800106c:	b29a      	uxth	r2, r3
 800106e:	8af9      	ldrh	r1, [r7, #22]
 8001070:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001074:	9302      	str	r3, [sp, #8]
 8001076:	2302      	movs	r3, #2
 8001078:	9301      	str	r3, [sp, #4]
 800107a:	f107 0314 	add.w	r3, r7, #20
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	2301      	movs	r3, #1
 8001082:	f003 f991 	bl	80043a8 <HAL_I2C_Mem_Read>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d10b      	bne.n	80010a4 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 800108c:	7d7b      	ldrb	r3, [r7, #21]
 800108e:	021b      	lsls	r3, r3, #8
 8001090:	b21a      	sxth	r2, r3
 8001092:	7d3b      	ldrb	r3, [r7, #20]
 8001094:	b21b      	sxth	r3, r3
 8001096:	4313      	orrs	r3, r2
 8001098:	b21b      	sxth	r3, r3
 800109a:	b29a      	uxth	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	801a      	strh	r2, [r3, #0]
		return true;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e000      	b.n	80010a6 <read_register16+0x56>
	} else
		return false;
 80010a4:	2300      	movs	r3, #0

}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 80010ae:	b590      	push	{r4, r7, lr}
 80010b0:	b08b      	sub	sp, #44	@ 0x2c
 80010b2:	af04      	add	r7, sp, #16
 80010b4:	60f8      	str	r0, [r7, #12]
 80010b6:	607a      	str	r2, [r7, #4]
 80010b8:	461a      	mov	r2, r3
 80010ba:	460b      	mov	r3, r1
 80010bc:	72fb      	strb	r3, [r7, #11]
 80010be:	4613      	mov	r3, r2
 80010c0:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80010ce:	7afb      	ldrb	r3, [r7, #11]
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	7abb      	ldrb	r3, [r7, #10]
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	8af9      	ldrh	r1, [r7, #22]
 80010d8:	f241 3488 	movw	r4, #5000	@ 0x1388
 80010dc:	9402      	str	r4, [sp, #8]
 80010de:	9301      	str	r3, [sp, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	2301      	movs	r3, #1
 80010e6:	f003 f95f 	bl	80043a8 <HAL_I2C_Mem_Read>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d101      	bne.n	80010f4 <read_data+0x46>
		return 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	e000      	b.n	80010f6 <read_data+0x48>
	else
		return 1;
 80010f4:	2301      	movs	r3, #1

}
 80010f6:	4618      	mov	r0, r3
 80010f8:	371c      	adds	r7, #28
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd90      	pop	{r4, r7, pc}

080010fe <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	461a      	mov	r2, r3
 800110a:	2188      	movs	r1, #136	@ 0x88
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ff9f 	bl	8001050 <read_register16>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d06f      	beq.n	80011f8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3302      	adds	r3, #2
 800111c:	461a      	mov	r2, r3
 800111e:	218a      	movs	r1, #138	@ 0x8a
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ff95 	bl	8001050 <read_register16>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d065      	beq.n	80011f8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3304      	adds	r3, #4
 8001130:	461a      	mov	r2, r3
 8001132:	218c      	movs	r1, #140	@ 0x8c
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff8b 	bl	8001050 <read_register16>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d05b      	beq.n	80011f8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3306      	adds	r3, #6
 8001144:	461a      	mov	r2, r3
 8001146:	218e      	movs	r1, #142	@ 0x8e
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ff81 	bl	8001050 <read_register16>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d051      	beq.n	80011f8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3308      	adds	r3, #8
 8001158:	461a      	mov	r2, r3
 800115a:	2190      	movs	r1, #144	@ 0x90
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ff77 	bl	8001050 <read_register16>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d047      	beq.n	80011f8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	330a      	adds	r3, #10
 800116c:	461a      	mov	r2, r3
 800116e:	2192      	movs	r1, #146	@ 0x92
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff ff6d 	bl	8001050 <read_register16>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d03d      	beq.n	80011f8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	330c      	adds	r3, #12
 8001180:	461a      	mov	r2, r3
 8001182:	2194      	movs	r1, #148	@ 0x94
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ff63 	bl	8001050 <read_register16>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d033      	beq.n	80011f8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	330e      	adds	r3, #14
 8001194:	461a      	mov	r2, r3
 8001196:	2196      	movs	r1, #150	@ 0x96
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff ff59 	bl	8001050 <read_register16>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d029      	beq.n	80011f8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3310      	adds	r3, #16
 80011a8:	461a      	mov	r2, r3
 80011aa:	2198      	movs	r1, #152	@ 0x98
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff ff4f 	bl	8001050 <read_register16>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d01f      	beq.n	80011f8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3312      	adds	r3, #18
 80011bc:	461a      	mov	r2, r3
 80011be:	219a      	movs	r1, #154	@ 0x9a
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff ff45 	bl	8001050 <read_register16>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d015      	beq.n	80011f8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3314      	adds	r3, #20
 80011d0:	461a      	mov	r2, r3
 80011d2:	219c      	movs	r1, #156	@ 0x9c
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ff3b 	bl	8001050 <read_register16>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d00b      	beq.n	80011f8 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 80011e4:	461a      	mov	r2, r3
 80011e6:	219e      	movs	r1, #158	@ 0x9e
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ff31 	bl	8001050 <read_register16>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <read_calibration_data+0xfa>

		return true;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e000      	b.n	80011fa <read_calibration_data+0xfc>
	}

	return false;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8001202:	b580      	push	{r7, lr}
 8001204:	b084      	sub	sp, #16
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f103 0218 	add.w	r2, r3, #24
 8001210:	2301      	movs	r3, #1
 8001212:	21a1      	movs	r1, #161	@ 0xa1
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff ff4a 	bl	80010ae <read_data>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d14b      	bne.n	80012b8 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	331a      	adds	r3, #26
 8001224:	461a      	mov	r2, r3
 8001226:	21e1      	movs	r1, #225	@ 0xe1
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ff11 	bl	8001050 <read_register16>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d041      	beq.n	80012b8 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f103 021c 	add.w	r2, r3, #28
 800123a:	2301      	movs	r3, #1
 800123c:	21e3      	movs	r1, #227	@ 0xe3
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ff35 	bl	80010ae <read_data>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d136      	bne.n	80012b8 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 800124a:	f107 030e 	add.w	r3, r7, #14
 800124e:	461a      	mov	r2, r3
 8001250:	21e4      	movs	r1, #228	@ 0xe4
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff fefc 	bl	8001050 <read_register16>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d02c      	beq.n	80012b8 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 800125e:	f107 030c 	add.w	r3, r7, #12
 8001262:	461a      	mov	r2, r3
 8001264:	21e5      	movs	r1, #229	@ 0xe5
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff fef2 	bl	8001050 <read_register16>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d022      	beq.n	80012b8 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 8001278:	2301      	movs	r3, #1
 800127a:	21e7      	movs	r1, #231	@ 0xe7
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff ff16 	bl	80010ae <read_data>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d117      	bne.n	80012b8 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8001288:	89fb      	ldrh	r3, [r7, #14]
 800128a:	011b      	lsls	r3, r3, #4
 800128c:	b21b      	sxth	r3, r3
 800128e:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 8001292:	b21a      	sxth	r2, r3
 8001294:	89fb      	ldrh	r3, [r7, #14]
 8001296:	121b      	asrs	r3, r3, #8
 8001298:	b21b      	sxth	r3, r3
 800129a:	f003 030f 	and.w	r3, r3, #15
 800129e:	b21b      	sxth	r3, r3
 80012a0:	4313      	orrs	r3, r2
 80012a2:	b21a      	sxth	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 80012a8:	89bb      	ldrh	r3, [r7, #12]
 80012aa:	091b      	lsrs	r3, r3, #4
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	841a      	strh	r2, [r3, #32]

		return true;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e000      	b.n	80012ba <read_hum_calibration_data+0xb8>
	}

	return false;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b088      	sub	sp, #32
 80012c6:	af04      	add	r7, sp, #16
 80012c8:	6078      	str	r0, [r7, #4]
 80012ca:	460b      	mov	r3, r1
 80012cc:	70fb      	strb	r3, [r7, #3]
 80012ce:	4613      	mov	r3, r2
 80012d0:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80012de:	78fb      	ldrb	r3, [r7, #3]
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	89f9      	ldrh	r1, [r7, #14]
 80012e4:	f242 7310 	movw	r3, #10000	@ 0x2710
 80012e8:	9302      	str	r3, [sp, #8]
 80012ea:	2301      	movs	r3, #1
 80012ec:	9301      	str	r3, [sp, #4]
 80012ee:	1cbb      	adds	r3, r7, #2
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	2301      	movs	r3, #1
 80012f4:	f002 ff5e 	bl	80041b4 <HAL_I2C_Mem_Write>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d101      	bne.n	8001302 <write_register8+0x40>
		return false;
 80012fe:	2300      	movs	r3, #0
 8001300:	e000      	b.n	8001304 <write_register8+0x42>
	else
		return true;
 8001302:	2301      	movs	r3, #1
}
 8001304:	4618      	mov	r0, r3
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800131a:	2b76      	cmp	r3, #118	@ 0x76
 800131c:	d005      	beq.n	800132a <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001322:	2b77      	cmp	r3, #119	@ 0x77
 8001324:	d001      	beq.n	800132a <bmp280_init+0x1e>

		return false;
 8001326:	2300      	movs	r3, #0
 8001328:	e099      	b.n	800145e <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001330:	2301      	movs	r3, #1
 8001332:	21d0      	movs	r1, #208	@ 0xd0
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff feba 	bl	80010ae <read_data>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <bmp280_init+0x38>
		return false;
 8001340:	2300      	movs	r3, #0
 8001342:	e08c      	b.n	800145e <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800134a:	2b58      	cmp	r3, #88	@ 0x58
 800134c:	d006      	beq.n	800135c <bmp280_init+0x50>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001354:	2b60      	cmp	r3, #96	@ 0x60
 8001356:	d001      	beq.n	800135c <bmp280_init+0x50>

		return false;
 8001358:	2300      	movs	r3, #0
 800135a:	e080      	b.n	800145e <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 800135c:	22b6      	movs	r2, #182	@ 0xb6
 800135e:	21e0      	movs	r1, #224	@ 0xe0
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ffae 	bl	80012c2 <write_register8>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <bmp280_init+0x64>
		return false;
 800136c:	2300      	movs	r3, #0
 800136e:	e076      	b.n	800145e <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001370:	f107 020c 	add.w	r2, r7, #12
 8001374:	2301      	movs	r3, #1
 8001376:	21f3      	movs	r1, #243	@ 0xf3
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff fe98 	bl	80010ae <read_data>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1f5      	bne.n	8001370 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001384:	7b3b      	ldrb	r3, [r7, #12]
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1f0      	bne.n	8001370 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff feb5 	bl	80010fe <read_calibration_data>
 8001394:	4603      	mov	r3, r0
 8001396:	f083 0301 	eor.w	r3, r3, #1
 800139a:	b2db      	uxtb	r3, r3
 800139c:	2b00      	cmp	r3, #0
 800139e:	d100      	bne.n	80013a2 <bmp280_init+0x96>
 80013a0:	e001      	b.n	80013a6 <bmp280_init+0x9a>
		return false;
 80013a2:	2300      	movs	r3, #0
 80013a4:	e05b      	b.n	800145e <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80013ac:	2b60      	cmp	r3, #96	@ 0x60
 80013ae:	d10a      	bne.n	80013c6 <bmp280_init+0xba>
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff ff26 	bl	8001202 <read_hum_calibration_data>
 80013b6:	4603      	mov	r3, r0
 80013b8:	f083 0301 	eor.w	r3, r3, #1
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <bmp280_init+0xba>
		return false;
 80013c2:	2300      	movs	r3, #0
 80013c4:	e04b      	b.n	800145e <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	795b      	ldrb	r3, [r3, #5]
 80013ca:	015b      	lsls	r3, r3, #5
 80013cc:	b25a      	sxtb	r2, r3
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	785b      	ldrb	r3, [r3, #1]
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	b25b      	sxtb	r3, r3
 80013d6:	4313      	orrs	r3, r2
 80013d8:	b25b      	sxtb	r3, r3
 80013da:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	461a      	mov	r2, r3
 80013e0:	21f5      	movs	r1, #245	@ 0xf5
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff ff6d 	bl	80012c2 <write_register8>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <bmp280_init+0xe6>
		return false;
 80013ee:	2300      	movs	r3, #0
 80013f0:	e035      	b.n	800145e <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d102      	bne.n	8001400 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	2200      	movs	r2, #0
 80013fe:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	78db      	ldrb	r3, [r3, #3]
 8001404:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001406:	b25a      	sxtb	r2, r3
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	789b      	ldrb	r3, [r3, #2]
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	b25b      	sxtb	r3, r3
 8001410:	4313      	orrs	r3, r2
 8001412:	b25a      	sxtb	r2, r3
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	b25b      	sxtb	r3, r3
 800141a:	4313      	orrs	r3, r2
 800141c:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 800141e:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001426:	2b60      	cmp	r3, #96	@ 0x60
 8001428:	d10d      	bne.n	8001446 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	791b      	ldrb	r3, [r3, #4]
 800142e:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001430:	7b7b      	ldrb	r3, [r7, #13]
 8001432:	461a      	mov	r2, r3
 8001434:	21f2      	movs	r1, #242	@ 0xf2
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff ff43 	bl	80012c2 <write_register8>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <bmp280_init+0x13a>
			return false;
 8001442:	2300      	movs	r3, #0
 8001444:	e00b      	b.n	800145e <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001446:	7bbb      	ldrb	r3, [r7, #14]
 8001448:	461a      	mov	r2, r3
 800144a:	21f4      	movs	r1, #244	@ 0xf4
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff ff38 	bl	80012c2 <write_register8>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <bmp280_init+0x150>
		return false;
 8001458:	2300      	movs	r3, #0
 800145a:	e000      	b.n	800145e <bmp280_init+0x152>
	}

	return true;
 800145c:	2301      	movs	r3, #1
}
 800145e:	4618      	mov	r0, r3
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8001466:	b480      	push	{r7}
 8001468:	b087      	sub	sp, #28
 800146a:	af00      	add	r7, sp, #0
 800146c:	60f8      	str	r0, [r7, #12]
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	10da      	asrs	r2, r3, #3
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001484:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001488:	12db      	asrs	r3, r3, #11
 800148a:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	111b      	asrs	r3, r3, #4
 8001490:	68fa      	ldr	r2, [r7, #12]
 8001492:	8812      	ldrh	r2, [r2, #0]
 8001494:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	1112      	asrs	r2, r2, #4
 800149a:	68f9      	ldr	r1, [r7, #12]
 800149c:	8809      	ldrh	r1, [r1, #0]
 800149e:	1a52      	subs	r2, r2, r1
 80014a0:	fb02 f303 	mul.w	r3, r2, r3
 80014a4:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80014ac:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80014b0:	139b      	asrs	r3, r3, #14
 80014b2:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 80014b4:	697a      	ldr	r2, [r7, #20]
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	441a      	add	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	4613      	mov	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4413      	add	r3, r2
 80014c8:	3380      	adds	r3, #128	@ 0x80
 80014ca:	121b      	asrs	r3, r3, #8
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	371c      	adds	r7, #28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 80014d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014dc:	b0cc      	sub	sp, #304	@ 0x130
 80014de:	af00      	add	r7, sp, #0
 80014e0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 80014e4:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 80014e8:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 80014ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80014f0:	17da      	asrs	r2, r3, #31
 80014f2:	461c      	mov	r4, r3
 80014f4:	4615      	mov	r5, r2
 80014f6:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 80014fa:	f145 3bff 	adc.w	fp, r5, #4294967295
 80014fe:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001502:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001506:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800150a:	fb03 f102 	mul.w	r1, r3, r2
 800150e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001512:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001516:	fb02 f303 	mul.w	r3, r2, r3
 800151a:	18ca      	adds	r2, r1, r3
 800151c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001520:	fba3 8903 	umull	r8, r9, r3, r3
 8001524:	eb02 0309 	add.w	r3, r2, r9
 8001528:	4699      	mov	r9, r3
 800152a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800152e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001532:	b21b      	sxth	r3, r3
 8001534:	17da      	asrs	r2, r3, #31
 8001536:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800153a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800153e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001542:	4603      	mov	r3, r0
 8001544:	fb03 f209 	mul.w	r2, r3, r9
 8001548:	460b      	mov	r3, r1
 800154a:	fb08 f303 	mul.w	r3, r8, r3
 800154e:	4413      	add	r3, r2
 8001550:	4602      	mov	r2, r0
 8001552:	fba8 1202 	umull	r1, r2, r8, r2
 8001556:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800155a:	460a      	mov	r2, r1
 800155c:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8001560:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001564:	4413      	add	r3, r2
 8001566:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800156a:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 800156e:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 8001572:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800157a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800157e:	b21b      	sxth	r3, r3
 8001580:	17da      	asrs	r2, r3, #31
 8001582:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001586:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800158a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800158e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8001592:	462a      	mov	r2, r5
 8001594:	fb02 f203 	mul.w	r2, r2, r3
 8001598:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800159c:	4621      	mov	r1, r4
 800159e:	fb01 f303 	mul.w	r3, r1, r3
 80015a2:	441a      	add	r2, r3
 80015a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80015a8:	4621      	mov	r1, r4
 80015aa:	fba3 1301 	umull	r1, r3, r3, r1
 80015ae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80015b2:	460b      	mov	r3, r1
 80015b4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80015b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80015bc:	18d3      	adds	r3, r2, r3
 80015be:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80015c2:	f04f 0000 	mov.w	r0, #0
 80015c6:	f04f 0100 	mov.w	r1, #0
 80015ca:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 80015ce:	462b      	mov	r3, r5
 80015d0:	0459      	lsls	r1, r3, #17
 80015d2:	4623      	mov	r3, r4
 80015d4:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80015d8:	4623      	mov	r3, r4
 80015da:	0458      	lsls	r0, r3, #17
 80015dc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80015e0:	1814      	adds	r4, r2, r0
 80015e2:	643c      	str	r4, [r7, #64]	@ 0x40
 80015e4:	414b      	adcs	r3, r1
 80015e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80015e8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80015ec:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80015f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80015f4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80015f8:	b21b      	sxth	r3, r3
 80015fa:	17da      	asrs	r2, r3, #31
 80015fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001600:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001604:	f04f 0000 	mov.w	r0, #0
 8001608:	f04f 0100 	mov.w	r1, #0
 800160c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001610:	00d9      	lsls	r1, r3, #3
 8001612:	2000      	movs	r0, #0
 8001614:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001618:	1814      	adds	r4, r2, r0
 800161a:	63bc      	str	r4, [r7, #56]	@ 0x38
 800161c:	414b      	adcs	r3, r1
 800161e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001620:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001624:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001628:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800162c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001630:	fb03 f102 	mul.w	r1, r3, r2
 8001634:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001638:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800163c:	fb02 f303 	mul.w	r3, r2, r3
 8001640:	18ca      	adds	r2, r1, r3
 8001642:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001646:	fba3 1303 	umull	r1, r3, r3, r3
 800164a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800164e:	460b      	mov	r3, r1
 8001650:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001654:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001658:	18d3      	adds	r3, r2, r3
 800165a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800165e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001662:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001666:	b21b      	sxth	r3, r3
 8001668:	17da      	asrs	r2, r3, #31
 800166a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800166e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001672:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8001676:	462b      	mov	r3, r5
 8001678:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800167c:	4642      	mov	r2, r8
 800167e:	fb02 f203 	mul.w	r2, r2, r3
 8001682:	464b      	mov	r3, r9
 8001684:	4621      	mov	r1, r4
 8001686:	fb01 f303 	mul.w	r3, r1, r3
 800168a:	4413      	add	r3, r2
 800168c:	4622      	mov	r2, r4
 800168e:	4641      	mov	r1, r8
 8001690:	fba2 1201 	umull	r1, r2, r2, r1
 8001694:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001698:	460a      	mov	r2, r1
 800169a:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800169e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80016a2:	4413      	add	r3, r2
 80016a4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80016a8:	f04f 0000 	mov.w	r0, #0
 80016ac:	f04f 0100 	mov.w	r1, #0
 80016b0:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 80016b4:	4623      	mov	r3, r4
 80016b6:	0a18      	lsrs	r0, r3, #8
 80016b8:	462b      	mov	r3, r5
 80016ba:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80016be:	462b      	mov	r3, r5
 80016c0:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 80016c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80016c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80016ca:	b21b      	sxth	r3, r3
 80016cc:	17da      	asrs	r2, r3, #31
 80016ce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80016d2:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80016d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80016da:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 80016de:	464a      	mov	r2, r9
 80016e0:	fb02 f203 	mul.w	r2, r2, r3
 80016e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80016e8:	4644      	mov	r4, r8
 80016ea:	fb04 f303 	mul.w	r3, r4, r3
 80016ee:	441a      	add	r2, r3
 80016f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80016f4:	4644      	mov	r4, r8
 80016f6:	fba3 4304 	umull	r4, r3, r3, r4
 80016fa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80016fe:	4623      	mov	r3, r4
 8001700:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001704:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001708:	18d3      	adds	r3, r2, r3
 800170a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800170e:	f04f 0200 	mov.w	r2, #0
 8001712:	f04f 0300 	mov.w	r3, #0
 8001716:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 800171a:	464c      	mov	r4, r9
 800171c:	0323      	lsls	r3, r4, #12
 800171e:	4644      	mov	r4, r8
 8001720:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001724:	4644      	mov	r4, r8
 8001726:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001728:	1884      	adds	r4, r0, r2
 800172a:	633c      	str	r4, [r7, #48]	@ 0x30
 800172c:	eb41 0303 	adc.w	r3, r1, r3
 8001730:	637b      	str	r3, [r7, #52]	@ 0x34
 8001732:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001736:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 800173a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800173e:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001742:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8001746:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800174a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800174e:	88db      	ldrh	r3, [r3, #6]
 8001750:	b29b      	uxth	r3, r3
 8001752:	2200      	movs	r2, #0
 8001754:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001758:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800175c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001760:	462b      	mov	r3, r5
 8001762:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001766:	4642      	mov	r2, r8
 8001768:	fb02 f203 	mul.w	r2, r2, r3
 800176c:	464b      	mov	r3, r9
 800176e:	4621      	mov	r1, r4
 8001770:	fb01 f303 	mul.w	r3, r1, r3
 8001774:	4413      	add	r3, r2
 8001776:	4622      	mov	r2, r4
 8001778:	4641      	mov	r1, r8
 800177a:	fba2 1201 	umull	r1, r2, r2, r1
 800177e:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001782:	460a      	mov	r2, r1
 8001784:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001788:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800178c:	4413      	add	r3, r2
 800178e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001792:	f04f 0200 	mov.w	r2, #0
 8001796:	f04f 0300 	mov.w	r3, #0
 800179a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 800179e:	4629      	mov	r1, r5
 80017a0:	104a      	asrs	r2, r1, #1
 80017a2:	4629      	mov	r1, r5
 80017a4:	17cb      	asrs	r3, r1, #31
 80017a6:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 80017aa:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80017ae:	4313      	orrs	r3, r2
 80017b0:	d101      	bne.n	80017b6 <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 80017b2:	2300      	movs	r3, #0
 80017b4:	e148      	b.n	8001a48 <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 80017b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80017ba:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 80017be:	17da      	asrs	r2, r3, #31
 80017c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80017c4:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80017c8:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 80017cc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80017d0:	105b      	asrs	r3, r3, #1
 80017d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80017d6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80017da:	07db      	lsls	r3, r3, #31
 80017dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80017e0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80017e4:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 80017e8:	4621      	mov	r1, r4
 80017ea:	1a89      	subs	r1, r1, r2
 80017ec:	67b9      	str	r1, [r7, #120]	@ 0x78
 80017ee:	4629      	mov	r1, r5
 80017f0:	eb61 0303 	sbc.w	r3, r1, r3
 80017f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80017f6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80017fa:	4622      	mov	r2, r4
 80017fc:	462b      	mov	r3, r5
 80017fe:	1891      	adds	r1, r2, r2
 8001800:	6239      	str	r1, [r7, #32]
 8001802:	415b      	adcs	r3, r3
 8001804:	627b      	str	r3, [r7, #36]	@ 0x24
 8001806:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800180a:	4621      	mov	r1, r4
 800180c:	1851      	adds	r1, r2, r1
 800180e:	61b9      	str	r1, [r7, #24]
 8001810:	4629      	mov	r1, r5
 8001812:	414b      	adcs	r3, r1
 8001814:	61fb      	str	r3, [r7, #28]
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	f04f 0300 	mov.w	r3, #0
 800181e:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001822:	4649      	mov	r1, r9
 8001824:	018b      	lsls	r3, r1, #6
 8001826:	4641      	mov	r1, r8
 8001828:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800182c:	4641      	mov	r1, r8
 800182e:	018a      	lsls	r2, r1, #6
 8001830:	4641      	mov	r1, r8
 8001832:	1889      	adds	r1, r1, r2
 8001834:	6139      	str	r1, [r7, #16]
 8001836:	4649      	mov	r1, r9
 8001838:	eb43 0101 	adc.w	r1, r3, r1
 800183c:	6179      	str	r1, [r7, #20]
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800184a:	4649      	mov	r1, r9
 800184c:	008b      	lsls	r3, r1, #2
 800184e:	4641      	mov	r1, r8
 8001850:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001854:	4641      	mov	r1, r8
 8001856:	008a      	lsls	r2, r1, #2
 8001858:	4610      	mov	r0, r2
 800185a:	4619      	mov	r1, r3
 800185c:	4603      	mov	r3, r0
 800185e:	4622      	mov	r2, r4
 8001860:	189b      	adds	r3, r3, r2
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	460b      	mov	r3, r1
 8001866:	462a      	mov	r2, r5
 8001868:	eb42 0303 	adc.w	r3, r2, r3
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	f04f 0300 	mov.w	r3, #0
 8001876:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800187a:	4649      	mov	r1, r9
 800187c:	008b      	lsls	r3, r1, #2
 800187e:	4641      	mov	r1, r8
 8001880:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001884:	4641      	mov	r1, r8
 8001886:	008a      	lsls	r2, r1, #2
 8001888:	4610      	mov	r0, r2
 800188a:	4619      	mov	r1, r3
 800188c:	4603      	mov	r3, r0
 800188e:	4622      	mov	r2, r4
 8001890:	189b      	adds	r3, r3, r2
 8001892:	673b      	str	r3, [r7, #112]	@ 0x70
 8001894:	462b      	mov	r3, r5
 8001896:	460a      	mov	r2, r1
 8001898:	eb42 0303 	adc.w	r3, r2, r3
 800189c:	677b      	str	r3, [r7, #116]	@ 0x74
 800189e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80018a2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80018a6:	f7ff f9ef 	bl	8000c88 <__aeabi_ldivmod>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 80018b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80018b6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80018ba:	b21b      	sxth	r3, r3
 80018bc:	17da      	asrs	r2, r3, #31
 80018be:	66bb      	str	r3, [r7, #104]	@ 0x68
 80018c0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80018c2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80018c6:	f04f 0000 	mov.w	r0, #0
 80018ca:	f04f 0100 	mov.w	r1, #0
 80018ce:	0b50      	lsrs	r0, r2, #13
 80018d0:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80018d4:	1359      	asrs	r1, r3, #13
 80018d6:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 80018da:	462b      	mov	r3, r5
 80018dc:	fb00 f203 	mul.w	r2, r0, r3
 80018e0:	4623      	mov	r3, r4
 80018e2:	fb03 f301 	mul.w	r3, r3, r1
 80018e6:	4413      	add	r3, r2
 80018e8:	4622      	mov	r2, r4
 80018ea:	fba2 1200 	umull	r1, r2, r2, r0
 80018ee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80018f2:	460a      	mov	r2, r1
 80018f4:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 80018f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80018fc:	4413      	add	r3, r2
 80018fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001902:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001906:	f04f 0000 	mov.w	r0, #0
 800190a:	f04f 0100 	mov.w	r1, #0
 800190e:	0b50      	lsrs	r0, r2, #13
 8001910:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001914:	1359      	asrs	r1, r3, #13
 8001916:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800191a:	462b      	mov	r3, r5
 800191c:	fb00 f203 	mul.w	r2, r0, r3
 8001920:	4623      	mov	r3, r4
 8001922:	fb03 f301 	mul.w	r3, r3, r1
 8001926:	4413      	add	r3, r2
 8001928:	4622      	mov	r2, r4
 800192a:	fba2 1200 	umull	r1, r2, r2, r0
 800192e:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001932:	460a      	mov	r2, r1
 8001934:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001938:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800193c:	4413      	add	r3, r2
 800193e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	f04f 0300 	mov.w	r3, #0
 800194a:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 800194e:	4621      	mov	r1, r4
 8001950:	0e4a      	lsrs	r2, r1, #25
 8001952:	4629      	mov	r1, r5
 8001954:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001958:	4629      	mov	r1, r5
 800195a:	164b      	asrs	r3, r1, #25
 800195c:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001964:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001968:	b21b      	sxth	r3, r3
 800196a:	17da      	asrs	r2, r3, #31
 800196c:	663b      	str	r3, [r7, #96]	@ 0x60
 800196e:	667a      	str	r2, [r7, #100]	@ 0x64
 8001970:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001974:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001978:	462a      	mov	r2, r5
 800197a:	fb02 f203 	mul.w	r2, r2, r3
 800197e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001982:	4621      	mov	r1, r4
 8001984:	fb01 f303 	mul.w	r3, r1, r3
 8001988:	4413      	add	r3, r2
 800198a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800198e:	4621      	mov	r1, r4
 8001990:	fba2 1201 	umull	r1, r2, r2, r1
 8001994:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001998:	460a      	mov	r2, r1
 800199a:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 800199e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80019a2:	4413      	add	r3, r2
 80019a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 80019b4:	4621      	mov	r1, r4
 80019b6:	0cca      	lsrs	r2, r1, #19
 80019b8:	4629      	mov	r1, r5
 80019ba:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80019be:	4629      	mov	r1, r5
 80019c0:	14cb      	asrs	r3, r1, #19
 80019c2:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 80019c6:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 80019ca:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80019ce:	1884      	adds	r4, r0, r2
 80019d0:	65bc      	str	r4, [r7, #88]	@ 0x58
 80019d2:	eb41 0303 	adc.w	r3, r1, r3
 80019d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80019d8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80019dc:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 80019e0:	4621      	mov	r1, r4
 80019e2:	1889      	adds	r1, r1, r2
 80019e4:	6539      	str	r1, [r7, #80]	@ 0x50
 80019e6:	4629      	mov	r1, r5
 80019e8:	eb43 0101 	adc.w	r1, r3, r1
 80019ec:	6579      	str	r1, [r7, #84]	@ 0x54
 80019ee:	f04f 0000 	mov.w	r0, #0
 80019f2:	f04f 0100 	mov.w	r1, #0
 80019f6:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80019fa:	4623      	mov	r3, r4
 80019fc:	0a18      	lsrs	r0, r3, #8
 80019fe:	462b      	mov	r3, r5
 8001a00:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a04:	462b      	mov	r3, r5
 8001a06:	1219      	asrs	r1, r3, #8
 8001a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001a0c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001a10:	b21b      	sxth	r3, r3
 8001a12:	17da      	asrs	r2, r3, #31
 8001a14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001a16:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	f04f 0300 	mov.w	r3, #0
 8001a20:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001a24:	464c      	mov	r4, r9
 8001a26:	0123      	lsls	r3, r4, #4
 8001a28:	4644      	mov	r4, r8
 8001a2a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001a2e:	4644      	mov	r4, r8
 8001a30:	0122      	lsls	r2, r4, #4
 8001a32:	1884      	adds	r4, r0, r2
 8001a34:	603c      	str	r4, [r7, #0]
 8001a36:	eb41 0303 	adc.w	r3, r1, r3
 8001a3a:	607b      	str	r3, [r7, #4]
 8001a3c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001a40:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p;
 8001a44:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001a54 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001a54:	b480      	push	{r7}
 8001a56:	b087      	sub	sp, #28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001a66:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	039a      	lsls	r2, r3, #14
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001a72:	051b      	lsls	r3, r3, #20
 8001a74:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	fb01 f303 	mul.w	r3, r1, r3
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001a8a:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8001a92:	4611      	mov	r1, r2
 8001a94:	697a      	ldr	r2, [r7, #20]
 8001a96:	fb01 f202 	mul.w	r2, r1, r2
 8001a9a:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001a9c:	68f9      	ldr	r1, [r7, #12]
 8001a9e:	7f09      	ldrb	r1, [r1, #28]
 8001aa0:	4608      	mov	r0, r1
 8001aa2:	6979      	ldr	r1, [r7, #20]
 8001aa4:	fb00 f101 	mul.w	r1, r0, r1
 8001aa8:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001aaa:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001aae:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001ab2:	1292      	asrs	r2, r2, #10
 8001ab4:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001ab8:	68f9      	ldr	r1, [r7, #12]
 8001aba:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001abe:	fb01 f202 	mul.w	r2, r1, r2
 8001ac2:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001ac6:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001ac8:	fb02 f303 	mul.w	r3, r2, r3
 8001acc:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	13db      	asrs	r3, r3, #15
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	13d2      	asrs	r2, r2, #15
 8001ad6:	fb02 f303 	mul.w	r3, r2, r3
 8001ada:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	7e12      	ldrb	r2, [r2, #24]
 8001ae0:	fb02 f303 	mul.w	r3, r2, r3
 8001ae4:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001af2:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001afa:	bfa8      	it	ge
 8001afc:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001b00:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	131b      	asrs	r3, r3, #12
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	371c      	adds	r7, #28
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b08c      	sub	sp, #48	@ 0x30
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	60f8      	str	r0, [r7, #12]
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
 8001b1e:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001b26:	2b60      	cmp	r3, #96	@ 0x60
 8001b28:	d007      	beq.n	8001b3a <bmp280_read_fixed+0x28>
		if (humidity)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d002      	beq.n	8001b36 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <bmp280_read_fixed+0x32>
 8001b40:	2308      	movs	r3, #8
 8001b42:	e000      	b.n	8001b46 <bmp280_read_fixed+0x34>
 8001b44:	2306      	movs	r3, #6
 8001b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	f107 0218 	add.w	r2, r7, #24
 8001b50:	21f7      	movs	r1, #247	@ 0xf7
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f7ff faab 	bl	80010ae <read_data>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <bmp280_read_fixed+0x50>
		return false;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	e038      	b.n	8001bd4 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001b62:	7e3b      	ldrb	r3, [r7, #24]
 8001b64:	031a      	lsls	r2, r3, #12
 8001b66:	7e7b      	ldrb	r3, [r7, #25]
 8001b68:	011b      	lsls	r3, r3, #4
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	7eba      	ldrb	r2, [r7, #26]
 8001b6e:	0912      	lsrs	r2, r2, #4
 8001b70:	b2d2      	uxtb	r2, r2
 8001b72:	4313      	orrs	r3, r2
 8001b74:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001b76:	7efb      	ldrb	r3, [r7, #27]
 8001b78:	031a      	lsls	r2, r3, #12
 8001b7a:	7f3b      	ldrb	r3, [r7, #28]
 8001b7c:	011b      	lsls	r3, r3, #4
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	7f7a      	ldrb	r2, [r7, #29]
 8001b82:	0912      	lsrs	r2, r2, #4
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	4313      	orrs	r3, r2
 8001b88:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001b8a:	f107 0314 	add.w	r3, r7, #20
 8001b8e:	461a      	mov	r2, r3
 8001b90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f7ff fc67 	bl	8001466 <compensate_temperature>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f7ff fc97 	bl	80014d8 <compensate_pressure>
 8001baa:	4602      	mov	r2, r0
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00d      	beq.n	8001bd2 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001bb6:	7fbb      	ldrb	r3, [r7, #30]
 8001bb8:	021b      	lsls	r3, r3, #8
 8001bba:	7ffa      	ldrb	r2, [r7, #31]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	6a39      	ldr	r1, [r7, #32]
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f7ff ff44 	bl	8001a54 <compensate_humidity>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001bd2:	2301      	movs	r3, #1
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3730      	adds	r7, #48	@ 0x30
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b088      	sub	sp, #32
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
 8001be8:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d002      	beq.n	8001bf6 <bmp280_read_float+0x1a>
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	e000      	b.n	8001bf8 <bmp280_read_float+0x1c>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f107 0218 	add.w	r2, r7, #24
 8001bfc:	f107 011c 	add.w	r1, r7, #28
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f7ff ff86 	bl	8001b12 <bmp280_read_fixed>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d028      	beq.n	8001c5e <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	ee07 3a90 	vmov	s15, r3
 8001c12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c16:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001c68 <bmp280_read_float+0x8c>
 8001c1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	ee07 3a90 	vmov	s15, r3
 8001c2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c2e:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001c6c <bmp280_read_float+0x90>
 8001c32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00b      	beq.n	8001c5a <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	ee07 3a90 	vmov	s15, r3
 8001c48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c4c:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001c70 <bmp280_read_float+0x94>
 8001c50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <bmp280_read_float+0x84>
	}

	return false;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3720      	adds	r7, #32
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	42c80000 	.word	0x42c80000
 8001c6c:	43800000 	.word	0x43800000
 8001c70:	44800000 	.word	0x44800000

08001c74 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8001c7e:	4a38      	ldr	r2, [pc, #224]	@ (8001d60 <HD44780_Init+0xec>)
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8001c84:	4b37      	ldr	r3, [pc, #220]	@ (8001d64 <HD44780_Init+0xf0>)
 8001c86:	2208      	movs	r2, #8
 8001c88:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8001c8a:	4b37      	ldr	r3, [pc, #220]	@ (8001d68 <HD44780_Init+0xf4>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8001c90:	4b33      	ldr	r3, [pc, #204]	@ (8001d60 <HD44780_Init+0xec>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d907      	bls.n	8001ca8 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8001c98:	4b33      	ldr	r3, [pc, #204]	@ (8001d68 <HD44780_Init+0xf4>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	f043 0308 	orr.w	r3, r3, #8
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	4b31      	ldr	r3, [pc, #196]	@ (8001d68 <HD44780_Init+0xf4>)
 8001ca4:	701a      	strb	r2, [r3, #0]
 8001ca6:	e006      	b.n	8001cb6 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8001ca8:	4b2f      	ldr	r3, [pc, #188]	@ (8001d68 <HD44780_Init+0xf4>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	f043 0304 	orr.w	r3, r3, #4
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	4b2d      	ldr	r3, [pc, #180]	@ (8001d68 <HD44780_Init+0xf4>)
 8001cb4:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8001cb6:	f000 f985 	bl	8001fc4 <DelayInit>
  HAL_Delay(50);
 8001cba:	2032      	movs	r0, #50	@ 0x32
 8001cbc:	f001 f8a2 	bl	8002e04 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8001cc0:	4b28      	ldr	r3, [pc, #160]	@ (8001d64 <HD44780_Init+0xf0>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f000 f943 	bl	8001f50 <ExpanderWrite>
  HAL_Delay(1000);
 8001cca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cce:	f001 f899 	bl	8002e04 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8001cd2:	2030      	movs	r0, #48	@ 0x30
 8001cd4:	f000 f92b 	bl	8001f2e <Write4Bits>
  DelayUS(4500);
 8001cd8:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001cdc:	f000 f99c 	bl	8002018 <DelayUS>

  Write4Bits(0x03 << 4);
 8001ce0:	2030      	movs	r0, #48	@ 0x30
 8001ce2:	f000 f924 	bl	8001f2e <Write4Bits>
  DelayUS(4500);
 8001ce6:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001cea:	f000 f995 	bl	8002018 <DelayUS>

  Write4Bits(0x03 << 4);
 8001cee:	2030      	movs	r0, #48	@ 0x30
 8001cf0:	f000 f91d 	bl	8001f2e <Write4Bits>
  DelayUS(4500);
 8001cf4:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001cf8:	f000 f98e 	bl	8002018 <DelayUS>

  Write4Bits(0x02 << 4);
 8001cfc:	2020      	movs	r0, #32
 8001cfe:	f000 f916 	bl	8001f2e <Write4Bits>
  DelayUS(100);
 8001d02:	2064      	movs	r0, #100	@ 0x64
 8001d04:	f000 f988 	bl	8002018 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8001d08:	4b17      	ldr	r3, [pc, #92]	@ (8001d68 <HD44780_Init+0xf4>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	f043 0320 	orr.w	r3, r3, #32
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	4618      	mov	r0, r3
 8001d14:	f000 f8ce 	bl	8001eb4 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001d18:	4b14      	ldr	r3, [pc, #80]	@ (8001d6c <HD44780_Init+0xf8>)
 8001d1a:	2204      	movs	r2, #4
 8001d1c:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8001d1e:	f000 f875 	bl	8001e0c <HD44780_Display>
  HD44780_Clear();
 8001d22:	f000 f82b 	bl	8001d7c <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001d26:	4b12      	ldr	r3, [pc, #72]	@ (8001d70 <HD44780_Init+0xfc>)
 8001d28:	2202      	movs	r2, #2
 8001d2a:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8001d2c:	4b10      	ldr	r3, [pc, #64]	@ (8001d70 <HD44780_Init+0xfc>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	f043 0304 	orr.w	r3, r3, #4
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	4618      	mov	r0, r3
 8001d38:	f000 f8bc 	bl	8001eb4 <SendCommand>
  DelayUS(4500);
 8001d3c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001d40:	f000 f96a 	bl	8002018 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8001d44:	490b      	ldr	r1, [pc, #44]	@ (8001d74 <HD44780_Init+0x100>)
 8001d46:	2000      	movs	r0, #0
 8001d48:	f000 f876 	bl	8001e38 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8001d4c:	490a      	ldr	r1, [pc, #40]	@ (8001d78 <HD44780_Init+0x104>)
 8001d4e:	2001      	movs	r0, #1
 8001d50:	f000 f872 	bl	8001e38 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8001d54:	f000 f81d 	bl	8001d92 <HD44780_Home>
}
 8001d58:	bf00      	nop
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20000207 	.word	0x20000207
 8001d64:	20000208 	.word	0x20000208
 8001d68:	20000204 	.word	0x20000204
 8001d6c:	20000205 	.word	0x20000205
 8001d70:	20000206 	.word	0x20000206
 8001d74:	20000000 	.word	0x20000000
 8001d78:	20000008 	.word	0x20000008

08001d7c <HD44780_Clear>:

void HD44780_Clear()
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8001d80:	2001      	movs	r0, #1
 8001d82:	f000 f897 	bl	8001eb4 <SendCommand>
  DelayUS(2000);
 8001d86:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001d8a:	f000 f945 	bl	8002018 <DelayUS>
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HD44780_Home>:

void HD44780_Home()
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8001d96:	2002      	movs	r0, #2
 8001d98:	f000 f88c 	bl	8001eb4 <SendCommand>
  DelayUS(2000);
 8001d9c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001da0:	f000 f93a 	bl	8002018 <DelayUS>
}
 8001da4:	bf00      	nop
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8001da8:	b590      	push	{r4, r7, lr}
 8001daa:	b087      	sub	sp, #28
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	460a      	mov	r2, r1
 8001db2:	71fb      	strb	r3, [r7, #7]
 8001db4:	4613      	mov	r3, r2
 8001db6:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001db8:	4b12      	ldr	r3, [pc, #72]	@ (8001e04 <HD44780_SetCursor+0x5c>)
 8001dba:	f107 0408 	add.w	r4, r7, #8
 8001dbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8001dc4:	4b10      	ldr	r3, [pc, #64]	@ (8001e08 <HD44780_SetCursor+0x60>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	79ba      	ldrb	r2, [r7, #6]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d303      	bcc.n	8001dd6 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8001dce:	4b0e      	ldr	r3, [pc, #56]	@ (8001e08 <HD44780_SetCursor+0x60>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8001dd6:	79bb      	ldrb	r3, [r7, #6]
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	3318      	adds	r3, #24
 8001ddc:	443b      	add	r3, r7
 8001dde:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	4413      	add	r3, r2
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	b25b      	sxtb	r3, r3
 8001dec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001df0:	b25b      	sxtb	r3, r3
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	4618      	mov	r0, r3
 8001df6:	f000 f85d 	bl	8001eb4 <SendCommand>
}
 8001dfa:	bf00      	nop
 8001dfc:	371c      	adds	r7, #28
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd90      	pop	{r4, r7, pc}
 8001e02:	bf00      	nop
 8001e04:	080096b8 	.word	0x080096b8
 8001e08:	20000207 	.word	0x20000207

08001e0c <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8001e10:	4b08      	ldr	r3, [pc, #32]	@ (8001e34 <HD44780_Display+0x28>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	f043 0304 	orr.w	r3, r3, #4
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	4b06      	ldr	r3, [pc, #24]	@ (8001e34 <HD44780_Display+0x28>)
 8001e1c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8001e1e:	4b05      	ldr	r3, [pc, #20]	@ (8001e34 <HD44780_Display+0x28>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	f043 0308 	orr.w	r3, r3, #8
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f000 f843 	bl	8001eb4 <SendCommand>
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000205 	.word	0x20000205

08001e38 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	6039      	str	r1, [r7, #0]
 8001e42:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8001e44:	79fb      	ldrb	r3, [r7, #7]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	b25b      	sxtb	r3, r3
 8001e52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e56:	b25b      	sxtb	r3, r3
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 f82a 	bl	8001eb4 <SendCommand>
  for (int i=0; i<8; i++)
 8001e60:	2300      	movs	r3, #0
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	e009      	b.n	8001e7a <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f000 f82e 	bl	8001ed0 <SendChar>
  for (int i=0; i<8; i++)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	3301      	adds	r3, #1
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2b07      	cmp	r3, #7
 8001e7e:	ddf2      	ble.n	8001e66 <HD44780_CreateSpecialChar+0x2e>
  }
}
 8001e80:	bf00      	nop
 8001e82:	bf00      	nop
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b082      	sub	sp, #8
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8001e92:	e006      	b.n	8001ea2 <HD44780_PrintStr+0x18>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	1c5a      	adds	r2, r3, #1
 8001e98:	607a      	str	r2, [r7, #4]
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f000 f817 	bl	8001ed0 <SendChar>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1f4      	bne.n	8001e94 <HD44780_PrintStr+0xa>
}
 8001eaa:	bf00      	nop
 8001eac:	bf00      	nop
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 f812 	bl	8001eec <Send>
}
 8001ec8:	bf00      	nop
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <SendChar>:

static void SendChar(uint8_t ch)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	2101      	movs	r1, #1
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f000 f804 	bl	8001eec <Send>
}
 8001ee4:	bf00      	nop
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	460a      	mov	r2, r1
 8001ef6:	71fb      	strb	r3, [r7, #7]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8001efc:	79fb      	ldrb	r3, [r7, #7]
 8001efe:	f023 030f 	bic.w	r3, r3, #15
 8001f02:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	011b      	lsls	r3, r3, #4
 8001f08:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8001f0a:	7bfa      	ldrb	r2, [r7, #15]
 8001f0c:	79bb      	ldrb	r3, [r7, #6]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 f80b 	bl	8001f2e <Write4Bits>
  Write4Bits((lownib)|mode);
 8001f18:	7bba      	ldrb	r2, [r7, #14]
 8001f1a:	79bb      	ldrb	r3, [r7, #6]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	4618      	mov	r0, r3
 8001f22:	f000 f804 	bl	8001f2e <Write4Bits>
}
 8001f26:	bf00      	nop
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	4603      	mov	r3, r0
 8001f36:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8001f38:	79fb      	ldrb	r3, [r7, #7]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f000 f808 	bl	8001f50 <ExpanderWrite>
  PulseEnable(value);
 8001f40:	79fb      	ldrb	r3, [r7, #7]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f000 f820 	bl	8001f88 <PulseEnable>
}
 8001f48:	bf00      	nop
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af02      	add	r7, sp, #8
 8001f56:	4603      	mov	r3, r0
 8001f58:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8001f5a:	4b09      	ldr	r3, [pc, #36]	@ (8001f80 <ExpanderWrite+0x30>)
 8001f5c:	781a      	ldrb	r2, [r3, #0]
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8001f66:	f107 020f 	add.w	r2, r7, #15
 8001f6a:	230a      	movs	r3, #10
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	2301      	movs	r3, #1
 8001f70:	214e      	movs	r1, #78	@ 0x4e
 8001f72:	4804      	ldr	r0, [pc, #16]	@ (8001f84 <ExpanderWrite+0x34>)
 8001f74:	f002 f820 	bl	8003fb8 <HAL_I2C_Master_Transmit>
}
 8001f78:	bf00      	nop
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20000208 	.word	0x20000208
 8001f84:	20000254 	.word	0x20000254

08001f88 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	f043 0304 	orr.w	r3, r3, #4
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff ffd8 	bl	8001f50 <ExpanderWrite>
  DelayUS(20);
 8001fa0:	2014      	movs	r0, #20
 8001fa2:	f000 f839 	bl	8002018 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	f023 0304 	bic.w	r3, r3, #4
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff ffce 	bl	8001f50 <ExpanderWrite>
  DelayUS(20);
 8001fb4:	2014      	movs	r0, #20
 8001fb6:	f000 f82f 	bl	8002018 <DelayUS>
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
	...

08001fc4 <DelayInit>:

static void DelayInit(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001fc8:	4b11      	ldr	r3, [pc, #68]	@ (8002010 <DelayInit+0x4c>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	4a10      	ldr	r2, [pc, #64]	@ (8002010 <DelayInit+0x4c>)
 8001fce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fd2:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8001fd4:	4b0e      	ldr	r3, [pc, #56]	@ (8002010 <DelayInit+0x4c>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	4a0d      	ldr	r2, [pc, #52]	@ (8002010 <DelayInit+0x4c>)
 8001fda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fde:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8002014 <DelayInit+0x50>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a0b      	ldr	r2, [pc, #44]	@ (8002014 <DelayInit+0x50>)
 8001fe6:	f023 0301 	bic.w	r3, r3, #1
 8001fea:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001fec:	4b09      	ldr	r3, [pc, #36]	@ (8002014 <DelayInit+0x50>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a08      	ldr	r2, [pc, #32]	@ (8002014 <DelayInit+0x50>)
 8001ff2:	f043 0301 	orr.w	r3, r3, #1
 8001ff6:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001ff8:	4b06      	ldr	r3, [pc, #24]	@ (8002014 <DelayInit+0x50>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8001ffe:	bf00      	nop
  __ASM volatile ("NOP");
 8002000:	bf00      	nop
  __ASM volatile ("NOP");
 8002002:	bf00      	nop
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	e000edf0 	.word	0xe000edf0
 8002014:	e0001000 	.word	0xe0001000

08002018 <DelayUS>:

static void DelayUS(uint32_t us) {
 8002018:	b480      	push	{r7}
 800201a:	b087      	sub	sp, #28
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8002020:	4b0e      	ldr	r3, [pc, #56]	@ (800205c <DelayUS+0x44>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a0e      	ldr	r2, [pc, #56]	@ (8002060 <DelayUS+0x48>)
 8002026:	fba2 2303 	umull	r2, r3, r2, r3
 800202a:	0c9a      	lsrs	r2, r3, #18
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	fb02 f303 	mul.w	r3, r2, r3
 8002032:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8002034:	4b0b      	ldr	r3, [pc, #44]	@ (8002064 <DelayUS+0x4c>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800203a:	4b0a      	ldr	r3, [pc, #40]	@ (8002064 <DelayUS+0x4c>)
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	429a      	cmp	r2, r3
 800204a:	d8f6      	bhi.n	800203a <DelayUS+0x22>
}
 800204c:	bf00      	nop
 800204e:	bf00      	nop
 8002050:	371c      	adds	r7, #28
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	20000014 	.word	0x20000014
 8002060:	431bde83 	.word	0x431bde83
 8002064:	e0001000 	.word	0xe0001000

08002068 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	80fb      	strh	r3, [r7, #6]
	  uint32_t last_interrupt_time = 0;
 8002072:	2300      	movs	r3, #0
 8002074:	60fb      	str	r3, [r7, #12]
	  uint32_t current_time = HAL_GetTick();
 8002076:	f000 feb9 	bl	8002dec <HAL_GetTick>
 800207a:	60b8      	str	r0, [r7, #8]

	    if (GPIO_Pin == GPIO_PIN_8 && (current_time - last_interrupt_time > 10)) {
 800207c:	88fb      	ldrh	r3, [r7, #6]
 800207e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002082:	d114      	bne.n	80020ae <HAL_GPIO_EXTI_Callback+0x46>
 8002084:	68ba      	ldr	r2, [r7, #8]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b0a      	cmp	r3, #10
 800208c:	d90f      	bls.n	80020ae <HAL_GPIO_EXTI_Callback+0x46>
	        button_state = !button_state;  // Alterna el estado
 800208e:	4b0a      	ldr	r3, [pc, #40]	@ (80020b8 <HAL_GPIO_EXTI_Callback+0x50>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	bf0c      	ite	eq
 8002096:	2301      	moveq	r3, #1
 8002098:	2300      	movne	r3, #0
 800209a:	b2db      	uxtb	r3, r3
 800209c:	461a      	mov	r2, r3
 800209e:	4b06      	ldr	r3, [pc, #24]	@ (80020b8 <HAL_GPIO_EXTI_Callback+0x50>)
 80020a0:	701a      	strb	r2, [r3, #0]
	        pump_state = button_state;    // Actualiza la bomba
 80020a2:	4b05      	ldr	r3, [pc, #20]	@ (80020b8 <HAL_GPIO_EXTI_Callback+0x50>)
 80020a4:	781a      	ldrb	r2, [r3, #0]
 80020a6:	4b05      	ldr	r3, [pc, #20]	@ (80020bc <HAL_GPIO_EXTI_Callback+0x54>)
 80020a8:	701a      	strb	r2, [r3, #0]
	        //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12); // Alterna un LED de prueba
	        last_interrupt_time = current_time;
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	60fb      	str	r3, [r7, #12]
	    }

}
 80020ae:	bf00      	nop
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000344 	.word	0x20000344
 80020bc:	20000345 	.word	0x20000345

080020c0 <check_humidity_and_control_pump>:

void check_humidity_and_control_pump() {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
    // Leer el valor del ADC
    HAL_ADC_Start(&hadc1);
 80020c4:	481d      	ldr	r0, [pc, #116]	@ (800213c <check_humidity_and_control_pump+0x7c>)
 80020c6:	f000 ff05 	bl	8002ed4 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 80020ca:	f04f 31ff 	mov.w	r1, #4294967295
 80020ce:	481b      	ldr	r0, [pc, #108]	@ (800213c <check_humidity_and_control_pump+0x7c>)
 80020d0:	f001 f805 	bl	80030de <HAL_ADC_PollForConversion>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d105      	bne.n	80020e6 <check_humidity_and_control_pump+0x26>
        soil_humidity = HAL_ADC_GetValue(&hadc1);
 80020da:	4818      	ldr	r0, [pc, #96]	@ (800213c <check_humidity_and_control_pump+0x7c>)
 80020dc:	f001 f88a 	bl	80031f4 <HAL_ADC_GetValue>
 80020e0:	4603      	mov	r3, r0
 80020e2:	4a17      	ldr	r2, [pc, #92]	@ (8002140 <check_humidity_and_control_pump+0x80>)
 80020e4:	6013      	str	r3, [r2, #0]
    }
    HAL_ADC_Stop(&hadc1);
 80020e6:	4815      	ldr	r0, [pc, #84]	@ (800213c <check_humidity_and_control_pump+0x7c>)
 80020e8:	f000 ffc6 	bl	8003078 <HAL_ADC_Stop>

    // Comparar con el umbral y actualizar el estado de la bomba
    if (soil_humidity > humidity_threshold || button_state == 1) { // Si la humedad es baja
 80020ec:	4b14      	ldr	r3, [pc, #80]	@ (8002140 <check_humidity_and_control_pump+0x80>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	4b14      	ldr	r3, [pc, #80]	@ (8002144 <check_humidity_and_control_pump+0x84>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d803      	bhi.n	8002100 <check_humidity_and_control_pump+0x40>
 80020f8:	4b13      	ldr	r3, [pc, #76]	@ (8002148 <check_humidity_and_control_pump+0x88>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d103      	bne.n	8002108 <check_humidity_and_control_pump+0x48>
        pump_state = 1; // Activar la bomba
 8002100:	4b12      	ldr	r3, [pc, #72]	@ (800214c <check_humidity_and_control_pump+0x8c>)
 8002102:	2201      	movs	r2, #1
 8002104:	701a      	strb	r2, [r3, #0]
 8002106:	e006      	b.n	8002116 <check_humidity_and_control_pump+0x56>
    } else if (!button_state) { // Si el botón no está activo
 8002108:	4b0f      	ldr	r3, [pc, #60]	@ (8002148 <check_humidity_and_control_pump+0x88>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d102      	bne.n	8002116 <check_humidity_and_control_pump+0x56>
        pump_state = 0; // Desactivar la bomba
 8002110:	4b0e      	ldr	r3, [pc, #56]	@ (800214c <check_humidity_and_control_pump+0x8c>)
 8002112:	2200      	movs	r2, #0
 8002114:	701a      	strb	r2, [r3, #0]
    }

    // Controlar el relé según el estado de la bomba
    if (pump_state) {
 8002116:	4b0d      	ldr	r3, [pc, #52]	@ (800214c <check_humidity_and_control_pump+0x8c>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d006      	beq.n	800212c <check_humidity_and_control_pump+0x6c>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); // Activar relé (lógica inversa)
 800211e:	2200      	movs	r2, #0
 8002120:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002124:	480a      	ldr	r0, [pc, #40]	@ (8002150 <check_humidity_and_control_pump+0x90>)
 8002126:	f001 fdd1 	bl	8003ccc <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET); // Desactivar relé
    }
}
 800212a:	e005      	b.n	8002138 <check_humidity_and_control_pump+0x78>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET); // Desactivar relé
 800212c:	2201      	movs	r2, #1
 800212e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002132:	4807      	ldr	r0, [pc, #28]	@ (8002150 <check_humidity_and_control_pump+0x90>)
 8002134:	f001 fdca 	bl	8003ccc <HAL_GPIO_WritePin>
}
 8002138:	bf00      	nop
 800213a:	bd80      	pop	{r7, pc}
 800213c:	2000020c 	.word	0x2000020c
 8002140:	20000348 	.word	0x20000348
 8002144:	20000010 	.word	0x20000010
 8002148:	20000344 	.word	0x20000344
 800214c:	20000345 	.word	0x20000345
 8002150:	40020400 	.word	0x40020400
 8002154:	00000000 	.word	0x00000000

08002158 <update_lcd>:

void update_lcd() {
 8002158:	b580      	push	{r7, lr}
 800215a:	b08c      	sub	sp, #48	@ 0x30
 800215c:	af02      	add	r7, sp, #8
    char line1[16]; // Línea 1 del LCD
    char line2[16]; // Línea 2 del LCD
    uint32_t humidity_percent = 138.6228 - 0.0322 * soil_humidity; // Conversión del valor del sensor a porcentaje
 800215e:	4b38      	ldr	r3, [pc, #224]	@ (8002240 <update_lcd+0xe8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7fe f9ce 	bl	8000504 <__aeabi_ui2d>
 8002168:	a331      	add	r3, pc, #196	@ (adr r3, 8002230 <update_lcd+0xd8>)
 800216a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216e:	f7fe fa43 	bl	80005f8 <__aeabi_dmul>
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	a130      	add	r1, pc, #192	@ (adr r1, 8002238 <update_lcd+0xe0>)
 8002178:	e9d1 0100 	ldrd	r0, r1, [r1]
 800217c:	f7fe f884 	bl	8000288 <__aeabi_dsub>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	4610      	mov	r0, r2
 8002186:	4619      	mov	r1, r3
 8002188:	f7fe fd0e 	bl	8000ba8 <__aeabi_d2uiz>
 800218c:	4603      	mov	r3, r0
 800218e:	627b      	str	r3, [r7, #36]	@ 0x24

    // Mostrar estado de la bomba
    if (pump_state) {
 8002190:	4b2c      	ldr	r3, [pc, #176]	@ (8002244 <update_lcd+0xec>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00f      	beq.n	80021b8 <update_lcd+0x60>
        snprintf(line1, sizeof(line1), "B: ON Temp:%.1fC", temperature);
 8002198:	4b2b      	ldr	r3, [pc, #172]	@ (8002248 <update_lcd+0xf0>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f7fe f9d3 	bl	8000548 <__aeabi_f2d>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	f107 0014 	add.w	r0, r7, #20
 80021aa:	e9cd 2300 	strd	r2, r3, [sp]
 80021ae:	4a27      	ldr	r2, [pc, #156]	@ (800224c <update_lcd+0xf4>)
 80021b0:	2110      	movs	r1, #16
 80021b2:	f005 f915 	bl	80073e0 <sniprintf>
 80021b6:	e00e      	b.n	80021d6 <update_lcd+0x7e>
    } else {
        snprintf(line1, sizeof(line1), "B:OFF Temp:%.1fC", temperature);
 80021b8:	4b23      	ldr	r3, [pc, #140]	@ (8002248 <update_lcd+0xf0>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f7fe f9c3 	bl	8000548 <__aeabi_f2d>
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	f107 0014 	add.w	r0, r7, #20
 80021ca:	e9cd 2300 	strd	r2, r3, [sp]
 80021ce:	4a20      	ldr	r2, [pc, #128]	@ (8002250 <update_lcd+0xf8>)
 80021d0:	2110      	movs	r1, #16
 80021d2:	f005 f905 	bl	80073e0 <sniprintf>
    }

    // Mostrar valor del sensor de humedad y presión
    snprintf(line2, sizeof(line2), "H:%lu%% P:%.1f", humidity_percent, pressure / 100);
 80021d6:	4b1f      	ldr	r3, [pc, #124]	@ (8002254 <update_lcd+0xfc>)
 80021d8:	edd3 7a00 	vldr	s15, [r3]
 80021dc:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8002258 <update_lcd+0x100>
 80021e0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80021e4:	ee16 0a90 	vmov	r0, s13
 80021e8:	f7fe f9ae 	bl	8000548 <__aeabi_f2d>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	1d38      	adds	r0, r7, #4
 80021f2:	e9cd 2300 	strd	r2, r3, [sp]
 80021f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f8:	4a18      	ldr	r2, [pc, #96]	@ (800225c <update_lcd+0x104>)
 80021fa:	2110      	movs	r1, #16
 80021fc:	f005 f8f0 	bl	80073e0 <sniprintf>

    // Actualizar el LCD
    HD44780_Clear(); // Limpia el LCD
 8002200:	f7ff fdbc 	bl	8001d7c <HD44780_Clear>
    HD44780_SetCursor(0, 0); // Línea 1
 8002204:	2100      	movs	r1, #0
 8002206:	2000      	movs	r0, #0
 8002208:	f7ff fdce 	bl	8001da8 <HD44780_SetCursor>
    HD44780_PrintStr(line1);
 800220c:	f107 0314 	add.w	r3, r7, #20
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff fe3a 	bl	8001e8a <HD44780_PrintStr>
    HD44780_SetCursor(0, 1); // Línea 2
 8002216:	2101      	movs	r1, #1
 8002218:	2000      	movs	r0, #0
 800221a:	f7ff fdc5 	bl	8001da8 <HD44780_SetCursor>
    HD44780_PrintStr(line2);
 800221e:	1d3b      	adds	r3, r7, #4
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff fe32 	bl	8001e8a <HD44780_PrintStr>
}
 8002226:	bf00      	nop
 8002228:	3728      	adds	r7, #40	@ 0x28
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	b5dcc63f 	.word	0xb5dcc63f
 8002234:	3fa07c84 	.word	0x3fa07c84
 8002238:	fa43fe5d 	.word	0xfa43fe5d
 800223c:	406153ed 	.word	0x406153ed
 8002240:	20000348 	.word	0x20000348
 8002244:	20000345 	.word	0x20000345
 8002248:	20000384 	.word	0x20000384
 800224c:	080096c8 	.word	0x080096c8
 8002250:	080096dc 	.word	0x080096dc
 8002254:	20000380 	.word	0x20000380
 8002258:	42c80000 	.word	0x42c80000
 800225c:	080096f0 	.word	0x080096f0

08002260 <init_bmp280>:

void init_bmp280() {
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
	bmp280_init_default_params(&bmp280.params);
 8002264:	4814      	ldr	r0, [pc, #80]	@ (80022b8 <init_bmp280+0x58>)
 8002266:	f7fe fed7 	bl	8001018 <bmp280_init_default_params>
		bmp280.addr = BMP280_I2C_ADDRESS_0;
 800226a:	4b14      	ldr	r3, [pc, #80]	@ (80022bc <init_bmp280+0x5c>)
 800226c:	2276      	movs	r2, #118	@ 0x76
 800226e:	849a      	strh	r2, [r3, #36]	@ 0x24
		bmp280.i2c = &hi2c2;
 8002270:	4b12      	ldr	r3, [pc, #72]	@ (80022bc <init_bmp280+0x5c>)
 8002272:	4a13      	ldr	r2, [pc, #76]	@ (80022c0 <init_bmp280+0x60>)
 8002274:	629a      	str	r2, [r3, #40]	@ 0x28

		while (!bmp280_init(&bmp280, &bmp280.params)) {
 8002276:	e00b      	b.n	8002290 <init_bmp280+0x30>
			size_bmp = sprintf((char *)data_bmp, "BMP280 initialization failed\n");
 8002278:	4912      	ldr	r1, [pc, #72]	@ (80022c4 <init_bmp280+0x64>)
 800227a:	4813      	ldr	r0, [pc, #76]	@ (80022c8 <init_bmp280+0x68>)
 800227c:	f005 f8e4 	bl	8007448 <siprintf>
 8002280:	4603      	mov	r3, r0
 8002282:	b29a      	uxth	r2, r3
 8002284:	4b11      	ldr	r3, [pc, #68]	@ (80022cc <init_bmp280+0x6c>)
 8002286:	801a      	strh	r2, [r3, #0]
			HAL_Delay(500);
 8002288:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800228c:	f000 fdba 	bl	8002e04 <HAL_Delay>
		while (!bmp280_init(&bmp280, &bmp280.params)) {
 8002290:	4909      	ldr	r1, [pc, #36]	@ (80022b8 <init_bmp280+0x58>)
 8002292:	480a      	ldr	r0, [pc, #40]	@ (80022bc <init_bmp280+0x5c>)
 8002294:	f7ff f83a 	bl	800130c <bmp280_init>
 8002298:	4603      	mov	r3, r0
 800229a:	f083 0301 	eor.w	r3, r3, #1
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1e9      	bne.n	8002278 <init_bmp280+0x18>
		}

		size_bmp = sprintf((char *)data_bmp, "BMP280 found \n");
 80022a4:	490a      	ldr	r1, [pc, #40]	@ (80022d0 <init_bmp280+0x70>)
 80022a6:	4808      	ldr	r0, [pc, #32]	@ (80022c8 <init_bmp280+0x68>)
 80022a8:	f005 f8ce 	bl	8007448 <siprintf>
 80022ac:	4603      	mov	r3, r0
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	4b06      	ldr	r3, [pc, #24]	@ (80022cc <init_bmp280+0x6c>)
 80022b2:	801a      	strh	r2, [r3, #0]
}
 80022b4:	bf00      	nop
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	20000378 	.word	0x20000378
 80022bc:	2000034c 	.word	0x2000034c
 80022c0:	200002a8 	.word	0x200002a8
 80022c4:	08009700 	.word	0x08009700
 80022c8:	20000390 	.word	0x20000390
 80022cc:	2000038c 	.word	0x2000038c
 80022d0:	08009720 	.word	0x08009720

080022d4 <read_bmp280>:

void read_bmp280 () {
 80022d4:	b5b0      	push	{r4, r5, r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af02      	add	r7, sp, #8
	HAL_Delay(100);
 80022da:	2064      	movs	r0, #100	@ 0x64
 80022dc:	f000 fd92 	bl	8002e04 <HAL_Delay>
	while (!bmp280_read_float(&bmp280,&temperature,&pressure,&humidity)) {
 80022e0:	e00b      	b.n	80022fa <read_bmp280+0x26>
		size_bmp = sprintf((char *)data_bmp,"Temperature/pressure reading failed\n");
 80022e2:	491c      	ldr	r1, [pc, #112]	@ (8002354 <read_bmp280+0x80>)
 80022e4:	481c      	ldr	r0, [pc, #112]	@ (8002358 <read_bmp280+0x84>)
 80022e6:	f005 f8af 	bl	8007448 <siprintf>
 80022ea:	4603      	mov	r3, r0
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	4b1b      	ldr	r3, [pc, #108]	@ (800235c <read_bmp280+0x88>)
 80022f0:	801a      	strh	r2, [r3, #0]
		HAL_Delay(500);
 80022f2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80022f6:	f000 fd85 	bl	8002e04 <HAL_Delay>
	while (!bmp280_read_float(&bmp280,&temperature,&pressure,&humidity)) {
 80022fa:	4b19      	ldr	r3, [pc, #100]	@ (8002360 <read_bmp280+0x8c>)
 80022fc:	4a19      	ldr	r2, [pc, #100]	@ (8002364 <read_bmp280+0x90>)
 80022fe:	491a      	ldr	r1, [pc, #104]	@ (8002368 <read_bmp280+0x94>)
 8002300:	481a      	ldr	r0, [pc, #104]	@ (800236c <read_bmp280+0x98>)
 8002302:	f7ff fc6b 	bl	8001bdc <bmp280_read_float>
 8002306:	4603      	mov	r3, r0
 8002308:	f083 0301 	eor.w	r3, r3, #1
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1e7      	bne.n	80022e2 <read_bmp280+0xe>
		}

	size_bmp = sprintf((char *)data_bmp,"Pressure: %.2f Pa, Temperature: %.2f C",pressure, temperature);
 8002312:	4b14      	ldr	r3, [pc, #80]	@ (8002364 <read_bmp280+0x90>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f7fe f916 	bl	8000548 <__aeabi_f2d>
 800231c:	4604      	mov	r4, r0
 800231e:	460d      	mov	r5, r1
 8002320:	4b11      	ldr	r3, [pc, #68]	@ (8002368 <read_bmp280+0x94>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f7fe f90f 	bl	8000548 <__aeabi_f2d>
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	e9cd 2300 	strd	r2, r3, [sp]
 8002332:	4622      	mov	r2, r4
 8002334:	462b      	mov	r3, r5
 8002336:	490e      	ldr	r1, [pc, #56]	@ (8002370 <read_bmp280+0x9c>)
 8002338:	4807      	ldr	r0, [pc, #28]	@ (8002358 <read_bmp280+0x84>)
 800233a:	f005 f885 	bl	8007448 <siprintf>
 800233e:	4603      	mov	r3, r0
 8002340:	b29a      	uxth	r2, r3
 8002342:	4b06      	ldr	r3, [pc, #24]	@ (800235c <read_bmp280+0x88>)
 8002344:	801a      	strh	r2, [r3, #0]
	HAL_Delay(250);
 8002346:	20fa      	movs	r0, #250	@ 0xfa
 8002348:	f000 fd5c 	bl	8002e04 <HAL_Delay>
}
 800234c:	bf00      	nop
 800234e:	46bd      	mov	sp, r7
 8002350:	bdb0      	pop	{r4, r5, r7, pc}
 8002352:	bf00      	nop
 8002354:	08009730 	.word	0x08009730
 8002358:	20000390 	.word	0x20000390
 800235c:	2000038c 	.word	0x2000038c
 8002360:	20000388 	.word	0x20000388
 8002364:	20000380 	.word	0x20000380
 8002368:	20000384 	.word	0x20000384
 800236c:	2000034c 	.word	0x2000034c
 8002370:	08009758 	.word	0x08009758

08002374 <send_bluetooth_message>:

void send_bluetooth_message(char *message) {
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7fd ff77 	bl	8000270 <strlen>
 8002382:	4603      	mov	r3, r0
 8002384:	b29a      	uxth	r2, r3
 8002386:	f04f 33ff 	mov.w	r3, #4294967295
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	4805      	ldr	r0, [pc, #20]	@ (80023a4 <send_bluetooth_message+0x30>)
 800238e:	f003 fb5b 	bl	8005a48 <HAL_UART_Transmit>
    HAL_Delay(500); // Espera para recibir respuesta
 8002392:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002396:	f000 fd35 	bl	8002e04 <HAL_Delay>
}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	200002fc 	.word	0x200002fc

080023a8 <send_sensor_data>:

void send_sensor_data() {
 80023a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80023ac:	b0a8      	sub	sp, #160	@ 0xa0
 80023ae:	af06      	add	r7, sp, #24
    char buffer[128];
    float humidity_percent = 138.6228 - 0.0322 * soil_humidity; // Conversión del valor del sensor a porcentaje
 80023b0:	4b27      	ldr	r3, [pc, #156]	@ (8002450 <send_sensor_data+0xa8>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7fe f8a5 	bl	8000504 <__aeabi_ui2d>
 80023ba:	a321      	add	r3, pc, #132	@ (adr r3, 8002440 <send_sensor_data+0x98>)
 80023bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c0:	f7fe f91a 	bl	80005f8 <__aeabi_dmul>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	a11f      	add	r1, pc, #124	@ (adr r1, 8002448 <send_sensor_data+0xa0>)
 80023ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80023ce:	f7fd ff5b 	bl	8000288 <__aeabi_dsub>
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	4610      	mov	r0, r2
 80023d8:	4619      	mov	r1, r3
 80023da:	f7fe fc05 	bl	8000be8 <__aeabi_d2f>
 80023de:	4603      	mov	r3, r0
 80023e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

    // Formatear los datos correctamente
    snprintf(buffer, sizeof(buffer),"Temp: %.2f C\nHumedad: %.1f%%\n Presion: %.2f hPa\n", temperature, humidity_percent, pressure / 100);
 80023e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002454 <send_sensor_data+0xac>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe f8ad 	bl	8000548 <__aeabi_f2d>
 80023ee:	4604      	mov	r4, r0
 80023f0:	460d      	mov	r5, r1
 80023f2:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80023f6:	f7fe f8a7 	bl	8000548 <__aeabi_f2d>
 80023fa:	4680      	mov	r8, r0
 80023fc:	4689      	mov	r9, r1
 80023fe:	4b16      	ldr	r3, [pc, #88]	@ (8002458 <send_sensor_data+0xb0>)
 8002400:	edd3 7a00 	vldr	s15, [r3]
 8002404:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800245c <send_sensor_data+0xb4>
 8002408:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800240c:	ee16 0a90 	vmov	r0, s13
 8002410:	f7fe f89a 	bl	8000548 <__aeabi_f2d>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	1d38      	adds	r0, r7, #4
 800241a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800241e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002422:	e9cd 4500 	strd	r4, r5, [sp]
 8002426:	4a0e      	ldr	r2, [pc, #56]	@ (8002460 <send_sensor_data+0xb8>)
 8002428:	2180      	movs	r1, #128	@ 0x80
 800242a:	f004 ffd9 	bl	80073e0 <sniprintf>

    // Enviar la cadena por Bluetooth
    send_bluetooth_message(buffer);
 800242e:	1d3b      	adds	r3, r7, #4
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff ff9f 	bl	8002374 <send_bluetooth_message>
}
 8002436:	bf00      	nop
 8002438:	3788      	adds	r7, #136	@ 0x88
 800243a:	46bd      	mov	sp, r7
 800243c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002440:	b5dcc63f 	.word	0xb5dcc63f
 8002444:	3fa07c84 	.word	0x3fa07c84
 8002448:	fa43fe5d 	.word	0xfa43fe5d
 800244c:	406153ed 	.word	0x406153ed
 8002450:	20000348 	.word	0x20000348
 8002454:	20000384 	.word	0x20000384
 8002458:	20000380 	.word	0x20000380
 800245c:	42c80000 	.word	0x42c80000
 8002460:	08009780 	.word	0x08009780

08002464 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint32_t last_bluetooth_update = 0;
 800246a:	2300      	movs	r3, #0
 800246c:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800246e:	f000 fc57 	bl	8002d20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002472:	f000 f837 	bl	80024e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002476:	f000 f977 	bl	8002768 <MX_GPIO_Init>
  MX_ADC1_Init();
 800247a:	f000 f89d 	bl	80025b8 <MX_ADC1_Init>
  MX_I2C1_Init();
 800247e:	f000 f8ed 	bl	800265c <MX_I2C1_Init>
  MX_I2C2_Init();
 8002482:	f000 f919 	bl	80026b8 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8002486:	f000 f945 	bl	8002714 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  init_bmp280();
 800248a:	f7ff fee9 	bl	8002260 <init_bmp280>


  HD44780_Init(2); // Inicializa el LCD con 2 líneas
 800248e:	2002      	movs	r0, #2
 8002490:	f7ff fbf0 	bl	8001c74 <HD44780_Init>
  HD44780_Clear(); // Limpia el LCD
 8002494:	f7ff fc72 	bl	8001d7c <HD44780_Clear>
  HD44780_SetCursor(0, 0);   // Coloca el cursor en la primera línea
 8002498:	2100      	movs	r1, #0
 800249a:	2000      	movs	r0, #0
 800249c:	f7ff fc84 	bl	8001da8 <HD44780_SetCursor>
  HD44780_PrintStr("Sistema Iniciado"); // Mensaje inicial
 80024a0:	480f      	ldr	r0, [pc, #60]	@ (80024e0 <main+0x7c>)
 80024a2:	f7ff fcf2 	bl	8001e8a <HD44780_PrintStr>
  HAL_Delay(2000); // Pausa para que el mensaje sea visible
 80024a6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80024aa:	f000 fcab 	bl	8002e04 <HAL_Delay>
  HD44780_Clear(); // Limpia el LCD después del mensaje inicial
 80024ae:	f7ff fc65 	bl	8001d7c <HD44780_Clear>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Leer datos del BMP280 cada 1 segundo
	  if (HAL_GetTick() - last_bluetooth_update >= 1000) {
 80024b2:	f000 fc9b 	bl	8002dec <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80024c0:	d304      	bcc.n	80024cc <main+0x68>
		  //send_bluetooth_message("Hola\n");

		  send_sensor_data(); // Enviar datos por Bluetooth
 80024c2:	f7ff ff71 	bl	80023a8 <send_sensor_data>
		  last_bluetooth_update = HAL_GetTick();
 80024c6:	f000 fc91 	bl	8002dec <HAL_GetTick>
 80024ca:	6078      	str	r0, [r7, #4]
	  }

	  read_bmp280();
 80024cc:	f7ff ff02 	bl	80022d4 <read_bmp280>
	  check_humidity_and_control_pump();
 80024d0:	f7ff fdf6 	bl	80020c0 <check_humidity_and_control_pump>
	  update_lcd();
 80024d4:	f7ff fe40 	bl	8002158 <update_lcd>
	  HAL_Delay(250);
 80024d8:	20fa      	movs	r0, #250	@ 0xfa
 80024da:	f000 fc93 	bl	8002e04 <HAL_Delay>
	  if (HAL_GetTick() - last_bluetooth_update >= 1000) {
 80024de:	e7e8      	b.n	80024b2 <main+0x4e>
 80024e0:	080097b4 	.word	0x080097b4

080024e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b094      	sub	sp, #80	@ 0x50
 80024e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024ea:	f107 0320 	add.w	r3, r7, #32
 80024ee:	2230      	movs	r2, #48	@ 0x30
 80024f0:	2100      	movs	r1, #0
 80024f2:	4618      	mov	r0, r3
 80024f4:	f005 f80b 	bl	800750e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024f8:	f107 030c 	add.w	r3, r7, #12
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	609a      	str	r2, [r3, #8]
 8002504:	60da      	str	r2, [r3, #12]
 8002506:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002508:	2300      	movs	r3, #0
 800250a:	60bb      	str	r3, [r7, #8]
 800250c:	4b28      	ldr	r3, [pc, #160]	@ (80025b0 <SystemClock_Config+0xcc>)
 800250e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002510:	4a27      	ldr	r2, [pc, #156]	@ (80025b0 <SystemClock_Config+0xcc>)
 8002512:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002516:	6413      	str	r3, [r2, #64]	@ 0x40
 8002518:	4b25      	ldr	r3, [pc, #148]	@ (80025b0 <SystemClock_Config+0xcc>)
 800251a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002520:	60bb      	str	r3, [r7, #8]
 8002522:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002524:	2300      	movs	r3, #0
 8002526:	607b      	str	r3, [r7, #4]
 8002528:	4b22      	ldr	r3, [pc, #136]	@ (80025b4 <SystemClock_Config+0xd0>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a21      	ldr	r2, [pc, #132]	@ (80025b4 <SystemClock_Config+0xd0>)
 800252e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002532:	6013      	str	r3, [r2, #0]
 8002534:	4b1f      	ldr	r3, [pc, #124]	@ (80025b4 <SystemClock_Config+0xd0>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800253c:	607b      	str	r3, [r7, #4]
 800253e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002540:	2302      	movs	r3, #2
 8002542:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002544:	2301      	movs	r3, #1
 8002546:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002548:	2310      	movs	r3, #16
 800254a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800254c:	2302      	movs	r3, #2
 800254e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002550:	2300      	movs	r3, #0
 8002552:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002554:	2308      	movs	r3, #8
 8002556:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002558:	2364      	movs	r3, #100	@ 0x64
 800255a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800255c:	2302      	movs	r3, #2
 800255e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002560:	2307      	movs	r3, #7
 8002562:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002564:	f107 0320 	add.w	r3, r7, #32
 8002568:	4618      	mov	r0, r3
 800256a:	f002 fd85 	bl	8005078 <HAL_RCC_OscConfig>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002574:	f000 f952 	bl	800281c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002578:	230f      	movs	r3, #15
 800257a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800257c:	2302      	movs	r3, #2
 800257e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002584:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002588:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800258a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800258e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002590:	f107 030c 	add.w	r3, r7, #12
 8002594:	2103      	movs	r1, #3
 8002596:	4618      	mov	r0, r3
 8002598:	f002 ffe6 	bl	8005568 <HAL_RCC_ClockConfig>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80025a2:	f000 f93b 	bl	800281c <Error_Handler>
  }
}
 80025a6:	bf00      	nop
 80025a8:	3750      	adds	r7, #80	@ 0x50
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40023800 	.word	0x40023800
 80025b4:	40007000 	.word	0x40007000

080025b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80025be:	463b      	mov	r3, r7
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	605a      	str	r2, [r3, #4]
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80025ca:	4b21      	ldr	r3, [pc, #132]	@ (8002650 <MX_ADC1_Init+0x98>)
 80025cc:	4a21      	ldr	r2, [pc, #132]	@ (8002654 <MX_ADC1_Init+0x9c>)
 80025ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80025d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002650 <MX_ADC1_Init+0x98>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80025d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002650 <MX_ADC1_Init+0x98>)
 80025d8:	2200      	movs	r2, #0
 80025da:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80025dc:	4b1c      	ldr	r3, [pc, #112]	@ (8002650 <MX_ADC1_Init+0x98>)
 80025de:	2200      	movs	r2, #0
 80025e0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80025e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002650 <MX_ADC1_Init+0x98>)
 80025e4:	2204      	movs	r2, #4
 80025e6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80025e8:	4b19      	ldr	r3, [pc, #100]	@ (8002650 <MX_ADC1_Init+0x98>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80025f0:	4b17      	ldr	r3, [pc, #92]	@ (8002650 <MX_ADC1_Init+0x98>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025f6:	4b16      	ldr	r3, [pc, #88]	@ (8002650 <MX_ADC1_Init+0x98>)
 80025f8:	4a17      	ldr	r2, [pc, #92]	@ (8002658 <MX_ADC1_Init+0xa0>)
 80025fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80025fc:	4b14      	ldr	r3, [pc, #80]	@ (8002650 <MX_ADC1_Init+0x98>)
 80025fe:	2200      	movs	r2, #0
 8002600:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002602:	4b13      	ldr	r3, [pc, #76]	@ (8002650 <MX_ADC1_Init+0x98>)
 8002604:	2201      	movs	r2, #1
 8002606:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002608:	4b11      	ldr	r3, [pc, #68]	@ (8002650 <MX_ADC1_Init+0x98>)
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002610:	4b0f      	ldr	r3, [pc, #60]	@ (8002650 <MX_ADC1_Init+0x98>)
 8002612:	2201      	movs	r2, #1
 8002614:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002616:	480e      	ldr	r0, [pc, #56]	@ (8002650 <MX_ADC1_Init+0x98>)
 8002618:	f000 fc18 	bl	8002e4c <HAL_ADC_Init>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002622:	f000 f8fb 	bl	800281c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002626:	2300      	movs	r3, #0
 8002628:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800262a:	2301      	movs	r3, #1
 800262c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800262e:	2300      	movs	r3, #0
 8002630:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002632:	463b      	mov	r3, r7
 8002634:	4619      	mov	r1, r3
 8002636:	4806      	ldr	r0, [pc, #24]	@ (8002650 <MX_ADC1_Init+0x98>)
 8002638:	f000 fdea 	bl	8003210 <HAL_ADC_ConfigChannel>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002642:	f000 f8eb 	bl	800281c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002646:	bf00      	nop
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	2000020c 	.word	0x2000020c
 8002654:	40012000 	.word	0x40012000
 8002658:	0f000001 	.word	0x0f000001

0800265c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002660:	4b12      	ldr	r3, [pc, #72]	@ (80026ac <MX_I2C1_Init+0x50>)
 8002662:	4a13      	ldr	r2, [pc, #76]	@ (80026b0 <MX_I2C1_Init+0x54>)
 8002664:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002666:	4b11      	ldr	r3, [pc, #68]	@ (80026ac <MX_I2C1_Init+0x50>)
 8002668:	4a12      	ldr	r2, [pc, #72]	@ (80026b4 <MX_I2C1_Init+0x58>)
 800266a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800266c:	4b0f      	ldr	r3, [pc, #60]	@ (80026ac <MX_I2C1_Init+0x50>)
 800266e:	2200      	movs	r2, #0
 8002670:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002672:	4b0e      	ldr	r3, [pc, #56]	@ (80026ac <MX_I2C1_Init+0x50>)
 8002674:	2200      	movs	r2, #0
 8002676:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002678:	4b0c      	ldr	r3, [pc, #48]	@ (80026ac <MX_I2C1_Init+0x50>)
 800267a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800267e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002680:	4b0a      	ldr	r3, [pc, #40]	@ (80026ac <MX_I2C1_Init+0x50>)
 8002682:	2200      	movs	r2, #0
 8002684:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002686:	4b09      	ldr	r3, [pc, #36]	@ (80026ac <MX_I2C1_Init+0x50>)
 8002688:	2200      	movs	r2, #0
 800268a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800268c:	4b07      	ldr	r3, [pc, #28]	@ (80026ac <MX_I2C1_Init+0x50>)
 800268e:	2200      	movs	r2, #0
 8002690:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002692:	4b06      	ldr	r3, [pc, #24]	@ (80026ac <MX_I2C1_Init+0x50>)
 8002694:	2200      	movs	r2, #0
 8002696:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002698:	4804      	ldr	r0, [pc, #16]	@ (80026ac <MX_I2C1_Init+0x50>)
 800269a:	f001 fb49 	bl	8003d30 <HAL_I2C_Init>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80026a4:	f000 f8ba 	bl	800281c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80026a8:	bf00      	nop
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	20000254 	.word	0x20000254
 80026b0:	40005400 	.word	0x40005400
 80026b4:	000186a0 	.word	0x000186a0

080026b8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80026bc:	4b12      	ldr	r3, [pc, #72]	@ (8002708 <MX_I2C2_Init+0x50>)
 80026be:	4a13      	ldr	r2, [pc, #76]	@ (800270c <MX_I2C2_Init+0x54>)
 80026c0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80026c2:	4b11      	ldr	r3, [pc, #68]	@ (8002708 <MX_I2C2_Init+0x50>)
 80026c4:	4a12      	ldr	r2, [pc, #72]	@ (8002710 <MX_I2C2_Init+0x58>)
 80026c6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80026c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002708 <MX_I2C2_Init+0x50>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80026ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002708 <MX_I2C2_Init+0x50>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002708 <MX_I2C2_Init+0x50>)
 80026d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80026da:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002708 <MX_I2C2_Init+0x50>)
 80026de:	2200      	movs	r2, #0
 80026e0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80026e2:	4b09      	ldr	r3, [pc, #36]	@ (8002708 <MX_I2C2_Init+0x50>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026e8:	4b07      	ldr	r3, [pc, #28]	@ (8002708 <MX_I2C2_Init+0x50>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026ee:	4b06      	ldr	r3, [pc, #24]	@ (8002708 <MX_I2C2_Init+0x50>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80026f4:	4804      	ldr	r0, [pc, #16]	@ (8002708 <MX_I2C2_Init+0x50>)
 80026f6:	f001 fb1b 	bl	8003d30 <HAL_I2C_Init>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002700:	f000 f88c 	bl	800281c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002704:	bf00      	nop
 8002706:	bd80      	pop	{r7, pc}
 8002708:	200002a8 	.word	0x200002a8
 800270c:	40005800 	.word	0x40005800
 8002710:	000186a0 	.word	0x000186a0

08002714 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002718:	4b11      	ldr	r3, [pc, #68]	@ (8002760 <MX_USART1_UART_Init+0x4c>)
 800271a:	4a12      	ldr	r2, [pc, #72]	@ (8002764 <MX_USART1_UART_Init+0x50>)
 800271c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800271e:	4b10      	ldr	r3, [pc, #64]	@ (8002760 <MX_USART1_UART_Init+0x4c>)
 8002720:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002724:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002726:	4b0e      	ldr	r3, [pc, #56]	@ (8002760 <MX_USART1_UART_Init+0x4c>)
 8002728:	2200      	movs	r2, #0
 800272a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800272c:	4b0c      	ldr	r3, [pc, #48]	@ (8002760 <MX_USART1_UART_Init+0x4c>)
 800272e:	2200      	movs	r2, #0
 8002730:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002732:	4b0b      	ldr	r3, [pc, #44]	@ (8002760 <MX_USART1_UART_Init+0x4c>)
 8002734:	2200      	movs	r2, #0
 8002736:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002738:	4b09      	ldr	r3, [pc, #36]	@ (8002760 <MX_USART1_UART_Init+0x4c>)
 800273a:	220c      	movs	r2, #12
 800273c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800273e:	4b08      	ldr	r3, [pc, #32]	@ (8002760 <MX_USART1_UART_Init+0x4c>)
 8002740:	2200      	movs	r2, #0
 8002742:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002744:	4b06      	ldr	r3, [pc, #24]	@ (8002760 <MX_USART1_UART_Init+0x4c>)
 8002746:	2200      	movs	r2, #0
 8002748:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800274a:	4805      	ldr	r0, [pc, #20]	@ (8002760 <MX_USART1_UART_Init+0x4c>)
 800274c:	f003 f92c 	bl	80059a8 <HAL_UART_Init>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002756:	f000 f861 	bl	800281c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	200002fc 	.word	0x200002fc
 8002764:	40011000 	.word	0x40011000

08002768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b088      	sub	sp, #32
 800276c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800276e:	f107 030c 	add.w	r3, r7, #12
 8002772:	2200      	movs	r2, #0
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	605a      	str	r2, [r3, #4]
 8002778:	609a      	str	r2, [r3, #8]
 800277a:	60da      	str	r2, [r3, #12]
 800277c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	60bb      	str	r3, [r7, #8]
 8002782:	4b24      	ldr	r3, [pc, #144]	@ (8002814 <MX_GPIO_Init+0xac>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002786:	4a23      	ldr	r2, [pc, #140]	@ (8002814 <MX_GPIO_Init+0xac>)
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	6313      	str	r3, [r2, #48]	@ 0x30
 800278e:	4b21      	ldr	r3, [pc, #132]	@ (8002814 <MX_GPIO_Init+0xac>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	60bb      	str	r3, [r7, #8]
 8002798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	607b      	str	r3, [r7, #4]
 800279e:	4b1d      	ldr	r3, [pc, #116]	@ (8002814 <MX_GPIO_Init+0xac>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a2:	4a1c      	ldr	r2, [pc, #112]	@ (8002814 <MX_GPIO_Init+0xac>)
 80027a4:	f043 0302 	orr.w	r3, r3, #2
 80027a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002814 <MX_GPIO_Init+0xac>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	607b      	str	r3, [r7, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELE_GPIO_GPIO_Port, RELE_GPIO_Pin, GPIO_PIN_RESET);
 80027b6:	2200      	movs	r2, #0
 80027b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80027bc:	4816      	ldr	r0, [pc, #88]	@ (8002818 <MX_GPIO_Init+0xb0>)
 80027be:	f001 fa85 	bl	8003ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BOTON_BOMBA_EXTI8_Pin */
  GPIO_InitStruct.Pin = BOTON_BOMBA_EXTI8_Pin;
 80027c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80027c8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80027cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027ce:	2301      	movs	r3, #1
 80027d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BOTON_BOMBA_EXTI8_GPIO_Port, &GPIO_InitStruct);
 80027d2:	f107 030c 	add.w	r3, r7, #12
 80027d6:	4619      	mov	r1, r3
 80027d8:	480f      	ldr	r0, [pc, #60]	@ (8002818 <MX_GPIO_Init+0xb0>)
 80027da:	f001 f8db 	bl	8003994 <HAL_GPIO_Init>

  /*Configure GPIO pin : RELE_GPIO_Pin */
  GPIO_InitStruct.Pin = RELE_GPIO_Pin;
 80027de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027e4:	2301      	movs	r3, #1
 80027e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e8:	2300      	movs	r3, #0
 80027ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ec:	2300      	movs	r3, #0
 80027ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RELE_GPIO_GPIO_Port, &GPIO_InitStruct);
 80027f0:	f107 030c 	add.w	r3, r7, #12
 80027f4:	4619      	mov	r1, r3
 80027f6:	4808      	ldr	r0, [pc, #32]	@ (8002818 <MX_GPIO_Init+0xb0>)
 80027f8:	f001 f8cc 	bl	8003994 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80027fc:	2200      	movs	r2, #0
 80027fe:	2100      	movs	r1, #0
 8002800:	2017      	movs	r0, #23
 8002802:	f000 fffe 	bl	8003802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002806:	2017      	movs	r0, #23
 8002808:	f001 f817 	bl	800383a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800280c:	bf00      	nop
 800280e:	3720      	adds	r7, #32
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40023800 	.word	0x40023800
 8002818:	40020400 	.word	0x40020400

0800281c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002820:	b672      	cpsid	i
}
 8002822:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002824:	bf00      	nop
 8002826:	e7fd      	b.n	8002824 <Error_Handler+0x8>

08002828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800282e:	2300      	movs	r3, #0
 8002830:	607b      	str	r3, [r7, #4]
 8002832:	4b10      	ldr	r3, [pc, #64]	@ (8002874 <HAL_MspInit+0x4c>)
 8002834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002836:	4a0f      	ldr	r2, [pc, #60]	@ (8002874 <HAL_MspInit+0x4c>)
 8002838:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800283c:	6453      	str	r3, [r2, #68]	@ 0x44
 800283e:	4b0d      	ldr	r3, [pc, #52]	@ (8002874 <HAL_MspInit+0x4c>)
 8002840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002842:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002846:	607b      	str	r3, [r7, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	603b      	str	r3, [r7, #0]
 800284e:	4b09      	ldr	r3, [pc, #36]	@ (8002874 <HAL_MspInit+0x4c>)
 8002850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002852:	4a08      	ldr	r2, [pc, #32]	@ (8002874 <HAL_MspInit+0x4c>)
 8002854:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002858:	6413      	str	r3, [r2, #64]	@ 0x40
 800285a:	4b06      	ldr	r3, [pc, #24]	@ (8002874 <HAL_MspInit+0x4c>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002862:	603b      	str	r3, [r7, #0]
 8002864:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002866:	2007      	movs	r0, #7
 8002868:	f000 ffc0 	bl	80037ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800286c:	bf00      	nop
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40023800 	.word	0x40023800

08002878 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b08a      	sub	sp, #40	@ 0x28
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002880:	f107 0314 	add.w	r3, r7, #20
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	605a      	str	r2, [r3, #4]
 800288a:	609a      	str	r2, [r3, #8]
 800288c:	60da      	str	r2, [r3, #12]
 800288e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a17      	ldr	r2, [pc, #92]	@ (80028f4 <HAL_ADC_MspInit+0x7c>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d127      	bne.n	80028ea <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	613b      	str	r3, [r7, #16]
 800289e:	4b16      	ldr	r3, [pc, #88]	@ (80028f8 <HAL_ADC_MspInit+0x80>)
 80028a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a2:	4a15      	ldr	r2, [pc, #84]	@ (80028f8 <HAL_ADC_MspInit+0x80>)
 80028a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80028aa:	4b13      	ldr	r3, [pc, #76]	@ (80028f8 <HAL_ADC_MspInit+0x80>)
 80028ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b2:	613b      	str	r3, [r7, #16]
 80028b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	4b0f      	ldr	r3, [pc, #60]	@ (80028f8 <HAL_ADC_MspInit+0x80>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028be:	4a0e      	ldr	r2, [pc, #56]	@ (80028f8 <HAL_ADC_MspInit+0x80>)
 80028c0:	f043 0301 	orr.w	r3, r3, #1
 80028c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028c6:	4b0c      	ldr	r3, [pc, #48]	@ (80028f8 <HAL_ADC_MspInit+0x80>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = Sensor_capacitivo_adc1_Pin;
 80028d2:	2301      	movs	r3, #1
 80028d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028d6:	2303      	movs	r3, #3
 80028d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028da:	2300      	movs	r3, #0
 80028dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Sensor_capacitivo_adc1_GPIO_Port, &GPIO_InitStruct);
 80028de:	f107 0314 	add.w	r3, r7, #20
 80028e2:	4619      	mov	r1, r3
 80028e4:	4805      	ldr	r0, [pc, #20]	@ (80028fc <HAL_ADC_MspInit+0x84>)
 80028e6:	f001 f855 	bl	8003994 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80028ea:	bf00      	nop
 80028ec:	3728      	adds	r7, #40	@ 0x28
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40012000 	.word	0x40012000
 80028f8:	40023800 	.word	0x40023800
 80028fc:	40020000 	.word	0x40020000

08002900 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08c      	sub	sp, #48	@ 0x30
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002908:	f107 031c 	add.w	r3, r7, #28
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	605a      	str	r2, [r3, #4]
 8002912:	609a      	str	r2, [r3, #8]
 8002914:	60da      	str	r2, [r3, #12]
 8002916:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a32      	ldr	r2, [pc, #200]	@ (80029e8 <HAL_I2C_MspInit+0xe8>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d12c      	bne.n	800297c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	61bb      	str	r3, [r7, #24]
 8002926:	4b31      	ldr	r3, [pc, #196]	@ (80029ec <HAL_I2C_MspInit+0xec>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292a:	4a30      	ldr	r2, [pc, #192]	@ (80029ec <HAL_I2C_MspInit+0xec>)
 800292c:	f043 0302 	orr.w	r3, r3, #2
 8002930:	6313      	str	r3, [r2, #48]	@ 0x30
 8002932:	4b2e      	ldr	r3, [pc, #184]	@ (80029ec <HAL_I2C_MspInit+0xec>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	61bb      	str	r3, [r7, #24]
 800293c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_I2C1_Pin|LCD_SDA_I2C1_Pin;
 800293e:	23c0      	movs	r3, #192	@ 0xc0
 8002940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002942:	2312      	movs	r3, #18
 8002944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002946:	2300      	movs	r3, #0
 8002948:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800294a:	2303      	movs	r3, #3
 800294c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800294e:	2304      	movs	r3, #4
 8002950:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002952:	f107 031c 	add.w	r3, r7, #28
 8002956:	4619      	mov	r1, r3
 8002958:	4825      	ldr	r0, [pc, #148]	@ (80029f0 <HAL_I2C_MspInit+0xf0>)
 800295a:	f001 f81b 	bl	8003994 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	617b      	str	r3, [r7, #20]
 8002962:	4b22      	ldr	r3, [pc, #136]	@ (80029ec <HAL_I2C_MspInit+0xec>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002966:	4a21      	ldr	r2, [pc, #132]	@ (80029ec <HAL_I2C_MspInit+0xec>)
 8002968:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800296c:	6413      	str	r3, [r2, #64]	@ 0x40
 800296e:	4b1f      	ldr	r3, [pc, #124]	@ (80029ec <HAL_I2C_MspInit+0xec>)
 8002970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002972:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800297a:	e031      	b.n	80029e0 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a1c      	ldr	r2, [pc, #112]	@ (80029f4 <HAL_I2C_MspInit+0xf4>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d12c      	bne.n	80029e0 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	613b      	str	r3, [r7, #16]
 800298a:	4b18      	ldr	r3, [pc, #96]	@ (80029ec <HAL_I2C_MspInit+0xec>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298e:	4a17      	ldr	r2, [pc, #92]	@ (80029ec <HAL_I2C_MspInit+0xec>)
 8002990:	f043 0302 	orr.w	r3, r3, #2
 8002994:	6313      	str	r3, [r2, #48]	@ 0x30
 8002996:	4b15      	ldr	r3, [pc, #84]	@ (80029ec <HAL_I2C_MspInit+0xec>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	613b      	str	r3, [r7, #16]
 80029a0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Stemp_I2C2_SCL_Pin|Stemp_I2C2_SDA_Pin;
 80029a2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80029a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029a8:	2312      	movs	r3, #18
 80029aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b0:	2303      	movs	r3, #3
 80029b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80029b4:	2304      	movs	r3, #4
 80029b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029b8:	f107 031c 	add.w	r3, r7, #28
 80029bc:	4619      	mov	r1, r3
 80029be:	480c      	ldr	r0, [pc, #48]	@ (80029f0 <HAL_I2C_MspInit+0xf0>)
 80029c0:	f000 ffe8 	bl	8003994 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80029c4:	2300      	movs	r3, #0
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	4b08      	ldr	r3, [pc, #32]	@ (80029ec <HAL_I2C_MspInit+0xec>)
 80029ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029cc:	4a07      	ldr	r2, [pc, #28]	@ (80029ec <HAL_I2C_MspInit+0xec>)
 80029ce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80029d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80029d4:	4b05      	ldr	r3, [pc, #20]	@ (80029ec <HAL_I2C_MspInit+0xec>)
 80029d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	68fb      	ldr	r3, [r7, #12]
}
 80029e0:	bf00      	nop
 80029e2:	3730      	adds	r7, #48	@ 0x30
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40005400 	.word	0x40005400
 80029ec:	40023800 	.word	0x40023800
 80029f0:	40020400 	.word	0x40020400
 80029f4:	40005800 	.word	0x40005800

080029f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08a      	sub	sp, #40	@ 0x28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a00:	f107 0314 	add.w	r3, r7, #20
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	605a      	str	r2, [r3, #4]
 8002a0a:	609a      	str	r2, [r3, #8]
 8002a0c:	60da      	str	r2, [r3, #12]
 8002a0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a1d      	ldr	r2, [pc, #116]	@ (8002a8c <HAL_UART_MspInit+0x94>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d134      	bne.n	8002a84 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	613b      	str	r3, [r7, #16]
 8002a1e:	4b1c      	ldr	r3, [pc, #112]	@ (8002a90 <HAL_UART_MspInit+0x98>)
 8002a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a22:	4a1b      	ldr	r2, [pc, #108]	@ (8002a90 <HAL_UART_MspInit+0x98>)
 8002a24:	f043 0310 	orr.w	r3, r3, #16
 8002a28:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a2a:	4b19      	ldr	r3, [pc, #100]	@ (8002a90 <HAL_UART_MspInit+0x98>)
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a2e:	f003 0310 	and.w	r3, r3, #16
 8002a32:	613b      	str	r3, [r7, #16]
 8002a34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	4b15      	ldr	r3, [pc, #84]	@ (8002a90 <HAL_UART_MspInit+0x98>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3e:	4a14      	ldr	r2, [pc, #80]	@ (8002a90 <HAL_UART_MspInit+0x98>)
 8002a40:	f043 0301 	orr.w	r3, r3, #1
 8002a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a46:	4b12      	ldr	r3, [pc, #72]	@ (8002a90 <HAL_UART_MspInit+0x98>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a52:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a58:	2302      	movs	r3, #2
 8002a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a60:	2303      	movs	r3, #3
 8002a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a64:	2307      	movs	r3, #7
 8002a66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a68:	f107 0314 	add.w	r3, r7, #20
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4809      	ldr	r0, [pc, #36]	@ (8002a94 <HAL_UART_MspInit+0x9c>)
 8002a70:	f000 ff90 	bl	8003994 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a74:	2200      	movs	r2, #0
 8002a76:	2100      	movs	r1, #0
 8002a78:	2025      	movs	r0, #37	@ 0x25
 8002a7a:	f000 fec2 	bl	8003802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a7e:	2025      	movs	r0, #37	@ 0x25
 8002a80:	f000 fedb 	bl	800383a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002a84:	bf00      	nop
 8002a86:	3728      	adds	r7, #40	@ 0x28
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40011000 	.word	0x40011000
 8002a90:	40023800 	.word	0x40023800
 8002a94:	40020000 	.word	0x40020000

08002a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a9c:	bf00      	nop
 8002a9e:	e7fd      	b.n	8002a9c <NMI_Handler+0x4>

08002aa0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aa4:	bf00      	nop
 8002aa6:	e7fd      	b.n	8002aa4 <HardFault_Handler+0x4>

08002aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002aac:	bf00      	nop
 8002aae:	e7fd      	b.n	8002aac <MemManage_Handler+0x4>

08002ab0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ab4:	bf00      	nop
 8002ab6:	e7fd      	b.n	8002ab4 <BusFault_Handler+0x4>

08002ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002abc:	bf00      	nop
 8002abe:	e7fd      	b.n	8002abc <UsageFault_Handler+0x4>

08002ac0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ac4:	bf00      	nop
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ad2:	bf00      	nop
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ae0:	bf00      	nop
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002aee:	f000 f969 	bl	8002dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002af2:	bf00      	nop
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOTON_BOMBA_EXTI8_Pin);
 8002afa:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002afe:	f001 f8ff 	bl	8003d00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002b02:	bf00      	nop
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002b0c:	4802      	ldr	r0, [pc, #8]	@ (8002b18 <USART1_IRQHandler+0x10>)
 8002b0e:	f003 f827 	bl	8005b60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002b12:	bf00      	nop
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	200002fc 	.word	0x200002fc

08002b1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  return 1;
 8002b20:	2301      	movs	r3, #1
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <_kill>:

int _kill(int pid, int sig)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b36:	f004 fd3d 	bl	80075b4 <__errno>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2216      	movs	r2, #22
 8002b3e:	601a      	str	r2, [r3, #0]
  return -1;
 8002b40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <_exit>:

void _exit (int status)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b54:	f04f 31ff 	mov.w	r1, #4294967295
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f7ff ffe7 	bl	8002b2c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b5e:	bf00      	nop
 8002b60:	e7fd      	b.n	8002b5e <_exit+0x12>

08002b62 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b086      	sub	sp, #24
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	60f8      	str	r0, [r7, #12]
 8002b6a:	60b9      	str	r1, [r7, #8]
 8002b6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]
 8002b72:	e00a      	b.n	8002b8a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b74:	f3af 8000 	nop.w
 8002b78:	4601      	mov	r1, r0
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	1c5a      	adds	r2, r3, #1
 8002b7e:	60ba      	str	r2, [r7, #8]
 8002b80:	b2ca      	uxtb	r2, r1
 8002b82:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	3301      	adds	r3, #1
 8002b88:	617b      	str	r3, [r7, #20]
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	dbf0      	blt.n	8002b74 <_read+0x12>
  }

  return len;
 8002b92:	687b      	ldr	r3, [r7, #4]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]
 8002bac:	e009      	b.n	8002bc2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	1c5a      	adds	r2, r3, #1
 8002bb2:	60ba      	str	r2, [r7, #8]
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	617b      	str	r3, [r7, #20]
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	dbf1      	blt.n	8002bae <_write+0x12>
  }
  return len;
 8002bca:	687b      	ldr	r3, [r7, #4]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3718      	adds	r7, #24
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <_close>:

int _close(int file)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002bdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002bfc:	605a      	str	r2, [r3, #4]
  return 0;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <_isatty>:

int _isatty(int file)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c14:	2301      	movs	r3, #1
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b085      	sub	sp, #20
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	60f8      	str	r0, [r7, #12]
 8002c2a:	60b9      	str	r1, [r7, #8]
 8002c2c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c44:	4a14      	ldr	r2, [pc, #80]	@ (8002c98 <_sbrk+0x5c>)
 8002c46:	4b15      	ldr	r3, [pc, #84]	@ (8002c9c <_sbrk+0x60>)
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c50:	4b13      	ldr	r3, [pc, #76]	@ (8002ca0 <_sbrk+0x64>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d102      	bne.n	8002c5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c58:	4b11      	ldr	r3, [pc, #68]	@ (8002ca0 <_sbrk+0x64>)
 8002c5a:	4a12      	ldr	r2, [pc, #72]	@ (8002ca4 <_sbrk+0x68>)
 8002c5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c5e:	4b10      	ldr	r3, [pc, #64]	@ (8002ca0 <_sbrk+0x64>)
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4413      	add	r3, r2
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d207      	bcs.n	8002c7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c6c:	f004 fca2 	bl	80075b4 <__errno>
 8002c70:	4603      	mov	r3, r0
 8002c72:	220c      	movs	r2, #12
 8002c74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c76:	f04f 33ff 	mov.w	r3, #4294967295
 8002c7a:	e009      	b.n	8002c90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c7c:	4b08      	ldr	r3, [pc, #32]	@ (8002ca0 <_sbrk+0x64>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c82:	4b07      	ldr	r3, [pc, #28]	@ (8002ca0 <_sbrk+0x64>)
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4413      	add	r3, r2
 8002c8a:	4a05      	ldr	r2, [pc, #20]	@ (8002ca0 <_sbrk+0x64>)
 8002c8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	20020000 	.word	0x20020000
 8002c9c:	00000400 	.word	0x00000400
 8002ca0:	20000490 	.word	0x20000490
 8002ca4:	200005e8 	.word	0x200005e8

08002ca8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cac:	4b06      	ldr	r3, [pc, #24]	@ (8002cc8 <SystemInit+0x20>)
 8002cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cb2:	4a05      	ldr	r2, [pc, #20]	@ (8002cc8 <SystemInit+0x20>)
 8002cb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002cb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cbc:	bf00      	nop
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	e000ed00 	.word	0xe000ed00

08002ccc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ccc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d04 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002cd0:	f7ff ffea 	bl	8002ca8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002cd4:	480c      	ldr	r0, [pc, #48]	@ (8002d08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002cd6:	490d      	ldr	r1, [pc, #52]	@ (8002d0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002cd8:	4a0d      	ldr	r2, [pc, #52]	@ (8002d10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cdc:	e002      	b.n	8002ce4 <LoopCopyDataInit>

08002cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ce2:	3304      	adds	r3, #4

08002ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ce8:	d3f9      	bcc.n	8002cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cea:	4a0a      	ldr	r2, [pc, #40]	@ (8002d14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002cec:	4c0a      	ldr	r4, [pc, #40]	@ (8002d18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cf0:	e001      	b.n	8002cf6 <LoopFillZerobss>

08002cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cf4:	3204      	adds	r2, #4

08002cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cf8:	d3fb      	bcc.n	8002cf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cfa:	f004 fc61 	bl	80075c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cfe:	f7ff fbb1 	bl	8002464 <main>
  bx  lr    
 8002d02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002d04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d0c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002d10:	08009b60 	.word	0x08009b60
  ldr r2, =_sbss
 8002d14:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002d18:	200005e4 	.word	0x200005e4

08002d1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d1c:	e7fe      	b.n	8002d1c <ADC_IRQHandler>
	...

08002d20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d24:	4b0e      	ldr	r3, [pc, #56]	@ (8002d60 <HAL_Init+0x40>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a0d      	ldr	r2, [pc, #52]	@ (8002d60 <HAL_Init+0x40>)
 8002d2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d30:	4b0b      	ldr	r3, [pc, #44]	@ (8002d60 <HAL_Init+0x40>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a0a      	ldr	r2, [pc, #40]	@ (8002d60 <HAL_Init+0x40>)
 8002d36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d3c:	4b08      	ldr	r3, [pc, #32]	@ (8002d60 <HAL_Init+0x40>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a07      	ldr	r2, [pc, #28]	@ (8002d60 <HAL_Init+0x40>)
 8002d42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d48:	2003      	movs	r0, #3
 8002d4a:	f000 fd4f 	bl	80037ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d4e:	2000      	movs	r0, #0
 8002d50:	f000 f808 	bl	8002d64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d54:	f7ff fd68 	bl	8002828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40023c00 	.word	0x40023c00

08002d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d6c:	4b12      	ldr	r3, [pc, #72]	@ (8002db8 <HAL_InitTick+0x54>)
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	4b12      	ldr	r3, [pc, #72]	@ (8002dbc <HAL_InitTick+0x58>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	4619      	mov	r1, r3
 8002d76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 fd67 	bl	8003856 <HAL_SYSTICK_Config>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e00e      	b.n	8002db0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b0f      	cmp	r3, #15
 8002d96:	d80a      	bhi.n	8002dae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d98:	2200      	movs	r2, #0
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002da0:	f000 fd2f 	bl	8003802 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002da4:	4a06      	ldr	r2, [pc, #24]	@ (8002dc0 <HAL_InitTick+0x5c>)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
 8002dac:	e000      	b.n	8002db0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	20000014 	.word	0x20000014
 8002dbc:	2000001c 	.word	0x2000001c
 8002dc0:	20000018 	.word	0x20000018

08002dc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dc8:	4b06      	ldr	r3, [pc, #24]	@ (8002de4 <HAL_IncTick+0x20>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	4b06      	ldr	r3, [pc, #24]	@ (8002de8 <HAL_IncTick+0x24>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	4a04      	ldr	r2, [pc, #16]	@ (8002de8 <HAL_IncTick+0x24>)
 8002dd6:	6013      	str	r3, [r2, #0]
}
 8002dd8:	bf00      	nop
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	2000001c 	.word	0x2000001c
 8002de8:	20000494 	.word	0x20000494

08002dec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  return uwTick;
 8002df0:	4b03      	ldr	r3, [pc, #12]	@ (8002e00 <HAL_GetTick+0x14>)
 8002df2:	681b      	ldr	r3, [r3, #0]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	20000494 	.word	0x20000494

08002e04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e0c:	f7ff ffee 	bl	8002dec <HAL_GetTick>
 8002e10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e1c:	d005      	beq.n	8002e2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e48 <HAL_Delay+0x44>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	461a      	mov	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4413      	add	r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e2a:	bf00      	nop
 8002e2c:	f7ff ffde 	bl	8002dec <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d8f7      	bhi.n	8002e2c <HAL_Delay+0x28>
  {
  }
}
 8002e3c:	bf00      	nop
 8002e3e:	bf00      	nop
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	2000001c 	.word	0x2000001c

08002e4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e54:	2300      	movs	r3, #0
 8002e56:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e033      	b.n	8002eca <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d109      	bne.n	8002e7e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7ff fd04 	bl	8002878 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e82:	f003 0310 	and.w	r3, r3, #16
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d118      	bne.n	8002ebc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002e92:	f023 0302 	bic.w	r3, r3, #2
 8002e96:	f043 0202 	orr.w	r2, r3, #2
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 fad8 	bl	8003454 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eae:	f023 0303 	bic.w	r3, r3, #3
 8002eb2:	f043 0201 	orr.w	r2, r3, #1
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	641a      	str	r2, [r3, #64]	@ 0x40
 8002eba:	e001      	b.n	8002ec0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
	...

08002ed4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d101      	bne.n	8002eee <HAL_ADC_Start+0x1a>
 8002eea:	2302      	movs	r3, #2
 8002eec:	e0b2      	b.n	8003054 <HAL_ADC_Start+0x180>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d018      	beq.n	8002f36 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0201 	orr.w	r2, r2, #1
 8002f12:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f14:	4b52      	ldr	r3, [pc, #328]	@ (8003060 <HAL_ADC_Start+0x18c>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a52      	ldr	r2, [pc, #328]	@ (8003064 <HAL_ADC_Start+0x190>)
 8002f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1e:	0c9a      	lsrs	r2, r3, #18
 8002f20:	4613      	mov	r3, r2
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	4413      	add	r3, r2
 8002f26:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002f28:	e002      	b.n	8002f30 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1f9      	bne.n	8002f2a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d17a      	bne.n	800303a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f48:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002f4c:	f023 0301 	bic.w	r3, r3, #1
 8002f50:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d007      	beq.n	8002f76 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002f6e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f82:	d106      	bne.n	8002f92 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f88:	f023 0206 	bic.w	r2, r3, #6
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002f90:	e002      	b.n	8002f98 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fa0:	4b31      	ldr	r3, [pc, #196]	@ (8003068 <HAL_ADC_Start+0x194>)
 8002fa2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002fac:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f003 031f 	and.w	r3, r3, #31
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d12a      	bne.n	8003010 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a2b      	ldr	r2, [pc, #172]	@ (800306c <HAL_ADC_Start+0x198>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d015      	beq.n	8002ff0 <HAL_ADC_Start+0x11c>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a29      	ldr	r2, [pc, #164]	@ (8003070 <HAL_ADC_Start+0x19c>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d105      	bne.n	8002fda <HAL_ADC_Start+0x106>
 8002fce:	4b26      	ldr	r3, [pc, #152]	@ (8003068 <HAL_ADC_Start+0x194>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f003 031f 	and.w	r3, r3, #31
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00a      	beq.n	8002ff0 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a25      	ldr	r2, [pc, #148]	@ (8003074 <HAL_ADC_Start+0x1a0>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d136      	bne.n	8003052 <HAL_ADC_Start+0x17e>
 8002fe4:	4b20      	ldr	r3, [pc, #128]	@ (8003068 <HAL_ADC_Start+0x194>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 0310 	and.w	r3, r3, #16
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d130      	bne.n	8003052 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d129      	bne.n	8003052 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800300c:	609a      	str	r2, [r3, #8]
 800300e:	e020      	b.n	8003052 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a15      	ldr	r2, [pc, #84]	@ (800306c <HAL_ADC_Start+0x198>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d11b      	bne.n	8003052 <HAL_ADC_Start+0x17e>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d114      	bne.n	8003052 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689a      	ldr	r2, [r3, #8]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003036:	609a      	str	r2, [r3, #8]
 8003038:	e00b      	b.n	8003052 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303e:	f043 0210 	orr.w	r2, r3, #16
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800304a:	f043 0201 	orr.w	r2, r3, #1
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3714      	adds	r7, #20
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	20000014 	.word	0x20000014
 8003064:	431bde83 	.word	0x431bde83
 8003068:	40012300 	.word	0x40012300
 800306c:	40012000 	.word	0x40012000
 8003070:	40012100 	.word	0x40012100
 8003074:	40012200 	.word	0x40012200

08003078 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003086:	2b01      	cmp	r3, #1
 8003088:	d101      	bne.n	800308e <HAL_ADC_Stop+0x16>
 800308a:	2302      	movs	r3, #2
 800308c:	e021      	b.n	80030d2 <HAL_ADC_Stop+0x5a>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 0201 	bic.w	r2, r2, #1
 80030a4:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d109      	bne.n	80030c8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80030bc:	f023 0301 	bic.w	r3, r3, #1
 80030c0:	f043 0201 	orr.w	r2, r3, #1
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr

080030de <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b084      	sub	sp, #16
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
 80030e6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80030e8:	2300      	movs	r3, #0
 80030ea:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030fa:	d113      	bne.n	8003124 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003106:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800310a:	d10b      	bne.n	8003124 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003110:	f043 0220 	orr.w	r2, r3, #32
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e063      	b.n	80031ec <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003124:	f7ff fe62 	bl	8002dec <HAL_GetTick>
 8003128:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800312a:	e021      	b.n	8003170 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003132:	d01d      	beq.n	8003170 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d007      	beq.n	800314a <HAL_ADC_PollForConversion+0x6c>
 800313a:	f7ff fe57 	bl	8002dec <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	429a      	cmp	r2, r3
 8003148:	d212      	bcs.n	8003170 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b02      	cmp	r3, #2
 8003156:	d00b      	beq.n	8003170 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315c:	f043 0204 	orr.w	r2, r3, #4
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e03d      	b.n	80031ec <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b02      	cmp	r3, #2
 800317c:	d1d6      	bne.n	800312c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f06f 0212 	mvn.w	r2, #18
 8003186:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d123      	bne.n	80031ea <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d11f      	bne.n	80031ea <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d006      	beq.n	80031c6 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d111      	bne.n	80031ea <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ca:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d105      	bne.n	80031ea <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e2:	f043 0201 	orr.w	r2, r3, #1
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003202:	4618      	mov	r0, r3
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
	...

08003210 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800321a:	2300      	movs	r3, #0
 800321c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003224:	2b01      	cmp	r3, #1
 8003226:	d101      	bne.n	800322c <HAL_ADC_ConfigChannel+0x1c>
 8003228:	2302      	movs	r3, #2
 800322a:	e105      	b.n	8003438 <HAL_ADC_ConfigChannel+0x228>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2b09      	cmp	r3, #9
 800323a:	d925      	bls.n	8003288 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68d9      	ldr	r1, [r3, #12]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	b29b      	uxth	r3, r3
 8003248:	461a      	mov	r2, r3
 800324a:	4613      	mov	r3, r2
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	4413      	add	r3, r2
 8003250:	3b1e      	subs	r3, #30
 8003252:	2207      	movs	r2, #7
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	43da      	mvns	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	400a      	ands	r2, r1
 8003260:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68d9      	ldr	r1, [r3, #12]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	b29b      	uxth	r3, r3
 8003272:	4618      	mov	r0, r3
 8003274:	4603      	mov	r3, r0
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	4403      	add	r3, r0
 800327a:	3b1e      	subs	r3, #30
 800327c:	409a      	lsls	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	60da      	str	r2, [r3, #12]
 8003286:	e022      	b.n	80032ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6919      	ldr	r1, [r3, #16]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	b29b      	uxth	r3, r3
 8003294:	461a      	mov	r2, r3
 8003296:	4613      	mov	r3, r2
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	4413      	add	r3, r2
 800329c:	2207      	movs	r2, #7
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43da      	mvns	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	400a      	ands	r2, r1
 80032aa:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6919      	ldr	r1, [r3, #16]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	689a      	ldr	r2, [r3, #8]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	4618      	mov	r0, r3
 80032be:	4603      	mov	r3, r0
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	4403      	add	r3, r0
 80032c4:	409a      	lsls	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b06      	cmp	r3, #6
 80032d4:	d824      	bhi.n	8003320 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	4613      	mov	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4413      	add	r3, r2
 80032e6:	3b05      	subs	r3, #5
 80032e8:	221f      	movs	r2, #31
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	43da      	mvns	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	400a      	ands	r2, r1
 80032f6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	b29b      	uxth	r3, r3
 8003304:	4618      	mov	r0, r3
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	4613      	mov	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	3b05      	subs	r3, #5
 8003312:	fa00 f203 	lsl.w	r2, r0, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	635a      	str	r2, [r3, #52]	@ 0x34
 800331e:	e04c      	b.n	80033ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	2b0c      	cmp	r3, #12
 8003326:	d824      	bhi.n	8003372 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	3b23      	subs	r3, #35	@ 0x23
 800333a:	221f      	movs	r2, #31
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	43da      	mvns	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	400a      	ands	r2, r1
 8003348:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	b29b      	uxth	r3, r3
 8003356:	4618      	mov	r0, r3
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	4613      	mov	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	3b23      	subs	r3, #35	@ 0x23
 8003364:	fa00 f203 	lsl.w	r2, r0, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003370:	e023      	b.n	80033ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	3b41      	subs	r3, #65	@ 0x41
 8003384:	221f      	movs	r2, #31
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	43da      	mvns	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	400a      	ands	r2, r1
 8003392:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	b29b      	uxth	r3, r3
 80033a0:	4618      	mov	r0, r3
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	4613      	mov	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	3b41      	subs	r3, #65	@ 0x41
 80033ae:	fa00 f203 	lsl.w	r2, r0, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033ba:	4b22      	ldr	r3, [pc, #136]	@ (8003444 <HAL_ADC_ConfigChannel+0x234>)
 80033bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a21      	ldr	r2, [pc, #132]	@ (8003448 <HAL_ADC_ConfigChannel+0x238>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d109      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x1cc>
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2b12      	cmp	r3, #18
 80033ce:	d105      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a19      	ldr	r2, [pc, #100]	@ (8003448 <HAL_ADC_ConfigChannel+0x238>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d123      	bne.n	800342e <HAL_ADC_ConfigChannel+0x21e>
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2b10      	cmp	r3, #16
 80033ec:	d003      	beq.n	80033f6 <HAL_ADC_ConfigChannel+0x1e6>
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2b11      	cmp	r3, #17
 80033f4:	d11b      	bne.n	800342e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b10      	cmp	r3, #16
 8003408:	d111      	bne.n	800342e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800340a:	4b10      	ldr	r3, [pc, #64]	@ (800344c <HAL_ADC_ConfigChannel+0x23c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a10      	ldr	r2, [pc, #64]	@ (8003450 <HAL_ADC_ConfigChannel+0x240>)
 8003410:	fba2 2303 	umull	r2, r3, r2, r3
 8003414:	0c9a      	lsrs	r2, r3, #18
 8003416:	4613      	mov	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003420:	e002      	b.n	8003428 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	3b01      	subs	r3, #1
 8003426:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f9      	bne.n	8003422 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3714      	adds	r7, #20
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	40012300 	.word	0x40012300
 8003448:	40012000 	.word	0x40012000
 800344c:	20000014 	.word	0x20000014
 8003450:	431bde83 	.word	0x431bde83

08003454 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800345c:	4b79      	ldr	r3, [pc, #484]	@ (8003644 <ADC_Init+0x1f0>)
 800345e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	431a      	orrs	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003488:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6859      	ldr	r1, [r3, #4]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	021a      	lsls	r2, r3, #8
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80034ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6859      	ldr	r1, [r3, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6899      	ldr	r1, [r3, #8]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e6:	4a58      	ldr	r2, [pc, #352]	@ (8003648 <ADC_Init+0x1f4>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d022      	beq.n	8003532 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689a      	ldr	r2, [r3, #8]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80034fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6899      	ldr	r1, [r3, #8]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800351c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6899      	ldr	r1, [r3, #8]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	609a      	str	r2, [r3, #8]
 8003530:	e00f      	b.n	8003552 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003540:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003550:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 0202 	bic.w	r2, r2, #2
 8003560:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6899      	ldr	r1, [r3, #8]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	7e1b      	ldrb	r3, [r3, #24]
 800356c:	005a      	lsls	r2, r3, #1
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 3020 	ldrb.w	r3, [r3, #32]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d01b      	beq.n	80035b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800358e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800359e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6859      	ldr	r1, [r3, #4]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035aa:	3b01      	subs	r3, #1
 80035ac:	035a      	lsls	r2, r3, #13
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	605a      	str	r2, [r3, #4]
 80035b6:	e007      	b.n	80035c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035c6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80035d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	3b01      	subs	r3, #1
 80035e4:	051a      	lsls	r2, r3, #20
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80035fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6899      	ldr	r1, [r3, #8]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800360a:	025a      	lsls	r2, r3, #9
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003622:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6899      	ldr	r1, [r3, #8]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	029a      	lsls	r2, r3, #10
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	609a      	str	r2, [r3, #8]
}
 8003638:	bf00      	nop
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	40012300 	.word	0x40012300
 8003648:	0f000001 	.word	0x0f000001

0800364c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f003 0307 	and.w	r3, r3, #7
 800365a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800365c:	4b0c      	ldr	r3, [pc, #48]	@ (8003690 <__NVIC_SetPriorityGrouping+0x44>)
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003668:	4013      	ands	r3, r2
 800366a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003674:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003678:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800367c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800367e:	4a04      	ldr	r2, [pc, #16]	@ (8003690 <__NVIC_SetPriorityGrouping+0x44>)
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	60d3      	str	r3, [r2, #12]
}
 8003684:	bf00      	nop
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	e000ed00 	.word	0xe000ed00

08003694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003698:	4b04      	ldr	r3, [pc, #16]	@ (80036ac <__NVIC_GetPriorityGrouping+0x18>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	0a1b      	lsrs	r3, r3, #8
 800369e:	f003 0307 	and.w	r3, r3, #7
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	e000ed00 	.word	0xe000ed00

080036b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	4603      	mov	r3, r0
 80036b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	db0b      	blt.n	80036da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036c2:	79fb      	ldrb	r3, [r7, #7]
 80036c4:	f003 021f 	and.w	r2, r3, #31
 80036c8:	4907      	ldr	r1, [pc, #28]	@ (80036e8 <__NVIC_EnableIRQ+0x38>)
 80036ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ce:	095b      	lsrs	r3, r3, #5
 80036d0:	2001      	movs	r0, #1
 80036d2:	fa00 f202 	lsl.w	r2, r0, r2
 80036d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036da:	bf00      	nop
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	e000e100 	.word	0xe000e100

080036ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	4603      	mov	r3, r0
 80036f4:	6039      	str	r1, [r7, #0]
 80036f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	db0a      	blt.n	8003716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	b2da      	uxtb	r2, r3
 8003704:	490c      	ldr	r1, [pc, #48]	@ (8003738 <__NVIC_SetPriority+0x4c>)
 8003706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800370a:	0112      	lsls	r2, r2, #4
 800370c:	b2d2      	uxtb	r2, r2
 800370e:	440b      	add	r3, r1
 8003710:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003714:	e00a      	b.n	800372c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	b2da      	uxtb	r2, r3
 800371a:	4908      	ldr	r1, [pc, #32]	@ (800373c <__NVIC_SetPriority+0x50>)
 800371c:	79fb      	ldrb	r3, [r7, #7]
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	3b04      	subs	r3, #4
 8003724:	0112      	lsls	r2, r2, #4
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	440b      	add	r3, r1
 800372a:	761a      	strb	r2, [r3, #24]
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	e000e100 	.word	0xe000e100
 800373c:	e000ed00 	.word	0xe000ed00

08003740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003740:	b480      	push	{r7}
 8003742:	b089      	sub	sp, #36	@ 0x24
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	f1c3 0307 	rsb	r3, r3, #7
 800375a:	2b04      	cmp	r3, #4
 800375c:	bf28      	it	cs
 800375e:	2304      	movcs	r3, #4
 8003760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	3304      	adds	r3, #4
 8003766:	2b06      	cmp	r3, #6
 8003768:	d902      	bls.n	8003770 <NVIC_EncodePriority+0x30>
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	3b03      	subs	r3, #3
 800376e:	e000      	b.n	8003772 <NVIC_EncodePriority+0x32>
 8003770:	2300      	movs	r3, #0
 8003772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003774:	f04f 32ff 	mov.w	r2, #4294967295
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	43da      	mvns	r2, r3
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	401a      	ands	r2, r3
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003788:	f04f 31ff 	mov.w	r1, #4294967295
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	fa01 f303 	lsl.w	r3, r1, r3
 8003792:	43d9      	mvns	r1, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003798:	4313      	orrs	r3, r2
         );
}
 800379a:	4618      	mov	r0, r3
 800379c:	3724      	adds	r7, #36	@ 0x24
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
	...

080037a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3b01      	subs	r3, #1
 80037b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037b8:	d301      	bcc.n	80037be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037ba:	2301      	movs	r3, #1
 80037bc:	e00f      	b.n	80037de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037be:	4a0a      	ldr	r2, [pc, #40]	@ (80037e8 <SysTick_Config+0x40>)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3b01      	subs	r3, #1
 80037c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037c6:	210f      	movs	r1, #15
 80037c8:	f04f 30ff 	mov.w	r0, #4294967295
 80037cc:	f7ff ff8e 	bl	80036ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037d0:	4b05      	ldr	r3, [pc, #20]	@ (80037e8 <SysTick_Config+0x40>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037d6:	4b04      	ldr	r3, [pc, #16]	@ (80037e8 <SysTick_Config+0x40>)
 80037d8:	2207      	movs	r2, #7
 80037da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	e000e010 	.word	0xe000e010

080037ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7ff ff29 	bl	800364c <__NVIC_SetPriorityGrouping>
}
 80037fa:	bf00      	nop
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003802:	b580      	push	{r7, lr}
 8003804:	b086      	sub	sp, #24
 8003806:	af00      	add	r7, sp, #0
 8003808:	4603      	mov	r3, r0
 800380a:	60b9      	str	r1, [r7, #8]
 800380c:	607a      	str	r2, [r7, #4]
 800380e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003810:	2300      	movs	r3, #0
 8003812:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003814:	f7ff ff3e 	bl	8003694 <__NVIC_GetPriorityGrouping>
 8003818:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	68b9      	ldr	r1, [r7, #8]
 800381e:	6978      	ldr	r0, [r7, #20]
 8003820:	f7ff ff8e 	bl	8003740 <NVIC_EncodePriority>
 8003824:	4602      	mov	r2, r0
 8003826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800382a:	4611      	mov	r1, r2
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff ff5d 	bl	80036ec <__NVIC_SetPriority>
}
 8003832:	bf00      	nop
 8003834:	3718      	adds	r7, #24
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b082      	sub	sp, #8
 800383e:	af00      	add	r7, sp, #0
 8003840:	4603      	mov	r3, r0
 8003842:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff ff31 	bl	80036b0 <__NVIC_EnableIRQ>
}
 800384e:	bf00      	nop
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b082      	sub	sp, #8
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7ff ffa2 	bl	80037a8 <SysTick_Config>
 8003864:	4603      	mov	r3, r0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b084      	sub	sp, #16
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800387a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800387c:	f7ff fab6 	bl	8002dec <HAL_GetTick>
 8003880:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d008      	beq.n	80038a0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2280      	movs	r2, #128	@ 0x80
 8003892:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e052      	b.n	8003946 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 0216 	bic.w	r2, r2, #22
 80038ae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695a      	ldr	r2, [r3, #20]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038be:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d103      	bne.n	80038d0 <HAL_DMA_Abort+0x62>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d007      	beq.n	80038e0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 0208 	bic.w	r2, r2, #8
 80038de:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0201 	bic.w	r2, r2, #1
 80038ee:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038f0:	e013      	b.n	800391a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038f2:	f7ff fa7b 	bl	8002dec <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b05      	cmp	r3, #5
 80038fe:	d90c      	bls.n	800391a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2220      	movs	r2, #32
 8003904:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2203      	movs	r2, #3
 800390a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e015      	b.n	8003946 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1e4      	bne.n	80038f2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800392c:	223f      	movs	r2, #63	@ 0x3f
 800392e:	409a      	lsls	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800394e:	b480      	push	{r7}
 8003950:	b083      	sub	sp, #12
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d004      	beq.n	800396c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2280      	movs	r2, #128	@ 0x80
 8003966:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e00c      	b.n	8003986 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2205      	movs	r2, #5
 8003970:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0201 	bic.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
	...

08003994 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003994:	b480      	push	{r7}
 8003996:	b089      	sub	sp, #36	@ 0x24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800399e:	2300      	movs	r3, #0
 80039a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039aa:	2300      	movs	r3, #0
 80039ac:	61fb      	str	r3, [r7, #28]
 80039ae:	e16b      	b.n	8003c88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039b0:	2201      	movs	r2, #1
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	4013      	ands	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	f040 815a 	bne.w	8003c82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d005      	beq.n	80039e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d130      	bne.n	8003a48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	2203      	movs	r2, #3
 80039f2:	fa02 f303 	lsl.w	r3, r2, r3
 80039f6:	43db      	mvns	r3, r3
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	4013      	ands	r3, r2
 80039fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	68da      	ldr	r2, [r3, #12]
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	43db      	mvns	r3, r3
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	091b      	lsrs	r3, r3, #4
 8003a32:	f003 0201 	and.w	r2, r3, #1
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f003 0303 	and.w	r3, r3, #3
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	d017      	beq.n	8003a84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	2203      	movs	r2, #3
 8003a60:	fa02 f303 	lsl.w	r3, r2, r3
 8003a64:	43db      	mvns	r3, r3
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	005b      	lsls	r3, r3, #1
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f003 0303 	and.w	r3, r3, #3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d123      	bne.n	8003ad8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	08da      	lsrs	r2, r3, #3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3208      	adds	r2, #8
 8003a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	220f      	movs	r2, #15
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	43db      	mvns	r3, r3
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	691a      	ldr	r2, [r3, #16]
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	f003 0307 	and.w	r3, r3, #7
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	08da      	lsrs	r2, r3, #3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	3208      	adds	r2, #8
 8003ad2:	69b9      	ldr	r1, [r7, #24]
 8003ad4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	2203      	movs	r2, #3
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	4013      	ands	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f003 0203 	and.w	r2, r3, #3
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 80b4 	beq.w	8003c82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	4b60      	ldr	r3, [pc, #384]	@ (8003ca0 <HAL_GPIO_Init+0x30c>)
 8003b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b22:	4a5f      	ldr	r2, [pc, #380]	@ (8003ca0 <HAL_GPIO_Init+0x30c>)
 8003b24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b28:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b2a:	4b5d      	ldr	r3, [pc, #372]	@ (8003ca0 <HAL_GPIO_Init+0x30c>)
 8003b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b32:	60fb      	str	r3, [r7, #12]
 8003b34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b36:	4a5b      	ldr	r2, [pc, #364]	@ (8003ca4 <HAL_GPIO_Init+0x310>)
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	089b      	lsrs	r3, r3, #2
 8003b3c:	3302      	adds	r3, #2
 8003b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	f003 0303 	and.w	r3, r3, #3
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	220f      	movs	r2, #15
 8003b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b52:	43db      	mvns	r3, r3
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	4013      	ands	r3, r2
 8003b58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a52      	ldr	r2, [pc, #328]	@ (8003ca8 <HAL_GPIO_Init+0x314>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d02b      	beq.n	8003bba <HAL_GPIO_Init+0x226>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a51      	ldr	r2, [pc, #324]	@ (8003cac <HAL_GPIO_Init+0x318>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d025      	beq.n	8003bb6 <HAL_GPIO_Init+0x222>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a50      	ldr	r2, [pc, #320]	@ (8003cb0 <HAL_GPIO_Init+0x31c>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d01f      	beq.n	8003bb2 <HAL_GPIO_Init+0x21e>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a4f      	ldr	r2, [pc, #316]	@ (8003cb4 <HAL_GPIO_Init+0x320>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d019      	beq.n	8003bae <HAL_GPIO_Init+0x21a>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a4e      	ldr	r2, [pc, #312]	@ (8003cb8 <HAL_GPIO_Init+0x324>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d013      	beq.n	8003baa <HAL_GPIO_Init+0x216>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a4d      	ldr	r2, [pc, #308]	@ (8003cbc <HAL_GPIO_Init+0x328>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d00d      	beq.n	8003ba6 <HAL_GPIO_Init+0x212>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a4c      	ldr	r2, [pc, #304]	@ (8003cc0 <HAL_GPIO_Init+0x32c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d007      	beq.n	8003ba2 <HAL_GPIO_Init+0x20e>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a4b      	ldr	r2, [pc, #300]	@ (8003cc4 <HAL_GPIO_Init+0x330>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d101      	bne.n	8003b9e <HAL_GPIO_Init+0x20a>
 8003b9a:	2307      	movs	r3, #7
 8003b9c:	e00e      	b.n	8003bbc <HAL_GPIO_Init+0x228>
 8003b9e:	2308      	movs	r3, #8
 8003ba0:	e00c      	b.n	8003bbc <HAL_GPIO_Init+0x228>
 8003ba2:	2306      	movs	r3, #6
 8003ba4:	e00a      	b.n	8003bbc <HAL_GPIO_Init+0x228>
 8003ba6:	2305      	movs	r3, #5
 8003ba8:	e008      	b.n	8003bbc <HAL_GPIO_Init+0x228>
 8003baa:	2304      	movs	r3, #4
 8003bac:	e006      	b.n	8003bbc <HAL_GPIO_Init+0x228>
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e004      	b.n	8003bbc <HAL_GPIO_Init+0x228>
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	e002      	b.n	8003bbc <HAL_GPIO_Init+0x228>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e000      	b.n	8003bbc <HAL_GPIO_Init+0x228>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	69fa      	ldr	r2, [r7, #28]
 8003bbe:	f002 0203 	and.w	r2, r2, #3
 8003bc2:	0092      	lsls	r2, r2, #2
 8003bc4:	4093      	lsls	r3, r2
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bcc:	4935      	ldr	r1, [pc, #212]	@ (8003ca4 <HAL_GPIO_Init+0x310>)
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	089b      	lsrs	r3, r3, #2
 8003bd2:	3302      	adds	r3, #2
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bda:	4b3b      	ldr	r3, [pc, #236]	@ (8003cc8 <HAL_GPIO_Init+0x334>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	43db      	mvns	r3, r3
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	4013      	ands	r3, r2
 8003be8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bfe:	4a32      	ldr	r2, [pc, #200]	@ (8003cc8 <HAL_GPIO_Init+0x334>)
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c04:	4b30      	ldr	r3, [pc, #192]	@ (8003cc8 <HAL_GPIO_Init+0x334>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	4013      	ands	r3, r2
 8003c12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d003      	beq.n	8003c28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c28:	4a27      	ldr	r2, [pc, #156]	@ (8003cc8 <HAL_GPIO_Init+0x334>)
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c2e:	4b26      	ldr	r3, [pc, #152]	@ (8003cc8 <HAL_GPIO_Init+0x334>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	43db      	mvns	r3, r3
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c52:	4a1d      	ldr	r2, [pc, #116]	@ (8003cc8 <HAL_GPIO_Init+0x334>)
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c58:	4b1b      	ldr	r3, [pc, #108]	@ (8003cc8 <HAL_GPIO_Init+0x334>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	43db      	mvns	r3, r3
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	4013      	ands	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c7c:	4a12      	ldr	r2, [pc, #72]	@ (8003cc8 <HAL_GPIO_Init+0x334>)
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	3301      	adds	r3, #1
 8003c86:	61fb      	str	r3, [r7, #28]
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	2b0f      	cmp	r3, #15
 8003c8c:	f67f ae90 	bls.w	80039b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c90:	bf00      	nop
 8003c92:	bf00      	nop
 8003c94:	3724      	adds	r7, #36	@ 0x24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	40013800 	.word	0x40013800
 8003ca8:	40020000 	.word	0x40020000
 8003cac:	40020400 	.word	0x40020400
 8003cb0:	40020800 	.word	0x40020800
 8003cb4:	40020c00 	.word	0x40020c00
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	40021400 	.word	0x40021400
 8003cc0:	40021800 	.word	0x40021800
 8003cc4:	40021c00 	.word	0x40021c00
 8003cc8:	40013c00 	.word	0x40013c00

08003ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	807b      	strh	r3, [r7, #2]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cdc:	787b      	ldrb	r3, [r7, #1]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ce2:	887a      	ldrh	r2, [r7, #2]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ce8:	e003      	b.n	8003cf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003cea:	887b      	ldrh	r3, [r7, #2]
 8003cec:	041a      	lsls	r2, r3, #16
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	619a      	str	r2, [r3, #24]
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
	...

08003d00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	4603      	mov	r3, r0
 8003d08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d0a:	4b08      	ldr	r3, [pc, #32]	@ (8003d2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d0c:	695a      	ldr	r2, [r3, #20]
 8003d0e:	88fb      	ldrh	r3, [r7, #6]
 8003d10:	4013      	ands	r3, r2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d006      	beq.n	8003d24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d16:	4a05      	ldr	r2, [pc, #20]	@ (8003d2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d18:	88fb      	ldrh	r3, [r7, #6]
 8003d1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d1c:	88fb      	ldrh	r3, [r7, #6]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7fe f9a2 	bl	8002068 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d24:	bf00      	nop
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40013c00 	.word	0x40013c00

08003d30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e12b      	b.n	8003f9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d106      	bne.n	8003d5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7fe fdd2 	bl	8002900 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2224      	movs	r2, #36	@ 0x24
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0201 	bic.w	r2, r2, #1
 8003d72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d94:	f001 fde0 	bl	8005958 <HAL_RCC_GetPCLK1Freq>
 8003d98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	4a81      	ldr	r2, [pc, #516]	@ (8003fa4 <HAL_I2C_Init+0x274>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d807      	bhi.n	8003db4 <HAL_I2C_Init+0x84>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4a80      	ldr	r2, [pc, #512]	@ (8003fa8 <HAL_I2C_Init+0x278>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	bf94      	ite	ls
 8003dac:	2301      	movls	r3, #1
 8003dae:	2300      	movhi	r3, #0
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	e006      	b.n	8003dc2 <HAL_I2C_Init+0x92>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4a7d      	ldr	r2, [pc, #500]	@ (8003fac <HAL_I2C_Init+0x27c>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	bf94      	ite	ls
 8003dbc:	2301      	movls	r3, #1
 8003dbe:	2300      	movhi	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e0e7      	b.n	8003f9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	4a78      	ldr	r2, [pc, #480]	@ (8003fb0 <HAL_I2C_Init+0x280>)
 8003dce:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd2:	0c9b      	lsrs	r3, r3, #18
 8003dd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	430a      	orrs	r2, r1
 8003de8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	4a6a      	ldr	r2, [pc, #424]	@ (8003fa4 <HAL_I2C_Init+0x274>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d802      	bhi.n	8003e04 <HAL_I2C_Init+0xd4>
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	3301      	adds	r3, #1
 8003e02:	e009      	b.n	8003e18 <HAL_I2C_Init+0xe8>
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003e0a:	fb02 f303 	mul.w	r3, r2, r3
 8003e0e:	4a69      	ldr	r2, [pc, #420]	@ (8003fb4 <HAL_I2C_Init+0x284>)
 8003e10:	fba2 2303 	umull	r2, r3, r2, r3
 8003e14:	099b      	lsrs	r3, r3, #6
 8003e16:	3301      	adds	r3, #1
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6812      	ldr	r2, [r2, #0]
 8003e1c:	430b      	orrs	r3, r1
 8003e1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003e2a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	495c      	ldr	r1, [pc, #368]	@ (8003fa4 <HAL_I2C_Init+0x274>)
 8003e34:	428b      	cmp	r3, r1
 8003e36:	d819      	bhi.n	8003e6c <HAL_I2C_Init+0x13c>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	1e59      	subs	r1, r3, #1
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e46:	1c59      	adds	r1, r3, #1
 8003e48:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003e4c:	400b      	ands	r3, r1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00a      	beq.n	8003e68 <HAL_I2C_Init+0x138>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	1e59      	subs	r1, r3, #1
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e60:	3301      	adds	r3, #1
 8003e62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e66:	e051      	b.n	8003f0c <HAL_I2C_Init+0x1dc>
 8003e68:	2304      	movs	r3, #4
 8003e6a:	e04f      	b.n	8003f0c <HAL_I2C_Init+0x1dc>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d111      	bne.n	8003e98 <HAL_I2C_Init+0x168>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	1e58      	subs	r0, r3, #1
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6859      	ldr	r1, [r3, #4]
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	440b      	add	r3, r1
 8003e82:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e86:	3301      	adds	r3, #1
 8003e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	bf0c      	ite	eq
 8003e90:	2301      	moveq	r3, #1
 8003e92:	2300      	movne	r3, #0
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	e012      	b.n	8003ebe <HAL_I2C_Init+0x18e>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	1e58      	subs	r0, r3, #1
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6859      	ldr	r1, [r3, #4]
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	440b      	add	r3, r1
 8003ea6:	0099      	lsls	r1, r3, #2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eae:	3301      	adds	r3, #1
 8003eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	bf0c      	ite	eq
 8003eb8:	2301      	moveq	r3, #1
 8003eba:	2300      	movne	r3, #0
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <HAL_I2C_Init+0x196>
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e022      	b.n	8003f0c <HAL_I2C_Init+0x1dc>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10e      	bne.n	8003eec <HAL_I2C_Init+0x1bc>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	1e58      	subs	r0, r3, #1
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6859      	ldr	r1, [r3, #4]
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	440b      	add	r3, r1
 8003edc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ee6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003eea:	e00f      	b.n	8003f0c <HAL_I2C_Init+0x1dc>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	1e58      	subs	r0, r3, #1
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6859      	ldr	r1, [r3, #4]
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	440b      	add	r3, r1
 8003efa:	0099      	lsls	r1, r3, #2
 8003efc:	440b      	add	r3, r1
 8003efe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f02:	3301      	adds	r3, #1
 8003f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f08:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f0c:	6879      	ldr	r1, [r7, #4]
 8003f0e:	6809      	ldr	r1, [r1, #0]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	69da      	ldr	r2, [r3, #28]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003f3a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	6911      	ldr	r1, [r2, #16]
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	68d2      	ldr	r2, [r2, #12]
 8003f46:	4311      	orrs	r1, r2
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	6812      	ldr	r2, [r2, #0]
 8003f4c:	430b      	orrs	r3, r1
 8003f4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	695a      	ldr	r2, [r3, #20]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	431a      	orrs	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f042 0201 	orr.w	r2, r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2220      	movs	r2, #32
 8003f86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	000186a0 	.word	0x000186a0
 8003fa8:	001e847f 	.word	0x001e847f
 8003fac:	003d08ff 	.word	0x003d08ff
 8003fb0:	431bde83 	.word	0x431bde83
 8003fb4:	10624dd3 	.word	0x10624dd3

08003fb8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b088      	sub	sp, #32
 8003fbc:	af02      	add	r7, sp, #8
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	607a      	str	r2, [r7, #4]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	817b      	strh	r3, [r7, #10]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fcc:	f7fe ff0e 	bl	8002dec <HAL_GetTick>
 8003fd0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b20      	cmp	r3, #32
 8003fdc:	f040 80e0 	bne.w	80041a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	9300      	str	r3, [sp, #0]
 8003fe4:	2319      	movs	r3, #25
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	4970      	ldr	r1, [pc, #448]	@ (80041ac <HAL_I2C_Master_Transmit+0x1f4>)
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f000 fe0e 	bl	8004c0c <I2C_WaitOnFlagUntilTimeout>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	e0d3      	b.n	80041a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004000:	2b01      	cmp	r3, #1
 8004002:	d101      	bne.n	8004008 <HAL_I2C_Master_Transmit+0x50>
 8004004:	2302      	movs	r3, #2
 8004006:	e0cc      	b.n	80041a2 <HAL_I2C_Master_Transmit+0x1ea>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b01      	cmp	r3, #1
 800401c:	d007      	beq.n	800402e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f042 0201 	orr.w	r2, r2, #1
 800402c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800403c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2221      	movs	r2, #33	@ 0x21
 8004042:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2210      	movs	r2, #16
 800404a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	893a      	ldrh	r2, [r7, #8]
 800405e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004064:	b29a      	uxth	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	4a50      	ldr	r2, [pc, #320]	@ (80041b0 <HAL_I2C_Master_Transmit+0x1f8>)
 800406e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004070:	8979      	ldrh	r1, [r7, #10]
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	6a3a      	ldr	r2, [r7, #32]
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f000 fbc8 	bl	800480c <I2C_MasterRequestWrite>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e08d      	b.n	80041a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004086:	2300      	movs	r3, #0
 8004088:	613b      	str	r3, [r7, #16]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	613b      	str	r3, [r7, #16]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	613b      	str	r3, [r7, #16]
 800409a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800409c:	e066      	b.n	800416c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	6a39      	ldr	r1, [r7, #32]
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f000 fecc 	bl	8004e40 <I2C_WaitOnTXEFlagUntilTimeout>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00d      	beq.n	80040ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d107      	bne.n	80040c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e06b      	b.n	80041a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ce:	781a      	ldrb	r2, [r3, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	3b01      	subs	r3, #1
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	2b04      	cmp	r3, #4
 8004106:	d11b      	bne.n	8004140 <HAL_I2C_Master_Transmit+0x188>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800410c:	2b00      	cmp	r3, #0
 800410e:	d017      	beq.n	8004140 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004114:	781a      	ldrb	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004120:	1c5a      	adds	r2, r3, #1
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800412a:	b29b      	uxth	r3, r3
 800412c:	3b01      	subs	r3, #1
 800412e:	b29a      	uxth	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004138:	3b01      	subs	r3, #1
 800413a:	b29a      	uxth	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	6a39      	ldr	r1, [r7, #32]
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 fec3 	bl	8004ed0 <I2C_WaitOnBTFFlagUntilTimeout>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00d      	beq.n	800416c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004154:	2b04      	cmp	r3, #4
 8004156:	d107      	bne.n	8004168 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004166:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e01a      	b.n	80041a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004170:	2b00      	cmp	r3, #0
 8004172:	d194      	bne.n	800409e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004182:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2220      	movs	r2, #32
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800419c:	2300      	movs	r3, #0
 800419e:	e000      	b.n	80041a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80041a0:	2302      	movs	r3, #2
  }
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3718      	adds	r7, #24
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	00100002 	.word	0x00100002
 80041b0:	ffff0000 	.word	0xffff0000

080041b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b088      	sub	sp, #32
 80041b8:	af02      	add	r7, sp, #8
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	4608      	mov	r0, r1
 80041be:	4611      	mov	r1, r2
 80041c0:	461a      	mov	r2, r3
 80041c2:	4603      	mov	r3, r0
 80041c4:	817b      	strh	r3, [r7, #10]
 80041c6:	460b      	mov	r3, r1
 80041c8:	813b      	strh	r3, [r7, #8]
 80041ca:	4613      	mov	r3, r2
 80041cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041ce:	f7fe fe0d 	bl	8002dec <HAL_GetTick>
 80041d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b20      	cmp	r3, #32
 80041de:	f040 80d9 	bne.w	8004394 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	2319      	movs	r3, #25
 80041e8:	2201      	movs	r2, #1
 80041ea:	496d      	ldr	r1, [pc, #436]	@ (80043a0 <HAL_I2C_Mem_Write+0x1ec>)
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 fd0d 	bl	8004c0c <I2C_WaitOnFlagUntilTimeout>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80041f8:	2302      	movs	r3, #2
 80041fa:	e0cc      	b.n	8004396 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004202:	2b01      	cmp	r3, #1
 8004204:	d101      	bne.n	800420a <HAL_I2C_Mem_Write+0x56>
 8004206:	2302      	movs	r3, #2
 8004208:	e0c5      	b.n	8004396 <HAL_I2C_Mem_Write+0x1e2>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b01      	cmp	r3, #1
 800421e:	d007      	beq.n	8004230 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f042 0201 	orr.w	r2, r2, #1
 800422e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800423e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2221      	movs	r2, #33	@ 0x21
 8004244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2240      	movs	r2, #64	@ 0x40
 800424c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6a3a      	ldr	r2, [r7, #32]
 800425a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004260:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004266:	b29a      	uxth	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4a4d      	ldr	r2, [pc, #308]	@ (80043a4 <HAL_I2C_Mem_Write+0x1f0>)
 8004270:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004272:	88f8      	ldrh	r0, [r7, #6]
 8004274:	893a      	ldrh	r2, [r7, #8]
 8004276:	8979      	ldrh	r1, [r7, #10]
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	9301      	str	r3, [sp, #4]
 800427c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800427e:	9300      	str	r3, [sp, #0]
 8004280:	4603      	mov	r3, r0
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 fb44 	bl	8004910 <I2C_RequestMemoryWrite>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d052      	beq.n	8004334 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e081      	b.n	8004396 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f000 fdd2 	bl	8004e40 <I2C_WaitOnTXEFlagUntilTimeout>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00d      	beq.n	80042be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a6:	2b04      	cmp	r3, #4
 80042a8:	d107      	bne.n	80042ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e06b      	b.n	8004396 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c2:	781a      	ldrb	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042d8:	3b01      	subs	r3, #1
 80042da:	b29a      	uxth	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	f003 0304 	and.w	r3, r3, #4
 80042f8:	2b04      	cmp	r3, #4
 80042fa:	d11b      	bne.n	8004334 <HAL_I2C_Mem_Write+0x180>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004300:	2b00      	cmp	r3, #0
 8004302:	d017      	beq.n	8004334 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004308:	781a      	ldrb	r2, [r3, #0]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004314:	1c5a      	adds	r2, r3, #1
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800431e:	3b01      	subs	r3, #1
 8004320:	b29a      	uxth	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800432a:	b29b      	uxth	r3, r3
 800432c:	3b01      	subs	r3, #1
 800432e:	b29a      	uxth	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1aa      	bne.n	8004292 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 fdc5 	bl	8004ed0 <I2C_WaitOnBTFFlagUntilTimeout>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00d      	beq.n	8004368 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004350:	2b04      	cmp	r3, #4
 8004352:	d107      	bne.n	8004364 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004362:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e016      	b.n	8004396 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004376:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2220      	movs	r2, #32
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004390:	2300      	movs	r3, #0
 8004392:	e000      	b.n	8004396 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004394:	2302      	movs	r3, #2
  }
}
 8004396:	4618      	mov	r0, r3
 8004398:	3718      	adds	r7, #24
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	00100002 	.word	0x00100002
 80043a4:	ffff0000 	.word	0xffff0000

080043a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b08c      	sub	sp, #48	@ 0x30
 80043ac:	af02      	add	r7, sp, #8
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	4608      	mov	r0, r1
 80043b2:	4611      	mov	r1, r2
 80043b4:	461a      	mov	r2, r3
 80043b6:	4603      	mov	r3, r0
 80043b8:	817b      	strh	r3, [r7, #10]
 80043ba:	460b      	mov	r3, r1
 80043bc:	813b      	strh	r3, [r7, #8]
 80043be:	4613      	mov	r3, r2
 80043c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043c2:	f7fe fd13 	bl	8002dec <HAL_GetTick>
 80043c6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2b20      	cmp	r3, #32
 80043d2:	f040 8214 	bne.w	80047fe <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	2319      	movs	r3, #25
 80043dc:	2201      	movs	r2, #1
 80043de:	497b      	ldr	r1, [pc, #492]	@ (80045cc <HAL_I2C_Mem_Read+0x224>)
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f000 fc13 	bl	8004c0c <I2C_WaitOnFlagUntilTimeout>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d001      	beq.n	80043f0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80043ec:	2302      	movs	r3, #2
 80043ee:	e207      	b.n	8004800 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d101      	bne.n	80043fe <HAL_I2C_Mem_Read+0x56>
 80043fa:	2302      	movs	r3, #2
 80043fc:	e200      	b.n	8004800 <HAL_I2C_Mem_Read+0x458>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	2b01      	cmp	r3, #1
 8004412:	d007      	beq.n	8004424 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f042 0201 	orr.w	r2, r2, #1
 8004422:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004432:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2222      	movs	r2, #34	@ 0x22
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2240      	movs	r2, #64	@ 0x40
 8004440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800444e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004454:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800445a:	b29a      	uxth	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4a5b      	ldr	r2, [pc, #364]	@ (80045d0 <HAL_I2C_Mem_Read+0x228>)
 8004464:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004466:	88f8      	ldrh	r0, [r7, #6]
 8004468:	893a      	ldrh	r2, [r7, #8]
 800446a:	8979      	ldrh	r1, [r7, #10]
 800446c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446e:	9301      	str	r3, [sp, #4]
 8004470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	4603      	mov	r3, r0
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f000 fae0 	bl	8004a3c <I2C_RequestMemoryRead>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e1bc      	b.n	8004800 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800448a:	2b00      	cmp	r3, #0
 800448c:	d113      	bne.n	80044b6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800448e:	2300      	movs	r3, #0
 8004490:	623b      	str	r3, [r7, #32]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	623b      	str	r3, [r7, #32]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	623b      	str	r3, [r7, #32]
 80044a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	e190      	b.n	80047d8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d11b      	bne.n	80044f6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ce:	2300      	movs	r3, #0
 80044d0:	61fb      	str	r3, [r7, #28]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	61fb      	str	r3, [r7, #28]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	61fb      	str	r3, [r7, #28]
 80044e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	e170      	b.n	80047d8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d11b      	bne.n	8004536 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800450c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800451c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800451e:	2300      	movs	r3, #0
 8004520:	61bb      	str	r3, [r7, #24]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	61bb      	str	r3, [r7, #24]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	61bb      	str	r3, [r7, #24]
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	e150      	b.n	80047d8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004536:	2300      	movs	r3, #0
 8004538:	617b      	str	r3, [r7, #20]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	617b      	str	r3, [r7, #20]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	617b      	str	r3, [r7, #20]
 800454a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800454c:	e144      	b.n	80047d8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004552:	2b03      	cmp	r3, #3
 8004554:	f200 80f1 	bhi.w	800473a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800455c:	2b01      	cmp	r3, #1
 800455e:	d123      	bne.n	80045a8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004560:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004562:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 fcfb 	bl	8004f60 <I2C_WaitOnRXNEFlagUntilTimeout>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e145      	b.n	8004800 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	691a      	ldr	r2, [r3, #16]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457e:	b2d2      	uxtb	r2, r2
 8004580:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004586:	1c5a      	adds	r2, r3, #1
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004590:	3b01      	subs	r3, #1
 8004592:	b29a      	uxth	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800459c:	b29b      	uxth	r3, r3
 800459e:	3b01      	subs	r3, #1
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80045a6:	e117      	b.n	80047d8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d14e      	bne.n	800464e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b2:	9300      	str	r3, [sp, #0]
 80045b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b6:	2200      	movs	r2, #0
 80045b8:	4906      	ldr	r1, [pc, #24]	@ (80045d4 <HAL_I2C_Mem_Read+0x22c>)
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f000 fb26 	bl	8004c0c <I2C_WaitOnFlagUntilTimeout>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d008      	beq.n	80045d8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e11a      	b.n	8004800 <HAL_I2C_Mem_Read+0x458>
 80045ca:	bf00      	nop
 80045cc:	00100002 	.word	0x00100002
 80045d0:	ffff0000 	.word	0xffff0000
 80045d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	691a      	ldr	r2, [r3, #16]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fa:	1c5a      	adds	r2, r3, #1
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004604:	3b01      	subs	r3, #1
 8004606:	b29a      	uxth	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004610:	b29b      	uxth	r3, r3
 8004612:	3b01      	subs	r3, #1
 8004614:	b29a      	uxth	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	691a      	ldr	r2, [r3, #16]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004624:	b2d2      	uxtb	r2, r2
 8004626:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462c:	1c5a      	adds	r2, r3, #1
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004636:	3b01      	subs	r3, #1
 8004638:	b29a      	uxth	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004642:	b29b      	uxth	r3, r3
 8004644:	3b01      	subs	r3, #1
 8004646:	b29a      	uxth	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800464c:	e0c4      	b.n	80047d8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800464e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004650:	9300      	str	r3, [sp, #0]
 8004652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004654:	2200      	movs	r2, #0
 8004656:	496c      	ldr	r1, [pc, #432]	@ (8004808 <HAL_I2C_Mem_Read+0x460>)
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f000 fad7 	bl	8004c0c <I2C_WaitOnFlagUntilTimeout>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d001      	beq.n	8004668 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e0cb      	b.n	8004800 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004676:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	691a      	ldr	r2, [r3, #16]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004694:	3b01      	subs	r3, #1
 8004696:	b29a      	uxth	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046b0:	2200      	movs	r2, #0
 80046b2:	4955      	ldr	r1, [pc, #340]	@ (8004808 <HAL_I2C_Mem_Read+0x460>)
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 faa9 	bl	8004c0c <I2C_WaitOnFlagUntilTimeout>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e09d      	b.n	8004800 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	691a      	ldr	r2, [r3, #16]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046de:	b2d2      	uxtb	r2, r2
 80046e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e6:	1c5a      	adds	r2, r3, #1
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046f0:	3b01      	subs	r3, #1
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	3b01      	subs	r3, #1
 8004700:	b29a      	uxth	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	691a      	ldr	r2, [r3, #16]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004710:	b2d2      	uxtb	r2, r2
 8004712:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004718:	1c5a      	adds	r2, r3, #1
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004722:	3b01      	subs	r3, #1
 8004724:	b29a      	uxth	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800472e:	b29b      	uxth	r3, r3
 8004730:	3b01      	subs	r3, #1
 8004732:	b29a      	uxth	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004738:	e04e      	b.n	80047d8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800473a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800473c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800473e:	68f8      	ldr	r0, [r7, #12]
 8004740:	f000 fc0e 	bl	8004f60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e058      	b.n	8004800 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	691a      	ldr	r2, [r3, #16]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004758:	b2d2      	uxtb	r2, r2
 800475a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004760:	1c5a      	adds	r2, r3, #1
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800476a:	3b01      	subs	r3, #1
 800476c:	b29a      	uxth	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004776:	b29b      	uxth	r3, r3
 8004778:	3b01      	subs	r3, #1
 800477a:	b29a      	uxth	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	f003 0304 	and.w	r3, r3, #4
 800478a:	2b04      	cmp	r3, #4
 800478c:	d124      	bne.n	80047d8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004792:	2b03      	cmp	r3, #3
 8004794:	d107      	bne.n	80047a6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047a4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	691a      	ldr	r2, [r3, #16]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b0:	b2d2      	uxtb	r2, r2
 80047b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b8:	1c5a      	adds	r2, r3, #1
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047c2:	3b01      	subs	r3, #1
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	3b01      	subs	r3, #1
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f47f aeb6 	bne.w	800454e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2220      	movs	r2, #32
 80047e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80047fa:	2300      	movs	r3, #0
 80047fc:	e000      	b.n	8004800 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80047fe:	2302      	movs	r3, #2
  }
}
 8004800:	4618      	mov	r0, r3
 8004802:	3728      	adds	r7, #40	@ 0x28
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	00010004 	.word	0x00010004

0800480c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b088      	sub	sp, #32
 8004810:	af02      	add	r7, sp, #8
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	607a      	str	r2, [r7, #4]
 8004816:	603b      	str	r3, [r7, #0]
 8004818:	460b      	mov	r3, r1
 800481a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004820:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	2b08      	cmp	r3, #8
 8004826:	d006      	beq.n	8004836 <I2C_MasterRequestWrite+0x2a>
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d003      	beq.n	8004836 <I2C_MasterRequestWrite+0x2a>
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004834:	d108      	bne.n	8004848 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004844:	601a      	str	r2, [r3, #0]
 8004846:	e00b      	b.n	8004860 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800484c:	2b12      	cmp	r3, #18
 800484e:	d107      	bne.n	8004860 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800485e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f000 f9cd 	bl	8004c0c <I2C_WaitOnFlagUntilTimeout>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00d      	beq.n	8004894 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004882:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004886:	d103      	bne.n	8004890 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800488e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e035      	b.n	8004900 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800489c:	d108      	bne.n	80048b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800489e:	897b      	ldrh	r3, [r7, #10]
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	461a      	mov	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80048ac:	611a      	str	r2, [r3, #16]
 80048ae:	e01b      	b.n	80048e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80048b0:	897b      	ldrh	r3, [r7, #10]
 80048b2:	11db      	asrs	r3, r3, #7
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	f003 0306 	and.w	r3, r3, #6
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	f063 030f 	orn	r3, r3, #15
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	490e      	ldr	r1, [pc, #56]	@ (8004908 <I2C_MasterRequestWrite+0xfc>)
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f000 fa16 	bl	8004d00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e010      	b.n	8004900 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80048de:	897b      	ldrh	r3, [r7, #10]
 80048e0:	b2da      	uxtb	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	4907      	ldr	r1, [pc, #28]	@ (800490c <I2C_MasterRequestWrite+0x100>)
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f000 fa06 	bl	8004d00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e000      	b.n	8004900 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	00010008 	.word	0x00010008
 800490c:	00010002 	.word	0x00010002

08004910 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b088      	sub	sp, #32
 8004914:	af02      	add	r7, sp, #8
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	4608      	mov	r0, r1
 800491a:	4611      	mov	r1, r2
 800491c:	461a      	mov	r2, r3
 800491e:	4603      	mov	r3, r0
 8004920:	817b      	strh	r3, [r7, #10]
 8004922:	460b      	mov	r3, r1
 8004924:	813b      	strh	r3, [r7, #8]
 8004926:	4613      	mov	r3, r2
 8004928:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004938:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800493a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	6a3b      	ldr	r3, [r7, #32]
 8004940:	2200      	movs	r2, #0
 8004942:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 f960 	bl	8004c0c <I2C_WaitOnFlagUntilTimeout>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00d      	beq.n	800496e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800495c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004960:	d103      	bne.n	800496a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004968:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e05f      	b.n	8004a2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800496e:	897b      	ldrh	r3, [r7, #10]
 8004970:	b2db      	uxtb	r3, r3
 8004972:	461a      	mov	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800497c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800497e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004980:	6a3a      	ldr	r2, [r7, #32]
 8004982:	492d      	ldr	r1, [pc, #180]	@ (8004a38 <I2C_RequestMemoryWrite+0x128>)
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f000 f9bb 	bl	8004d00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e04c      	b.n	8004a2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004994:	2300      	movs	r3, #0
 8004996:	617b      	str	r3, [r7, #20]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	617b      	str	r3, [r7, #20]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	617b      	str	r3, [r7, #20]
 80049a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049ac:	6a39      	ldr	r1, [r7, #32]
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f000 fa46 	bl	8004e40 <I2C_WaitOnTXEFlagUntilTimeout>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00d      	beq.n	80049d6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049be:	2b04      	cmp	r3, #4
 80049c0:	d107      	bne.n	80049d2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e02b      	b.n	8004a2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049d6:	88fb      	ldrh	r3, [r7, #6]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d105      	bne.n	80049e8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049dc:	893b      	ldrh	r3, [r7, #8]
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	611a      	str	r2, [r3, #16]
 80049e6:	e021      	b.n	8004a2c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80049e8:	893b      	ldrh	r3, [r7, #8]
 80049ea:	0a1b      	lsrs	r3, r3, #8
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	b2da      	uxtb	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049f8:	6a39      	ldr	r1, [r7, #32]
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f000 fa20 	bl	8004e40 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00d      	beq.n	8004a22 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a0a:	2b04      	cmp	r3, #4
 8004a0c:	d107      	bne.n	8004a1e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a1c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e005      	b.n	8004a2e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a22:	893b      	ldrh	r3, [r7, #8]
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3718      	adds	r7, #24
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	00010002 	.word	0x00010002

08004a3c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b088      	sub	sp, #32
 8004a40:	af02      	add	r7, sp, #8
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	4608      	mov	r0, r1
 8004a46:	4611      	mov	r1, r2
 8004a48:	461a      	mov	r2, r3
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	817b      	strh	r3, [r7, #10]
 8004a4e:	460b      	mov	r3, r1
 8004a50:	813b      	strh	r3, [r7, #8]
 8004a52:	4613      	mov	r3, r2
 8004a54:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a64:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	6a3b      	ldr	r3, [r7, #32]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 f8c2 	bl	8004c0c <I2C_WaitOnFlagUntilTimeout>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00d      	beq.n	8004aaa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a9c:	d103      	bne.n	8004aa6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004aa4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e0aa      	b.n	8004c00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004aaa:	897b      	ldrh	r3, [r7, #10]
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	461a      	mov	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004ab8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abc:	6a3a      	ldr	r2, [r7, #32]
 8004abe:	4952      	ldr	r1, [pc, #328]	@ (8004c08 <I2C_RequestMemoryRead+0x1cc>)
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 f91d 	bl	8004d00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d001      	beq.n	8004ad0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e097      	b.n	8004c00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	617b      	str	r3, [r7, #20]
 8004ae4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ae6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ae8:	6a39      	ldr	r1, [r7, #32]
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f000 f9a8 	bl	8004e40 <I2C_WaitOnTXEFlagUntilTimeout>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00d      	beq.n	8004b12 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afa:	2b04      	cmp	r3, #4
 8004afc:	d107      	bne.n	8004b0e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b0c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e076      	b.n	8004c00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b12:	88fb      	ldrh	r3, [r7, #6]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d105      	bne.n	8004b24 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b18:	893b      	ldrh	r3, [r7, #8]
 8004b1a:	b2da      	uxtb	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	611a      	str	r2, [r3, #16]
 8004b22:	e021      	b.n	8004b68 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b24:	893b      	ldrh	r3, [r7, #8]
 8004b26:	0a1b      	lsrs	r3, r3, #8
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	b2da      	uxtb	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b34:	6a39      	ldr	r1, [r7, #32]
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f000 f982 	bl	8004e40 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00d      	beq.n	8004b5e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d107      	bne.n	8004b5a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b58:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e050      	b.n	8004c00 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b5e:	893b      	ldrh	r3, [r7, #8]
 8004b60:	b2da      	uxtb	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b6a:	6a39      	ldr	r1, [r7, #32]
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f000 f967 	bl	8004e40 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00d      	beq.n	8004b94 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b7c:	2b04      	cmp	r3, #4
 8004b7e:	d107      	bne.n	8004b90 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b8e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e035      	b.n	8004c00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ba2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba6:	9300      	str	r3, [sp, #0]
 8004ba8:	6a3b      	ldr	r3, [r7, #32]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 f82b 	bl	8004c0c <I2C_WaitOnFlagUntilTimeout>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00d      	beq.n	8004bd8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bca:	d103      	bne.n	8004bd4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bd2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e013      	b.n	8004c00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004bd8:	897b      	ldrh	r3, [r7, #10]
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	f043 0301 	orr.w	r3, r3, #1
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bea:	6a3a      	ldr	r2, [r7, #32]
 8004bec:	4906      	ldr	r1, [pc, #24]	@ (8004c08 <I2C_RequestMemoryRead+0x1cc>)
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f000 f886 	bl	8004d00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e000      	b.n	8004c00 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3718      	adds	r7, #24
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	00010002 	.word	0x00010002

08004c0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	603b      	str	r3, [r7, #0]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c1c:	e048      	b.n	8004cb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c24:	d044      	beq.n	8004cb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c26:	f7fe f8e1 	bl	8002dec <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d302      	bcc.n	8004c3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d139      	bne.n	8004cb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	0c1b      	lsrs	r3, r3, #16
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d10d      	bne.n	8004c62 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	43da      	mvns	r2, r3
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	4013      	ands	r3, r2
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	bf0c      	ite	eq
 8004c58:	2301      	moveq	r3, #1
 8004c5a:	2300      	movne	r3, #0
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	461a      	mov	r2, r3
 8004c60:	e00c      	b.n	8004c7c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	43da      	mvns	r2, r3
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	bf0c      	ite	eq
 8004c74:	2301      	moveq	r3, #1
 8004c76:	2300      	movne	r3, #0
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	79fb      	ldrb	r3, [r7, #7]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d116      	bne.n	8004cb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9c:	f043 0220 	orr.w	r2, r3, #32
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e023      	b.n	8004cf8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	0c1b      	lsrs	r3, r3, #16
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d10d      	bne.n	8004cd6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	43da      	mvns	r2, r3
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	bf0c      	ite	eq
 8004ccc:	2301      	moveq	r3, #1
 8004cce:	2300      	movne	r3, #0
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	e00c      	b.n	8004cf0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	43da      	mvns	r2, r3
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	bf0c      	ite	eq
 8004ce8:	2301      	moveq	r3, #1
 8004cea:	2300      	movne	r3, #0
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	461a      	mov	r2, r3
 8004cf0:	79fb      	ldrb	r3, [r7, #7]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d093      	beq.n	8004c1e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
 8004d0c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d0e:	e071      	b.n	8004df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d1e:	d123      	bne.n	8004d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d2e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2220      	movs	r2, #32
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d54:	f043 0204 	orr.w	r2, r3, #4
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e067      	b.n	8004e38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6e:	d041      	beq.n	8004df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d70:	f7fe f83c 	bl	8002dec <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d302      	bcc.n	8004d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d136      	bne.n	8004df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	0c1b      	lsrs	r3, r3, #16
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d10c      	bne.n	8004daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	43da      	mvns	r2, r3
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	bf14      	ite	ne
 8004da2:	2301      	movne	r3, #1
 8004da4:	2300      	moveq	r3, #0
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	e00b      	b.n	8004dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	43da      	mvns	r2, r3
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	4013      	ands	r3, r2
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	bf14      	ite	ne
 8004dbc:	2301      	movne	r3, #1
 8004dbe:	2300      	moveq	r3, #0
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d016      	beq.n	8004df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2220      	movs	r2, #32
 8004dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de0:	f043 0220 	orr.w	r2, r3, #32
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e021      	b.n	8004e38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	0c1b      	lsrs	r3, r3, #16
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d10c      	bne.n	8004e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	695b      	ldr	r3, [r3, #20]
 8004e04:	43da      	mvns	r2, r3
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	4013      	ands	r3, r2
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	bf14      	ite	ne
 8004e10:	2301      	movne	r3, #1
 8004e12:	2300      	moveq	r3, #0
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	e00b      	b.n	8004e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	43da      	mvns	r2, r3
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	4013      	ands	r3, r2
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	bf14      	ite	ne
 8004e2a:	2301      	movne	r3, #1
 8004e2c:	2300      	moveq	r3, #0
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f47f af6d 	bne.w	8004d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e4c:	e034      	b.n	8004eb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	f000 f8e3 	bl	800501a <I2C_IsAcknowledgeFailed>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d001      	beq.n	8004e5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e034      	b.n	8004ec8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e64:	d028      	beq.n	8004eb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e66:	f7fd ffc1 	bl	8002dec <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d302      	bcc.n	8004e7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d11d      	bne.n	8004eb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e86:	2b80      	cmp	r3, #128	@ 0x80
 8004e88:	d016      	beq.n	8004eb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea4:	f043 0220 	orr.w	r2, r3, #32
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e007      	b.n	8004ec8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ec2:	2b80      	cmp	r3, #128	@ 0x80
 8004ec4:	d1c3      	bne.n	8004e4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004edc:	e034      	b.n	8004f48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f000 f89b 	bl	800501a <I2C_IsAcknowledgeFailed>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d001      	beq.n	8004eee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e034      	b.n	8004f58 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef4:	d028      	beq.n	8004f48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ef6:	f7fd ff79 	bl	8002dec <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d302      	bcc.n	8004f0c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d11d      	bne.n	8004f48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	f003 0304 	and.w	r3, r3, #4
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	d016      	beq.n	8004f48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2220      	movs	r2, #32
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f34:	f043 0220 	orr.w	r2, r3, #32
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e007      	b.n	8004f58 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	f003 0304 	and.w	r3, r3, #4
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	d1c3      	bne.n	8004ede <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f6c:	e049      	b.n	8005002 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	f003 0310 	and.w	r3, r3, #16
 8004f78:	2b10      	cmp	r3, #16
 8004f7a:	d119      	bne.n	8004fb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f06f 0210 	mvn.w	r2, #16
 8004f84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e030      	b.n	8005012 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fb0:	f7fd ff1c 	bl	8002dec <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d302      	bcc.n	8004fc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d11d      	bne.n	8005002 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fd0:	2b40      	cmp	r3, #64	@ 0x40
 8004fd2:	d016      	beq.n	8005002 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2220      	movs	r2, #32
 8004fde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fee:	f043 0220 	orr.w	r2, r3, #32
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e007      	b.n	8005012 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800500c:	2b40      	cmp	r3, #64	@ 0x40
 800500e:	d1ae      	bne.n	8004f6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800501a:	b480      	push	{r7}
 800501c:	b083      	sub	sp, #12
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800502c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005030:	d11b      	bne.n	800506a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800503a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2220      	movs	r2, #32
 8005046:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005056:	f043 0204 	orr.w	r2, r3, #4
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e000      	b.n	800506c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e267      	b.n	800555a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d075      	beq.n	8005182 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005096:	4b88      	ldr	r3, [pc, #544]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f003 030c 	and.w	r3, r3, #12
 800509e:	2b04      	cmp	r3, #4
 80050a0:	d00c      	beq.n	80050bc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050a2:	4b85      	ldr	r3, [pc, #532]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80050aa:	2b08      	cmp	r3, #8
 80050ac:	d112      	bne.n	80050d4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050ae:	4b82      	ldr	r3, [pc, #520]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050ba:	d10b      	bne.n	80050d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050bc:	4b7e      	ldr	r3, [pc, #504]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d05b      	beq.n	8005180 <HAL_RCC_OscConfig+0x108>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d157      	bne.n	8005180 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e242      	b.n	800555a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050dc:	d106      	bne.n	80050ec <HAL_RCC_OscConfig+0x74>
 80050de:	4b76      	ldr	r3, [pc, #472]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a75      	ldr	r2, [pc, #468]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 80050e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050e8:	6013      	str	r3, [r2, #0]
 80050ea:	e01d      	b.n	8005128 <HAL_RCC_OscConfig+0xb0>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050f4:	d10c      	bne.n	8005110 <HAL_RCC_OscConfig+0x98>
 80050f6:	4b70      	ldr	r3, [pc, #448]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a6f      	ldr	r2, [pc, #444]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 80050fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005100:	6013      	str	r3, [r2, #0]
 8005102:	4b6d      	ldr	r3, [pc, #436]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a6c      	ldr	r2, [pc, #432]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 8005108:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800510c:	6013      	str	r3, [r2, #0]
 800510e:	e00b      	b.n	8005128 <HAL_RCC_OscConfig+0xb0>
 8005110:	4b69      	ldr	r3, [pc, #420]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a68      	ldr	r2, [pc, #416]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 8005116:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800511a:	6013      	str	r3, [r2, #0]
 800511c:	4b66      	ldr	r3, [pc, #408]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a65      	ldr	r2, [pc, #404]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 8005122:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005126:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d013      	beq.n	8005158 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005130:	f7fd fe5c 	bl	8002dec <HAL_GetTick>
 8005134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005136:	e008      	b.n	800514a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005138:	f7fd fe58 	bl	8002dec <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b64      	cmp	r3, #100	@ 0x64
 8005144:	d901      	bls.n	800514a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e207      	b.n	800555a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800514a:	4b5b      	ldr	r3, [pc, #364]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d0f0      	beq.n	8005138 <HAL_RCC_OscConfig+0xc0>
 8005156:	e014      	b.n	8005182 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005158:	f7fd fe48 	bl	8002dec <HAL_GetTick>
 800515c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800515e:	e008      	b.n	8005172 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005160:	f7fd fe44 	bl	8002dec <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b64      	cmp	r3, #100	@ 0x64
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e1f3      	b.n	800555a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005172:	4b51      	ldr	r3, [pc, #324]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1f0      	bne.n	8005160 <HAL_RCC_OscConfig+0xe8>
 800517e:	e000      	b.n	8005182 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005180:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0302 	and.w	r3, r3, #2
 800518a:	2b00      	cmp	r3, #0
 800518c:	d063      	beq.n	8005256 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800518e:	4b4a      	ldr	r3, [pc, #296]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f003 030c 	and.w	r3, r3, #12
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00b      	beq.n	80051b2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800519a:	4b47      	ldr	r3, [pc, #284]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80051a2:	2b08      	cmp	r3, #8
 80051a4:	d11c      	bne.n	80051e0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051a6:	4b44      	ldr	r3, [pc, #272]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d116      	bne.n	80051e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051b2:	4b41      	ldr	r3, [pc, #260]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d005      	beq.n	80051ca <HAL_RCC_OscConfig+0x152>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d001      	beq.n	80051ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e1c7      	b.n	800555a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ca:	4b3b      	ldr	r3, [pc, #236]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	00db      	lsls	r3, r3, #3
 80051d8:	4937      	ldr	r1, [pc, #220]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051de:	e03a      	b.n	8005256 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d020      	beq.n	800522a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051e8:	4b34      	ldr	r3, [pc, #208]	@ (80052bc <HAL_RCC_OscConfig+0x244>)
 80051ea:	2201      	movs	r2, #1
 80051ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ee:	f7fd fdfd 	bl	8002dec <HAL_GetTick>
 80051f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051f4:	e008      	b.n	8005208 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051f6:	f7fd fdf9 	bl	8002dec <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b02      	cmp	r3, #2
 8005202:	d901      	bls.n	8005208 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e1a8      	b.n	800555a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005208:	4b2b      	ldr	r3, [pc, #172]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0302 	and.w	r3, r3, #2
 8005210:	2b00      	cmp	r3, #0
 8005212:	d0f0      	beq.n	80051f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005214:	4b28      	ldr	r3, [pc, #160]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	00db      	lsls	r3, r3, #3
 8005222:	4925      	ldr	r1, [pc, #148]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 8005224:	4313      	orrs	r3, r2
 8005226:	600b      	str	r3, [r1, #0]
 8005228:	e015      	b.n	8005256 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800522a:	4b24      	ldr	r3, [pc, #144]	@ (80052bc <HAL_RCC_OscConfig+0x244>)
 800522c:	2200      	movs	r2, #0
 800522e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005230:	f7fd fddc 	bl	8002dec <HAL_GetTick>
 8005234:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005236:	e008      	b.n	800524a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005238:	f7fd fdd8 	bl	8002dec <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	2b02      	cmp	r3, #2
 8005244:	d901      	bls.n	800524a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e187      	b.n	800555a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800524a:	4b1b      	ldr	r3, [pc, #108]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1f0      	bne.n	8005238 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0308 	and.w	r3, r3, #8
 800525e:	2b00      	cmp	r3, #0
 8005260:	d036      	beq.n	80052d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d016      	beq.n	8005298 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800526a:	4b15      	ldr	r3, [pc, #84]	@ (80052c0 <HAL_RCC_OscConfig+0x248>)
 800526c:	2201      	movs	r2, #1
 800526e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005270:	f7fd fdbc 	bl	8002dec <HAL_GetTick>
 8005274:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005276:	e008      	b.n	800528a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005278:	f7fd fdb8 	bl	8002dec <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b02      	cmp	r3, #2
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e167      	b.n	800555a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800528a:	4b0b      	ldr	r3, [pc, #44]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 800528c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d0f0      	beq.n	8005278 <HAL_RCC_OscConfig+0x200>
 8005296:	e01b      	b.n	80052d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005298:	4b09      	ldr	r3, [pc, #36]	@ (80052c0 <HAL_RCC_OscConfig+0x248>)
 800529a:	2200      	movs	r2, #0
 800529c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800529e:	f7fd fda5 	bl	8002dec <HAL_GetTick>
 80052a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052a4:	e00e      	b.n	80052c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052a6:	f7fd fda1 	bl	8002dec <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d907      	bls.n	80052c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e150      	b.n	800555a <HAL_RCC_OscConfig+0x4e2>
 80052b8:	40023800 	.word	0x40023800
 80052bc:	42470000 	.word	0x42470000
 80052c0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052c4:	4b88      	ldr	r3, [pc, #544]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 80052c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052c8:	f003 0302 	and.w	r3, r3, #2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1ea      	bne.n	80052a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0304 	and.w	r3, r3, #4
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 8097 	beq.w	800540c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052de:	2300      	movs	r3, #0
 80052e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052e2:	4b81      	ldr	r3, [pc, #516]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 80052e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10f      	bne.n	800530e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052ee:	2300      	movs	r3, #0
 80052f0:	60bb      	str	r3, [r7, #8]
 80052f2:	4b7d      	ldr	r3, [pc, #500]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 80052f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f6:	4a7c      	ldr	r2, [pc, #496]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 80052f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80052fe:	4b7a      	ldr	r3, [pc, #488]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 8005300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005306:	60bb      	str	r3, [r7, #8]
 8005308:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800530a:	2301      	movs	r3, #1
 800530c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800530e:	4b77      	ldr	r3, [pc, #476]	@ (80054ec <HAL_RCC_OscConfig+0x474>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005316:	2b00      	cmp	r3, #0
 8005318:	d118      	bne.n	800534c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800531a:	4b74      	ldr	r3, [pc, #464]	@ (80054ec <HAL_RCC_OscConfig+0x474>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a73      	ldr	r2, [pc, #460]	@ (80054ec <HAL_RCC_OscConfig+0x474>)
 8005320:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005324:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005326:	f7fd fd61 	bl	8002dec <HAL_GetTick>
 800532a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800532c:	e008      	b.n	8005340 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800532e:	f7fd fd5d 	bl	8002dec <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b02      	cmp	r3, #2
 800533a:	d901      	bls.n	8005340 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e10c      	b.n	800555a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005340:	4b6a      	ldr	r3, [pc, #424]	@ (80054ec <HAL_RCC_OscConfig+0x474>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005348:	2b00      	cmp	r3, #0
 800534a:	d0f0      	beq.n	800532e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d106      	bne.n	8005362 <HAL_RCC_OscConfig+0x2ea>
 8005354:	4b64      	ldr	r3, [pc, #400]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 8005356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005358:	4a63      	ldr	r2, [pc, #396]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 800535a:	f043 0301 	orr.w	r3, r3, #1
 800535e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005360:	e01c      	b.n	800539c <HAL_RCC_OscConfig+0x324>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	2b05      	cmp	r3, #5
 8005368:	d10c      	bne.n	8005384 <HAL_RCC_OscConfig+0x30c>
 800536a:	4b5f      	ldr	r3, [pc, #380]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 800536c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800536e:	4a5e      	ldr	r2, [pc, #376]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 8005370:	f043 0304 	orr.w	r3, r3, #4
 8005374:	6713      	str	r3, [r2, #112]	@ 0x70
 8005376:	4b5c      	ldr	r3, [pc, #368]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 8005378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800537a:	4a5b      	ldr	r2, [pc, #364]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 800537c:	f043 0301 	orr.w	r3, r3, #1
 8005380:	6713      	str	r3, [r2, #112]	@ 0x70
 8005382:	e00b      	b.n	800539c <HAL_RCC_OscConfig+0x324>
 8005384:	4b58      	ldr	r3, [pc, #352]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 8005386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005388:	4a57      	ldr	r2, [pc, #348]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 800538a:	f023 0301 	bic.w	r3, r3, #1
 800538e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005390:	4b55      	ldr	r3, [pc, #340]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 8005392:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005394:	4a54      	ldr	r2, [pc, #336]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 8005396:	f023 0304 	bic.w	r3, r3, #4
 800539a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d015      	beq.n	80053d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053a4:	f7fd fd22 	bl	8002dec <HAL_GetTick>
 80053a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053aa:	e00a      	b.n	80053c2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ac:	f7fd fd1e 	bl	8002dec <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e0cb      	b.n	800555a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053c2:	4b49      	ldr	r3, [pc, #292]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 80053c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d0ee      	beq.n	80053ac <HAL_RCC_OscConfig+0x334>
 80053ce:	e014      	b.n	80053fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053d0:	f7fd fd0c 	bl	8002dec <HAL_GetTick>
 80053d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053d6:	e00a      	b.n	80053ee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053d8:	f7fd fd08 	bl	8002dec <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e0b5      	b.n	800555a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053ee:	4b3e      	ldr	r3, [pc, #248]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 80053f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053f2:	f003 0302 	and.w	r3, r3, #2
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1ee      	bne.n	80053d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80053fa:	7dfb      	ldrb	r3, [r7, #23]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d105      	bne.n	800540c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005400:	4b39      	ldr	r3, [pc, #228]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 8005402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005404:	4a38      	ldr	r2, [pc, #224]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 8005406:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800540a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 80a1 	beq.w	8005558 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005416:	4b34      	ldr	r3, [pc, #208]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f003 030c 	and.w	r3, r3, #12
 800541e:	2b08      	cmp	r3, #8
 8005420:	d05c      	beq.n	80054dc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	2b02      	cmp	r3, #2
 8005428:	d141      	bne.n	80054ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800542a:	4b31      	ldr	r3, [pc, #196]	@ (80054f0 <HAL_RCC_OscConfig+0x478>)
 800542c:	2200      	movs	r2, #0
 800542e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005430:	f7fd fcdc 	bl	8002dec <HAL_GetTick>
 8005434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005436:	e008      	b.n	800544a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005438:	f7fd fcd8 	bl	8002dec <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	2b02      	cmp	r3, #2
 8005444:	d901      	bls.n	800544a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e087      	b.n	800555a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800544a:	4b27      	ldr	r3, [pc, #156]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1f0      	bne.n	8005438 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	69da      	ldr	r2, [r3, #28]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	431a      	orrs	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005464:	019b      	lsls	r3, r3, #6
 8005466:	431a      	orrs	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800546c:	085b      	lsrs	r3, r3, #1
 800546e:	3b01      	subs	r3, #1
 8005470:	041b      	lsls	r3, r3, #16
 8005472:	431a      	orrs	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005478:	061b      	lsls	r3, r3, #24
 800547a:	491b      	ldr	r1, [pc, #108]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 800547c:	4313      	orrs	r3, r2
 800547e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005480:	4b1b      	ldr	r3, [pc, #108]	@ (80054f0 <HAL_RCC_OscConfig+0x478>)
 8005482:	2201      	movs	r2, #1
 8005484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005486:	f7fd fcb1 	bl	8002dec <HAL_GetTick>
 800548a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800548c:	e008      	b.n	80054a0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800548e:	f7fd fcad 	bl	8002dec <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	2b02      	cmp	r3, #2
 800549a:	d901      	bls.n	80054a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e05c      	b.n	800555a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054a0:	4b11      	ldr	r3, [pc, #68]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d0f0      	beq.n	800548e <HAL_RCC_OscConfig+0x416>
 80054ac:	e054      	b.n	8005558 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054ae:	4b10      	ldr	r3, [pc, #64]	@ (80054f0 <HAL_RCC_OscConfig+0x478>)
 80054b0:	2200      	movs	r2, #0
 80054b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054b4:	f7fd fc9a 	bl	8002dec <HAL_GetTick>
 80054b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054ba:	e008      	b.n	80054ce <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054bc:	f7fd fc96 	bl	8002dec <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d901      	bls.n	80054ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e045      	b.n	800555a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054ce:	4b06      	ldr	r3, [pc, #24]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1f0      	bne.n	80054bc <HAL_RCC_OscConfig+0x444>
 80054da:	e03d      	b.n	8005558 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d107      	bne.n	80054f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e038      	b.n	800555a <HAL_RCC_OscConfig+0x4e2>
 80054e8:	40023800 	.word	0x40023800
 80054ec:	40007000 	.word	0x40007000
 80054f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054f4:	4b1b      	ldr	r3, [pc, #108]	@ (8005564 <HAL_RCC_OscConfig+0x4ec>)
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d028      	beq.n	8005554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800550c:	429a      	cmp	r2, r3
 800550e:	d121      	bne.n	8005554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800551a:	429a      	cmp	r2, r3
 800551c:	d11a      	bne.n	8005554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005524:	4013      	ands	r3, r2
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800552a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800552c:	4293      	cmp	r3, r2
 800552e:	d111      	bne.n	8005554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800553a:	085b      	lsrs	r3, r3, #1
 800553c:	3b01      	subs	r3, #1
 800553e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005540:	429a      	cmp	r2, r3
 8005542:	d107      	bne.n	8005554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800554e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005550:	429a      	cmp	r2, r3
 8005552:	d001      	beq.n	8005558 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e000      	b.n	800555a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3718      	adds	r7, #24
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	40023800 	.word	0x40023800

08005568 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d101      	bne.n	800557c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e0cc      	b.n	8005716 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800557c:	4b68      	ldr	r3, [pc, #416]	@ (8005720 <HAL_RCC_ClockConfig+0x1b8>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0307 	and.w	r3, r3, #7
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	429a      	cmp	r2, r3
 8005588:	d90c      	bls.n	80055a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800558a:	4b65      	ldr	r3, [pc, #404]	@ (8005720 <HAL_RCC_ClockConfig+0x1b8>)
 800558c:	683a      	ldr	r2, [r7, #0]
 800558e:	b2d2      	uxtb	r2, r2
 8005590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005592:	4b63      	ldr	r3, [pc, #396]	@ (8005720 <HAL_RCC_ClockConfig+0x1b8>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0307 	and.w	r3, r3, #7
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	429a      	cmp	r2, r3
 800559e:	d001      	beq.n	80055a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e0b8      	b.n	8005716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0302 	and.w	r3, r3, #2
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d020      	beq.n	80055f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0304 	and.w	r3, r3, #4
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d005      	beq.n	80055c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055bc:	4b59      	ldr	r3, [pc, #356]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	4a58      	ldr	r2, [pc, #352]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80055c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80055c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0308 	and.w	r3, r3, #8
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d005      	beq.n	80055e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055d4:	4b53      	ldr	r3, [pc, #332]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	4a52      	ldr	r2, [pc, #328]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80055da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80055de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055e0:	4b50      	ldr	r3, [pc, #320]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	494d      	ldr	r1, [pc, #308]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d044      	beq.n	8005688 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d107      	bne.n	8005616 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005606:	4b47      	ldr	r3, [pc, #284]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d119      	bne.n	8005646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e07f      	b.n	8005716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	2b02      	cmp	r3, #2
 800561c:	d003      	beq.n	8005626 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005622:	2b03      	cmp	r3, #3
 8005624:	d107      	bne.n	8005636 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005626:	4b3f      	ldr	r3, [pc, #252]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d109      	bne.n	8005646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e06f      	b.n	8005716 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005636:	4b3b      	ldr	r3, [pc, #236]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e067      	b.n	8005716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005646:	4b37      	ldr	r3, [pc, #220]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f023 0203 	bic.w	r2, r3, #3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	4934      	ldr	r1, [pc, #208]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 8005654:	4313      	orrs	r3, r2
 8005656:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005658:	f7fd fbc8 	bl	8002dec <HAL_GetTick>
 800565c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800565e:	e00a      	b.n	8005676 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005660:	f7fd fbc4 	bl	8002dec <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800566e:	4293      	cmp	r3, r2
 8005670:	d901      	bls.n	8005676 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e04f      	b.n	8005716 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005676:	4b2b      	ldr	r3, [pc, #172]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f003 020c 	and.w	r2, r3, #12
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	429a      	cmp	r2, r3
 8005686:	d1eb      	bne.n	8005660 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005688:	4b25      	ldr	r3, [pc, #148]	@ (8005720 <HAL_RCC_ClockConfig+0x1b8>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0307 	and.w	r3, r3, #7
 8005690:	683a      	ldr	r2, [r7, #0]
 8005692:	429a      	cmp	r2, r3
 8005694:	d20c      	bcs.n	80056b0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005696:	4b22      	ldr	r3, [pc, #136]	@ (8005720 <HAL_RCC_ClockConfig+0x1b8>)
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	b2d2      	uxtb	r2, r2
 800569c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800569e:	4b20      	ldr	r3, [pc, #128]	@ (8005720 <HAL_RCC_ClockConfig+0x1b8>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0307 	and.w	r3, r3, #7
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d001      	beq.n	80056b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e032      	b.n	8005716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0304 	and.w	r3, r3, #4
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d008      	beq.n	80056ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056bc:	4b19      	ldr	r3, [pc, #100]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	4916      	ldr	r1, [pc, #88]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0308 	and.w	r3, r3, #8
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d009      	beq.n	80056ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056da:	4b12      	ldr	r3, [pc, #72]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	00db      	lsls	r3, r3, #3
 80056e8:	490e      	ldr	r1, [pc, #56]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80056ee:	f000 f821 	bl	8005734 <HAL_RCC_GetSysClockFreq>
 80056f2:	4602      	mov	r2, r0
 80056f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	091b      	lsrs	r3, r3, #4
 80056fa:	f003 030f 	and.w	r3, r3, #15
 80056fe:	490a      	ldr	r1, [pc, #40]	@ (8005728 <HAL_RCC_ClockConfig+0x1c0>)
 8005700:	5ccb      	ldrb	r3, [r1, r3]
 8005702:	fa22 f303 	lsr.w	r3, r2, r3
 8005706:	4a09      	ldr	r2, [pc, #36]	@ (800572c <HAL_RCC_ClockConfig+0x1c4>)
 8005708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800570a:	4b09      	ldr	r3, [pc, #36]	@ (8005730 <HAL_RCC_ClockConfig+0x1c8>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4618      	mov	r0, r3
 8005710:	f7fd fb28 	bl	8002d64 <HAL_InitTick>

  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	40023c00 	.word	0x40023c00
 8005724:	40023800 	.word	0x40023800
 8005728:	080097c8 	.word	0x080097c8
 800572c:	20000014 	.word	0x20000014
 8005730:	20000018 	.word	0x20000018

08005734 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005738:	b094      	sub	sp, #80	@ 0x50
 800573a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800573c:	2300      	movs	r3, #0
 800573e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005740:	2300      	movs	r3, #0
 8005742:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005744:	2300      	movs	r3, #0
 8005746:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005748:	2300      	movs	r3, #0
 800574a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800574c:	4b79      	ldr	r3, [pc, #484]	@ (8005934 <HAL_RCC_GetSysClockFreq+0x200>)
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f003 030c 	and.w	r3, r3, #12
 8005754:	2b08      	cmp	r3, #8
 8005756:	d00d      	beq.n	8005774 <HAL_RCC_GetSysClockFreq+0x40>
 8005758:	2b08      	cmp	r3, #8
 800575a:	f200 80e1 	bhi.w	8005920 <HAL_RCC_GetSysClockFreq+0x1ec>
 800575e:	2b00      	cmp	r3, #0
 8005760:	d002      	beq.n	8005768 <HAL_RCC_GetSysClockFreq+0x34>
 8005762:	2b04      	cmp	r3, #4
 8005764:	d003      	beq.n	800576e <HAL_RCC_GetSysClockFreq+0x3a>
 8005766:	e0db      	b.n	8005920 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005768:	4b73      	ldr	r3, [pc, #460]	@ (8005938 <HAL_RCC_GetSysClockFreq+0x204>)
 800576a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800576c:	e0db      	b.n	8005926 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800576e:	4b73      	ldr	r3, [pc, #460]	@ (800593c <HAL_RCC_GetSysClockFreq+0x208>)
 8005770:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005772:	e0d8      	b.n	8005926 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005774:	4b6f      	ldr	r3, [pc, #444]	@ (8005934 <HAL_RCC_GetSysClockFreq+0x200>)
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800577c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800577e:	4b6d      	ldr	r3, [pc, #436]	@ (8005934 <HAL_RCC_GetSysClockFreq+0x200>)
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d063      	beq.n	8005852 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800578a:	4b6a      	ldr	r3, [pc, #424]	@ (8005934 <HAL_RCC_GetSysClockFreq+0x200>)
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	099b      	lsrs	r3, r3, #6
 8005790:	2200      	movs	r2, #0
 8005792:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005794:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800579c:	633b      	str	r3, [r7, #48]	@ 0x30
 800579e:	2300      	movs	r3, #0
 80057a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80057a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80057a6:	4622      	mov	r2, r4
 80057a8:	462b      	mov	r3, r5
 80057aa:	f04f 0000 	mov.w	r0, #0
 80057ae:	f04f 0100 	mov.w	r1, #0
 80057b2:	0159      	lsls	r1, r3, #5
 80057b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057b8:	0150      	lsls	r0, r2, #5
 80057ba:	4602      	mov	r2, r0
 80057bc:	460b      	mov	r3, r1
 80057be:	4621      	mov	r1, r4
 80057c0:	1a51      	subs	r1, r2, r1
 80057c2:	6139      	str	r1, [r7, #16]
 80057c4:	4629      	mov	r1, r5
 80057c6:	eb63 0301 	sbc.w	r3, r3, r1
 80057ca:	617b      	str	r3, [r7, #20]
 80057cc:	f04f 0200 	mov.w	r2, #0
 80057d0:	f04f 0300 	mov.w	r3, #0
 80057d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057d8:	4659      	mov	r1, fp
 80057da:	018b      	lsls	r3, r1, #6
 80057dc:	4651      	mov	r1, sl
 80057de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80057e2:	4651      	mov	r1, sl
 80057e4:	018a      	lsls	r2, r1, #6
 80057e6:	4651      	mov	r1, sl
 80057e8:	ebb2 0801 	subs.w	r8, r2, r1
 80057ec:	4659      	mov	r1, fp
 80057ee:	eb63 0901 	sbc.w	r9, r3, r1
 80057f2:	f04f 0200 	mov.w	r2, #0
 80057f6:	f04f 0300 	mov.w	r3, #0
 80057fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005802:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005806:	4690      	mov	r8, r2
 8005808:	4699      	mov	r9, r3
 800580a:	4623      	mov	r3, r4
 800580c:	eb18 0303 	adds.w	r3, r8, r3
 8005810:	60bb      	str	r3, [r7, #8]
 8005812:	462b      	mov	r3, r5
 8005814:	eb49 0303 	adc.w	r3, r9, r3
 8005818:	60fb      	str	r3, [r7, #12]
 800581a:	f04f 0200 	mov.w	r2, #0
 800581e:	f04f 0300 	mov.w	r3, #0
 8005822:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005826:	4629      	mov	r1, r5
 8005828:	024b      	lsls	r3, r1, #9
 800582a:	4621      	mov	r1, r4
 800582c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005830:	4621      	mov	r1, r4
 8005832:	024a      	lsls	r2, r1, #9
 8005834:	4610      	mov	r0, r2
 8005836:	4619      	mov	r1, r3
 8005838:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800583a:	2200      	movs	r2, #0
 800583c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800583e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005840:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005844:	f7fb fa70 	bl	8000d28 <__aeabi_uldivmod>
 8005848:	4602      	mov	r2, r0
 800584a:	460b      	mov	r3, r1
 800584c:	4613      	mov	r3, r2
 800584e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005850:	e058      	b.n	8005904 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005852:	4b38      	ldr	r3, [pc, #224]	@ (8005934 <HAL_RCC_GetSysClockFreq+0x200>)
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	099b      	lsrs	r3, r3, #6
 8005858:	2200      	movs	r2, #0
 800585a:	4618      	mov	r0, r3
 800585c:	4611      	mov	r1, r2
 800585e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005862:	623b      	str	r3, [r7, #32]
 8005864:	2300      	movs	r3, #0
 8005866:	627b      	str	r3, [r7, #36]	@ 0x24
 8005868:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800586c:	4642      	mov	r2, r8
 800586e:	464b      	mov	r3, r9
 8005870:	f04f 0000 	mov.w	r0, #0
 8005874:	f04f 0100 	mov.w	r1, #0
 8005878:	0159      	lsls	r1, r3, #5
 800587a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800587e:	0150      	lsls	r0, r2, #5
 8005880:	4602      	mov	r2, r0
 8005882:	460b      	mov	r3, r1
 8005884:	4641      	mov	r1, r8
 8005886:	ebb2 0a01 	subs.w	sl, r2, r1
 800588a:	4649      	mov	r1, r9
 800588c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005890:	f04f 0200 	mov.w	r2, #0
 8005894:	f04f 0300 	mov.w	r3, #0
 8005898:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800589c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80058a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80058a4:	ebb2 040a 	subs.w	r4, r2, sl
 80058a8:	eb63 050b 	sbc.w	r5, r3, fp
 80058ac:	f04f 0200 	mov.w	r2, #0
 80058b0:	f04f 0300 	mov.w	r3, #0
 80058b4:	00eb      	lsls	r3, r5, #3
 80058b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058ba:	00e2      	lsls	r2, r4, #3
 80058bc:	4614      	mov	r4, r2
 80058be:	461d      	mov	r5, r3
 80058c0:	4643      	mov	r3, r8
 80058c2:	18e3      	adds	r3, r4, r3
 80058c4:	603b      	str	r3, [r7, #0]
 80058c6:	464b      	mov	r3, r9
 80058c8:	eb45 0303 	adc.w	r3, r5, r3
 80058cc:	607b      	str	r3, [r7, #4]
 80058ce:	f04f 0200 	mov.w	r2, #0
 80058d2:	f04f 0300 	mov.w	r3, #0
 80058d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80058da:	4629      	mov	r1, r5
 80058dc:	028b      	lsls	r3, r1, #10
 80058de:	4621      	mov	r1, r4
 80058e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80058e4:	4621      	mov	r1, r4
 80058e6:	028a      	lsls	r2, r1, #10
 80058e8:	4610      	mov	r0, r2
 80058ea:	4619      	mov	r1, r3
 80058ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058ee:	2200      	movs	r2, #0
 80058f0:	61bb      	str	r3, [r7, #24]
 80058f2:	61fa      	str	r2, [r7, #28]
 80058f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058f8:	f7fb fa16 	bl	8000d28 <__aeabi_uldivmod>
 80058fc:	4602      	mov	r2, r0
 80058fe:	460b      	mov	r3, r1
 8005900:	4613      	mov	r3, r2
 8005902:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005904:	4b0b      	ldr	r3, [pc, #44]	@ (8005934 <HAL_RCC_GetSysClockFreq+0x200>)
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	0c1b      	lsrs	r3, r3, #16
 800590a:	f003 0303 	and.w	r3, r3, #3
 800590e:	3301      	adds	r3, #1
 8005910:	005b      	lsls	r3, r3, #1
 8005912:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005914:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005916:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005918:	fbb2 f3f3 	udiv	r3, r2, r3
 800591c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800591e:	e002      	b.n	8005926 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005920:	4b05      	ldr	r3, [pc, #20]	@ (8005938 <HAL_RCC_GetSysClockFreq+0x204>)
 8005922:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005924:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005926:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005928:	4618      	mov	r0, r3
 800592a:	3750      	adds	r7, #80	@ 0x50
 800592c:	46bd      	mov	sp, r7
 800592e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005932:	bf00      	nop
 8005934:	40023800 	.word	0x40023800
 8005938:	00f42400 	.word	0x00f42400
 800593c:	007a1200 	.word	0x007a1200

08005940 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005940:	b480      	push	{r7}
 8005942:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005944:	4b03      	ldr	r3, [pc, #12]	@ (8005954 <HAL_RCC_GetHCLKFreq+0x14>)
 8005946:	681b      	ldr	r3, [r3, #0]
}
 8005948:	4618      	mov	r0, r3
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	20000014 	.word	0x20000014

08005958 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800595c:	f7ff fff0 	bl	8005940 <HAL_RCC_GetHCLKFreq>
 8005960:	4602      	mov	r2, r0
 8005962:	4b05      	ldr	r3, [pc, #20]	@ (8005978 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	0a9b      	lsrs	r3, r3, #10
 8005968:	f003 0307 	and.w	r3, r3, #7
 800596c:	4903      	ldr	r1, [pc, #12]	@ (800597c <HAL_RCC_GetPCLK1Freq+0x24>)
 800596e:	5ccb      	ldrb	r3, [r1, r3]
 8005970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005974:	4618      	mov	r0, r3
 8005976:	bd80      	pop	{r7, pc}
 8005978:	40023800 	.word	0x40023800
 800597c:	080097d8 	.word	0x080097d8

08005980 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005984:	f7ff ffdc 	bl	8005940 <HAL_RCC_GetHCLKFreq>
 8005988:	4602      	mov	r2, r0
 800598a:	4b05      	ldr	r3, [pc, #20]	@ (80059a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	0b5b      	lsrs	r3, r3, #13
 8005990:	f003 0307 	and.w	r3, r3, #7
 8005994:	4903      	ldr	r1, [pc, #12]	@ (80059a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005996:	5ccb      	ldrb	r3, [r1, r3]
 8005998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800599c:	4618      	mov	r0, r3
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	40023800 	.word	0x40023800
 80059a4:	080097d8 	.word	0x080097d8

080059a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d101      	bne.n	80059ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e042      	b.n	8005a40 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d106      	bne.n	80059d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f7fd f812 	bl	80029f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2224      	movs	r2, #36	@ 0x24
 80059d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68da      	ldr	r2, [r3, #12]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80059ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 fd69 	bl	80064c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	691a      	ldr	r2, [r3, #16]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	695a      	ldr	r2, [r3, #20]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68da      	ldr	r2, [r3, #12]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2220      	movs	r2, #32
 8005a34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3708      	adds	r7, #8
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b08a      	sub	sp, #40	@ 0x28
 8005a4c:	af02      	add	r7, sp, #8
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	603b      	str	r3, [r7, #0]
 8005a54:	4613      	mov	r3, r2
 8005a56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b20      	cmp	r3, #32
 8005a66:	d175      	bne.n	8005b54 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d002      	beq.n	8005a74 <HAL_UART_Transmit+0x2c>
 8005a6e:	88fb      	ldrh	r3, [r7, #6]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d101      	bne.n	8005a78 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e06e      	b.n	8005b56 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2221      	movs	r2, #33	@ 0x21
 8005a82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a86:	f7fd f9b1 	bl	8002dec <HAL_GetTick>
 8005a8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	88fa      	ldrh	r2, [r7, #6]
 8005a90:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	88fa      	ldrh	r2, [r7, #6]
 8005a96:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aa0:	d108      	bne.n	8005ab4 <HAL_UART_Transmit+0x6c>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d104      	bne.n	8005ab4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	61bb      	str	r3, [r7, #24]
 8005ab2:	e003      	b.n	8005abc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005abc:	e02e      	b.n	8005b1c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	9300      	str	r3, [sp, #0]
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	2180      	movs	r1, #128	@ 0x80
 8005ac8:	68f8      	ldr	r0, [r7, #12]
 8005aca:	f000 fb05 	bl	80060d8 <UART_WaitOnFlagUntilTimeout>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d005      	beq.n	8005ae0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e03a      	b.n	8005b56 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10b      	bne.n	8005afe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	881b      	ldrh	r3, [r3, #0]
 8005aea:	461a      	mov	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005af4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	3302      	adds	r3, #2
 8005afa:	61bb      	str	r3, [r7, #24]
 8005afc:	e007      	b.n	8005b0e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	781a      	ldrb	r2, [r3, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	3b01      	subs	r3, #1
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1cb      	bne.n	8005abe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	9300      	str	r3, [sp, #0]
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	2140      	movs	r1, #64	@ 0x40
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f000 fad1 	bl	80060d8 <UART_WaitOnFlagUntilTimeout>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d005      	beq.n	8005b48 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2220      	movs	r2, #32
 8005b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e006      	b.n	8005b56 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2220      	movs	r2, #32
 8005b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005b50:	2300      	movs	r3, #0
 8005b52:	e000      	b.n	8005b56 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005b54:	2302      	movs	r3, #2
  }
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3720      	adds	r7, #32
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
	...

08005b60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b0ba      	sub	sp, #232	@ 0xe8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005b86:	2300      	movs	r3, #0
 8005b88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b96:	f003 030f 	and.w	r3, r3, #15
 8005b9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005b9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d10f      	bne.n	8005bc6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005baa:	f003 0320 	and.w	r3, r3, #32
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d009      	beq.n	8005bc6 <HAL_UART_IRQHandler+0x66>
 8005bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bb6:	f003 0320 	and.w	r3, r3, #32
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d003      	beq.n	8005bc6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 fbc2 	bl	8006348 <UART_Receive_IT>
      return;
 8005bc4:	e25b      	b.n	800607e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005bc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f000 80de 	beq.w	8005d8c <HAL_UART_IRQHandler+0x22c>
 8005bd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d106      	bne.n	8005bea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005be0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 80d1 	beq.w	8005d8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00b      	beq.n	8005c0e <HAL_UART_IRQHandler+0xae>
 8005bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d005      	beq.n	8005c0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c06:	f043 0201 	orr.w	r2, r3, #1
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c12:	f003 0304 	and.w	r3, r3, #4
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00b      	beq.n	8005c32 <HAL_UART_IRQHandler+0xd2>
 8005c1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d005      	beq.n	8005c32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c2a:	f043 0202 	orr.w	r2, r3, #2
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00b      	beq.n	8005c56 <HAL_UART_IRQHandler+0xf6>
 8005c3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d005      	beq.n	8005c56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c4e:	f043 0204 	orr.w	r2, r3, #4
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c5a:	f003 0308 	and.w	r3, r3, #8
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d011      	beq.n	8005c86 <HAL_UART_IRQHandler+0x126>
 8005c62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c66:	f003 0320 	and.w	r3, r3, #32
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d105      	bne.n	8005c7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d005      	beq.n	8005c86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c7e:	f043 0208 	orr.w	r2, r3, #8
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f000 81f2 	beq.w	8006074 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c94:	f003 0320 	and.w	r3, r3, #32
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d008      	beq.n	8005cae <HAL_UART_IRQHandler+0x14e>
 8005c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ca0:	f003 0320 	and.w	r3, r3, #32
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d002      	beq.n	8005cae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 fb4d 	bl	8006348 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cb8:	2b40      	cmp	r3, #64	@ 0x40
 8005cba:	bf0c      	ite	eq
 8005cbc:	2301      	moveq	r3, #1
 8005cbe:	2300      	movne	r3, #0
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cca:	f003 0308 	and.w	r3, r3, #8
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d103      	bne.n	8005cda <HAL_UART_IRQHandler+0x17a>
 8005cd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d04f      	beq.n	8005d7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 fa55 	bl	800618a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cea:	2b40      	cmp	r3, #64	@ 0x40
 8005cec:	d141      	bne.n	8005d72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	3314      	adds	r3, #20
 8005cf4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005cfc:	e853 3f00 	ldrex	r3, [r3]
 8005d00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005d04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	3314      	adds	r3, #20
 8005d16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005d1a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005d1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005d26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005d2a:	e841 2300 	strex	r3, r2, [r1]
 8005d2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005d32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1d9      	bne.n	8005cee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d013      	beq.n	8005d6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d46:	4a7e      	ldr	r2, [pc, #504]	@ (8005f40 <HAL_UART_IRQHandler+0x3e0>)
 8005d48:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7fd fdfd 	bl	800394e <HAL_DMA_Abort_IT>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d016      	beq.n	8005d88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005d64:	4610      	mov	r0, r2
 8005d66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d68:	e00e      	b.n	8005d88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f99e 	bl	80060ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d70:	e00a      	b.n	8005d88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f99a 	bl	80060ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d78:	e006      	b.n	8005d88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 f996 	bl	80060ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005d86:	e175      	b.n	8006074 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d88:	bf00      	nop
    return;
 8005d8a:	e173      	b.n	8006074 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	f040 814f 	bne.w	8006034 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d9a:	f003 0310 	and.w	r3, r3, #16
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f000 8148 	beq.w	8006034 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005da8:	f003 0310 	and.w	r3, r3, #16
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 8141 	beq.w	8006034 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005db2:	2300      	movs	r3, #0
 8005db4:	60bb      	str	r3, [r7, #8]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	60bb      	str	r3, [r7, #8]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	60bb      	str	r3, [r7, #8]
 8005dc6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	695b      	ldr	r3, [r3, #20]
 8005dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dd2:	2b40      	cmp	r3, #64	@ 0x40
 8005dd4:	f040 80b6 	bne.w	8005f44 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005de4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f000 8145 	beq.w	8006078 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005df2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005df6:	429a      	cmp	r2, r3
 8005df8:	f080 813e 	bcs.w	8006078 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e02:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e08:	69db      	ldr	r3, [r3, #28]
 8005e0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e0e:	f000 8088 	beq.w	8005f22 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	330c      	adds	r3, #12
 8005e18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005e20:	e853 3f00 	ldrex	r3, [r3]
 8005e24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005e28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005e2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	330c      	adds	r3, #12
 8005e3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005e3e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005e42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e46:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005e4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005e4e:	e841 2300 	strex	r3, r2, [r1]
 8005e52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005e56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d1d9      	bne.n	8005e12 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	3314      	adds	r3, #20
 8005e64:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e68:	e853 3f00 	ldrex	r3, [r3]
 8005e6c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005e6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e70:	f023 0301 	bic.w	r3, r3, #1
 8005e74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	3314      	adds	r3, #20
 8005e7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005e82:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005e86:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e88:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005e8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005e8e:	e841 2300 	strex	r3, r2, [r1]
 8005e92:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005e94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1e1      	bne.n	8005e5e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	3314      	adds	r3, #20
 8005ea0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ea4:	e853 3f00 	ldrex	r3, [r3]
 8005ea8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005eaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005eac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005eb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	3314      	adds	r3, #20
 8005eba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005ebe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005ec0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005ec4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005ec6:	e841 2300 	strex	r3, r2, [r1]
 8005eca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005ecc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1e3      	bne.n	8005e9a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2220      	movs	r2, #32
 8005ed6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	330c      	adds	r3, #12
 8005ee6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005eea:	e853 3f00 	ldrex	r3, [r3]
 8005eee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ef0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ef2:	f023 0310 	bic.w	r3, r3, #16
 8005ef6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	330c      	adds	r3, #12
 8005f00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005f04:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005f06:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f08:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005f0a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005f0c:	e841 2300 	strex	r3, r2, [r1]
 8005f10:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005f12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d1e3      	bne.n	8005ee0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7fd fca6 	bl	800386e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2202      	movs	r2, #2
 8005f26:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	4619      	mov	r1, r3
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 f8c1 	bl	80060c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f3e:	e09b      	b.n	8006078 <HAL_UART_IRQHandler+0x518>
 8005f40:	08006251 	.word	0x08006251
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	f000 808e 	beq.w	800607c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005f60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 8089 	beq.w	800607c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	330c      	adds	r3, #12
 8005f70:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f74:	e853 3f00 	ldrex	r3, [r3]
 8005f78:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	330c      	adds	r3, #12
 8005f8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005f8e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005f90:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f92:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f96:	e841 2300 	strex	r3, r2, [r1]
 8005f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1e3      	bne.n	8005f6a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	3314      	adds	r3, #20
 8005fa8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fac:	e853 3f00 	ldrex	r3, [r3]
 8005fb0:	623b      	str	r3, [r7, #32]
   return(result);
 8005fb2:	6a3b      	ldr	r3, [r7, #32]
 8005fb4:	f023 0301 	bic.w	r3, r3, #1
 8005fb8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	3314      	adds	r3, #20
 8005fc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005fc6:	633a      	str	r2, [r7, #48]	@ 0x30
 8005fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005fcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fce:	e841 2300 	strex	r3, r2, [r1]
 8005fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1e3      	bne.n	8005fa2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2220      	movs	r2, #32
 8005fde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	330c      	adds	r3, #12
 8005fee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	e853 3f00 	ldrex	r3, [r3]
 8005ff6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f023 0310 	bic.w	r3, r3, #16
 8005ffe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	330c      	adds	r3, #12
 8006008:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800600c:	61fa      	str	r2, [r7, #28]
 800600e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006010:	69b9      	ldr	r1, [r7, #24]
 8006012:	69fa      	ldr	r2, [r7, #28]
 8006014:	e841 2300 	strex	r3, r2, [r1]
 8006018:	617b      	str	r3, [r7, #20]
   return(result);
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d1e3      	bne.n	8005fe8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2202      	movs	r2, #2
 8006024:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006026:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800602a:	4619      	mov	r1, r3
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 f847 	bl	80060c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006032:	e023      	b.n	800607c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006038:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800603c:	2b00      	cmp	r3, #0
 800603e:	d009      	beq.n	8006054 <HAL_UART_IRQHandler+0x4f4>
 8006040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006044:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006048:	2b00      	cmp	r3, #0
 800604a:	d003      	beq.n	8006054 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 f913 	bl	8006278 <UART_Transmit_IT>
    return;
 8006052:	e014      	b.n	800607e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00e      	beq.n	800607e <HAL_UART_IRQHandler+0x51e>
 8006060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006068:	2b00      	cmp	r3, #0
 800606a:	d008      	beq.n	800607e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 f953 	bl	8006318 <UART_EndTransmit_IT>
    return;
 8006072:	e004      	b.n	800607e <HAL_UART_IRQHandler+0x51e>
    return;
 8006074:	bf00      	nop
 8006076:	e002      	b.n	800607e <HAL_UART_IRQHandler+0x51e>
      return;
 8006078:	bf00      	nop
 800607a:	e000      	b.n	800607e <HAL_UART_IRQHandler+0x51e>
      return;
 800607c:	bf00      	nop
  }
}
 800607e:	37e8      	adds	r7, #232	@ 0xe8
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	460b      	mov	r3, r1
 80060ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80060cc:	bf00      	nop
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	603b      	str	r3, [r7, #0]
 80060e4:	4613      	mov	r3, r2
 80060e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060e8:	e03b      	b.n	8006162 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ea:	6a3b      	ldr	r3, [r7, #32]
 80060ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f0:	d037      	beq.n	8006162 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060f2:	f7fc fe7b 	bl	8002dec <HAL_GetTick>
 80060f6:	4602      	mov	r2, r0
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	6a3a      	ldr	r2, [r7, #32]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d302      	bcc.n	8006108 <UART_WaitOnFlagUntilTimeout+0x30>
 8006102:	6a3b      	ldr	r3, [r7, #32]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d101      	bne.n	800610c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e03a      	b.n	8006182 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	f003 0304 	and.w	r3, r3, #4
 8006116:	2b00      	cmp	r3, #0
 8006118:	d023      	beq.n	8006162 <UART_WaitOnFlagUntilTimeout+0x8a>
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	2b80      	cmp	r3, #128	@ 0x80
 800611e:	d020      	beq.n	8006162 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	2b40      	cmp	r3, #64	@ 0x40
 8006124:	d01d      	beq.n	8006162 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 0308 	and.w	r3, r3, #8
 8006130:	2b08      	cmp	r3, #8
 8006132:	d116      	bne.n	8006162 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006134:	2300      	movs	r3, #0
 8006136:	617b      	str	r3, [r7, #20]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	617b      	str	r3, [r7, #20]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	617b      	str	r3, [r7, #20]
 8006148:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	f000 f81d 	bl	800618a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2208      	movs	r2, #8
 8006154:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e00f      	b.n	8006182 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	4013      	ands	r3, r2
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	429a      	cmp	r2, r3
 8006170:	bf0c      	ite	eq
 8006172:	2301      	moveq	r3, #1
 8006174:	2300      	movne	r3, #0
 8006176:	b2db      	uxtb	r3, r3
 8006178:	461a      	mov	r2, r3
 800617a:	79fb      	ldrb	r3, [r7, #7]
 800617c:	429a      	cmp	r2, r3
 800617e:	d0b4      	beq.n	80060ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3718      	adds	r7, #24
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800618a:	b480      	push	{r7}
 800618c:	b095      	sub	sp, #84	@ 0x54
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	330c      	adds	r3, #12
 8006198:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800619c:	e853 3f00 	ldrex	r3, [r3]
 80061a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80061a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	330c      	adds	r3, #12
 80061b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80061b2:	643a      	str	r2, [r7, #64]	@ 0x40
 80061b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80061b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061ba:	e841 2300 	strex	r3, r2, [r1]
 80061be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80061c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1e5      	bne.n	8006192 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	3314      	adds	r3, #20
 80061cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ce:	6a3b      	ldr	r3, [r7, #32]
 80061d0:	e853 3f00 	ldrex	r3, [r3]
 80061d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	f023 0301 	bic.w	r3, r3, #1
 80061dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	3314      	adds	r3, #20
 80061e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061ee:	e841 2300 	strex	r3, r2, [r1]
 80061f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80061f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1e5      	bne.n	80061c6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d119      	bne.n	8006236 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	330c      	adds	r3, #12
 8006208:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	e853 3f00 	ldrex	r3, [r3]
 8006210:	60bb      	str	r3, [r7, #8]
   return(result);
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	f023 0310 	bic.w	r3, r3, #16
 8006218:	647b      	str	r3, [r7, #68]	@ 0x44
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	330c      	adds	r3, #12
 8006220:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006222:	61ba      	str	r2, [r7, #24]
 8006224:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006226:	6979      	ldr	r1, [r7, #20]
 8006228:	69ba      	ldr	r2, [r7, #24]
 800622a:	e841 2300 	strex	r3, r2, [r1]
 800622e:	613b      	str	r3, [r7, #16]
   return(result);
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1e5      	bne.n	8006202 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2220      	movs	r2, #32
 800623a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006244:	bf00      	nop
 8006246:	3754      	adds	r7, #84	@ 0x54
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800625c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f7ff ff1e 	bl	80060ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006270:	bf00      	nop
 8006272:	3710      	adds	r7, #16
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b21      	cmp	r3, #33	@ 0x21
 800628a:	d13e      	bne.n	800630a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006294:	d114      	bne.n	80062c0 <UART_Transmit_IT+0x48>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d110      	bne.n	80062c0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a1b      	ldr	r3, [r3, #32]
 80062a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	881b      	ldrh	r3, [r3, #0]
 80062a8:	461a      	mov	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062b2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a1b      	ldr	r3, [r3, #32]
 80062b8:	1c9a      	adds	r2, r3, #2
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	621a      	str	r2, [r3, #32]
 80062be:	e008      	b.n	80062d2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a1b      	ldr	r3, [r3, #32]
 80062c4:	1c59      	adds	r1, r3, #1
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	6211      	str	r1, [r2, #32]
 80062ca:	781a      	ldrb	r2, [r3, #0]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	3b01      	subs	r3, #1
 80062da:	b29b      	uxth	r3, r3
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	4619      	mov	r1, r3
 80062e0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d10f      	bne.n	8006306 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68da      	ldr	r2, [r3, #12]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80062f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	68da      	ldr	r2, [r3, #12]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006304:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006306:	2300      	movs	r3, #0
 8006308:	e000      	b.n	800630c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800630a:	2302      	movs	r3, #2
  }
}
 800630c:	4618      	mov	r0, r3
 800630e:	3714      	adds	r7, #20
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68da      	ldr	r2, [r3, #12]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800632e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2220      	movs	r2, #32
 8006334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f7ff fea3 	bl	8006084 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3708      	adds	r7, #8
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b08c      	sub	sp, #48	@ 0x30
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006356:	b2db      	uxtb	r3, r3
 8006358:	2b22      	cmp	r3, #34	@ 0x22
 800635a:	f040 80ae 	bne.w	80064ba <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006366:	d117      	bne.n	8006398 <UART_Receive_IT+0x50>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d113      	bne.n	8006398 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006370:	2300      	movs	r3, #0
 8006372:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006378:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	b29b      	uxth	r3, r3
 8006382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006386:	b29a      	uxth	r2, r3
 8006388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800638a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006390:	1c9a      	adds	r2, r3, #2
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	629a      	str	r2, [r3, #40]	@ 0x28
 8006396:	e026      	b.n	80063e6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800639c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800639e:	2300      	movs	r3, #0
 80063a0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063aa:	d007      	beq.n	80063bc <UART_Receive_IT+0x74>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d10a      	bne.n	80063ca <UART_Receive_IT+0x82>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d106      	bne.n	80063ca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	b2da      	uxtb	r2, r3
 80063c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063c6:	701a      	strb	r2, [r3, #0]
 80063c8:	e008      	b.n	80063dc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063d6:	b2da      	uxtb	r2, r3
 80063d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063da:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063e0:	1c5a      	adds	r2, r3, #1
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	3b01      	subs	r3, #1
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	4619      	mov	r1, r3
 80063f4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d15d      	bne.n	80064b6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68da      	ldr	r2, [r3, #12]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f022 0220 	bic.w	r2, r2, #32
 8006408:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68da      	ldr	r2, [r3, #12]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006418:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	695a      	ldr	r2, [r3, #20]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f022 0201 	bic.w	r2, r2, #1
 8006428:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2220      	movs	r2, #32
 800642e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800643c:	2b01      	cmp	r3, #1
 800643e:	d135      	bne.n	80064ac <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	330c      	adds	r3, #12
 800644c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	e853 3f00 	ldrex	r3, [r3]
 8006454:	613b      	str	r3, [r7, #16]
   return(result);
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	f023 0310 	bic.w	r3, r3, #16
 800645c:	627b      	str	r3, [r7, #36]	@ 0x24
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	330c      	adds	r3, #12
 8006464:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006466:	623a      	str	r2, [r7, #32]
 8006468:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646a:	69f9      	ldr	r1, [r7, #28]
 800646c:	6a3a      	ldr	r2, [r7, #32]
 800646e:	e841 2300 	strex	r3, r2, [r1]
 8006472:	61bb      	str	r3, [r7, #24]
   return(result);
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1e5      	bne.n	8006446 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0310 	and.w	r3, r3, #16
 8006484:	2b10      	cmp	r3, #16
 8006486:	d10a      	bne.n	800649e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006488:	2300      	movs	r3, #0
 800648a:	60fb      	str	r3, [r7, #12]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	60fb      	str	r3, [r7, #12]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	60fb      	str	r3, [r7, #12]
 800649c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80064a2:	4619      	mov	r1, r3
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f7ff fe0b 	bl	80060c0 <HAL_UARTEx_RxEventCallback>
 80064aa:	e002      	b.n	80064b2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f7ff fdf3 	bl	8006098 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80064b2:	2300      	movs	r3, #0
 80064b4:	e002      	b.n	80064bc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80064b6:	2300      	movs	r3, #0
 80064b8:	e000      	b.n	80064bc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80064ba:	2302      	movs	r3, #2
  }
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3730      	adds	r7, #48	@ 0x30
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064c8:	b0c0      	sub	sp, #256	@ 0x100
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80064dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064e0:	68d9      	ldr	r1, [r3, #12]
 80064e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	ea40 0301 	orr.w	r3, r0, r1
 80064ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80064ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064f2:	689a      	ldr	r2, [r3, #8]
 80064f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	431a      	orrs	r2, r3
 80064fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006500:	695b      	ldr	r3, [r3, #20]
 8006502:	431a      	orrs	r2, r3
 8006504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006508:	69db      	ldr	r3, [r3, #28]
 800650a:	4313      	orrs	r3, r2
 800650c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800651c:	f021 010c 	bic.w	r1, r1, #12
 8006520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800652a:	430b      	orrs	r3, r1
 800652c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800652e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800653a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800653e:	6999      	ldr	r1, [r3, #24]
 8006540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	ea40 0301 	orr.w	r3, r0, r1
 800654a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800654c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	4b8f      	ldr	r3, [pc, #572]	@ (8006790 <UART_SetConfig+0x2cc>)
 8006554:	429a      	cmp	r2, r3
 8006556:	d005      	beq.n	8006564 <UART_SetConfig+0xa0>
 8006558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	4b8d      	ldr	r3, [pc, #564]	@ (8006794 <UART_SetConfig+0x2d0>)
 8006560:	429a      	cmp	r2, r3
 8006562:	d104      	bne.n	800656e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006564:	f7ff fa0c 	bl	8005980 <HAL_RCC_GetPCLK2Freq>
 8006568:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800656c:	e003      	b.n	8006576 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800656e:	f7ff f9f3 	bl	8005958 <HAL_RCC_GetPCLK1Freq>
 8006572:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800657a:	69db      	ldr	r3, [r3, #28]
 800657c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006580:	f040 810c 	bne.w	800679c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006584:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006588:	2200      	movs	r2, #0
 800658a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800658e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006592:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006596:	4622      	mov	r2, r4
 8006598:	462b      	mov	r3, r5
 800659a:	1891      	adds	r1, r2, r2
 800659c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800659e:	415b      	adcs	r3, r3
 80065a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80065a6:	4621      	mov	r1, r4
 80065a8:	eb12 0801 	adds.w	r8, r2, r1
 80065ac:	4629      	mov	r1, r5
 80065ae:	eb43 0901 	adc.w	r9, r3, r1
 80065b2:	f04f 0200 	mov.w	r2, #0
 80065b6:	f04f 0300 	mov.w	r3, #0
 80065ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065c6:	4690      	mov	r8, r2
 80065c8:	4699      	mov	r9, r3
 80065ca:	4623      	mov	r3, r4
 80065cc:	eb18 0303 	adds.w	r3, r8, r3
 80065d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80065d4:	462b      	mov	r3, r5
 80065d6:	eb49 0303 	adc.w	r3, r9, r3
 80065da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80065de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80065ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80065ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80065f2:	460b      	mov	r3, r1
 80065f4:	18db      	adds	r3, r3, r3
 80065f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80065f8:	4613      	mov	r3, r2
 80065fa:	eb42 0303 	adc.w	r3, r2, r3
 80065fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8006600:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006604:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006608:	f7fa fb8e 	bl	8000d28 <__aeabi_uldivmod>
 800660c:	4602      	mov	r2, r0
 800660e:	460b      	mov	r3, r1
 8006610:	4b61      	ldr	r3, [pc, #388]	@ (8006798 <UART_SetConfig+0x2d4>)
 8006612:	fba3 2302 	umull	r2, r3, r3, r2
 8006616:	095b      	lsrs	r3, r3, #5
 8006618:	011c      	lsls	r4, r3, #4
 800661a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800661e:	2200      	movs	r2, #0
 8006620:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006624:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006628:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800662c:	4642      	mov	r2, r8
 800662e:	464b      	mov	r3, r9
 8006630:	1891      	adds	r1, r2, r2
 8006632:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006634:	415b      	adcs	r3, r3
 8006636:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006638:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800663c:	4641      	mov	r1, r8
 800663e:	eb12 0a01 	adds.w	sl, r2, r1
 8006642:	4649      	mov	r1, r9
 8006644:	eb43 0b01 	adc.w	fp, r3, r1
 8006648:	f04f 0200 	mov.w	r2, #0
 800664c:	f04f 0300 	mov.w	r3, #0
 8006650:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006654:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006658:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800665c:	4692      	mov	sl, r2
 800665e:	469b      	mov	fp, r3
 8006660:	4643      	mov	r3, r8
 8006662:	eb1a 0303 	adds.w	r3, sl, r3
 8006666:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800666a:	464b      	mov	r3, r9
 800666c:	eb4b 0303 	adc.w	r3, fp, r3
 8006670:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006680:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006684:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006688:	460b      	mov	r3, r1
 800668a:	18db      	adds	r3, r3, r3
 800668c:	643b      	str	r3, [r7, #64]	@ 0x40
 800668e:	4613      	mov	r3, r2
 8006690:	eb42 0303 	adc.w	r3, r2, r3
 8006694:	647b      	str	r3, [r7, #68]	@ 0x44
 8006696:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800669a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800669e:	f7fa fb43 	bl	8000d28 <__aeabi_uldivmod>
 80066a2:	4602      	mov	r2, r0
 80066a4:	460b      	mov	r3, r1
 80066a6:	4611      	mov	r1, r2
 80066a8:	4b3b      	ldr	r3, [pc, #236]	@ (8006798 <UART_SetConfig+0x2d4>)
 80066aa:	fba3 2301 	umull	r2, r3, r3, r1
 80066ae:	095b      	lsrs	r3, r3, #5
 80066b0:	2264      	movs	r2, #100	@ 0x64
 80066b2:	fb02 f303 	mul.w	r3, r2, r3
 80066b6:	1acb      	subs	r3, r1, r3
 80066b8:	00db      	lsls	r3, r3, #3
 80066ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80066be:	4b36      	ldr	r3, [pc, #216]	@ (8006798 <UART_SetConfig+0x2d4>)
 80066c0:	fba3 2302 	umull	r2, r3, r3, r2
 80066c4:	095b      	lsrs	r3, r3, #5
 80066c6:	005b      	lsls	r3, r3, #1
 80066c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80066cc:	441c      	add	r4, r3
 80066ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066d2:	2200      	movs	r2, #0
 80066d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80066d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80066dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80066e0:	4642      	mov	r2, r8
 80066e2:	464b      	mov	r3, r9
 80066e4:	1891      	adds	r1, r2, r2
 80066e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80066e8:	415b      	adcs	r3, r3
 80066ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80066f0:	4641      	mov	r1, r8
 80066f2:	1851      	adds	r1, r2, r1
 80066f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80066f6:	4649      	mov	r1, r9
 80066f8:	414b      	adcs	r3, r1
 80066fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80066fc:	f04f 0200 	mov.w	r2, #0
 8006700:	f04f 0300 	mov.w	r3, #0
 8006704:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006708:	4659      	mov	r1, fp
 800670a:	00cb      	lsls	r3, r1, #3
 800670c:	4651      	mov	r1, sl
 800670e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006712:	4651      	mov	r1, sl
 8006714:	00ca      	lsls	r2, r1, #3
 8006716:	4610      	mov	r0, r2
 8006718:	4619      	mov	r1, r3
 800671a:	4603      	mov	r3, r0
 800671c:	4642      	mov	r2, r8
 800671e:	189b      	adds	r3, r3, r2
 8006720:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006724:	464b      	mov	r3, r9
 8006726:	460a      	mov	r2, r1
 8006728:	eb42 0303 	adc.w	r3, r2, r3
 800672c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800673c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006740:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006744:	460b      	mov	r3, r1
 8006746:	18db      	adds	r3, r3, r3
 8006748:	62bb      	str	r3, [r7, #40]	@ 0x28
 800674a:	4613      	mov	r3, r2
 800674c:	eb42 0303 	adc.w	r3, r2, r3
 8006750:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006752:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006756:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800675a:	f7fa fae5 	bl	8000d28 <__aeabi_uldivmod>
 800675e:	4602      	mov	r2, r0
 8006760:	460b      	mov	r3, r1
 8006762:	4b0d      	ldr	r3, [pc, #52]	@ (8006798 <UART_SetConfig+0x2d4>)
 8006764:	fba3 1302 	umull	r1, r3, r3, r2
 8006768:	095b      	lsrs	r3, r3, #5
 800676a:	2164      	movs	r1, #100	@ 0x64
 800676c:	fb01 f303 	mul.w	r3, r1, r3
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	00db      	lsls	r3, r3, #3
 8006774:	3332      	adds	r3, #50	@ 0x32
 8006776:	4a08      	ldr	r2, [pc, #32]	@ (8006798 <UART_SetConfig+0x2d4>)
 8006778:	fba2 2303 	umull	r2, r3, r2, r3
 800677c:	095b      	lsrs	r3, r3, #5
 800677e:	f003 0207 	and.w	r2, r3, #7
 8006782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4422      	add	r2, r4
 800678a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800678c:	e106      	b.n	800699c <UART_SetConfig+0x4d8>
 800678e:	bf00      	nop
 8006790:	40011000 	.word	0x40011000
 8006794:	40011400 	.word	0x40011400
 8006798:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800679c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067a0:	2200      	movs	r2, #0
 80067a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80067a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80067aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80067ae:	4642      	mov	r2, r8
 80067b0:	464b      	mov	r3, r9
 80067b2:	1891      	adds	r1, r2, r2
 80067b4:	6239      	str	r1, [r7, #32]
 80067b6:	415b      	adcs	r3, r3
 80067b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80067ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067be:	4641      	mov	r1, r8
 80067c0:	1854      	adds	r4, r2, r1
 80067c2:	4649      	mov	r1, r9
 80067c4:	eb43 0501 	adc.w	r5, r3, r1
 80067c8:	f04f 0200 	mov.w	r2, #0
 80067cc:	f04f 0300 	mov.w	r3, #0
 80067d0:	00eb      	lsls	r3, r5, #3
 80067d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067d6:	00e2      	lsls	r2, r4, #3
 80067d8:	4614      	mov	r4, r2
 80067da:	461d      	mov	r5, r3
 80067dc:	4643      	mov	r3, r8
 80067de:	18e3      	adds	r3, r4, r3
 80067e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80067e4:	464b      	mov	r3, r9
 80067e6:	eb45 0303 	adc.w	r3, r5, r3
 80067ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80067ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80067fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80067fe:	f04f 0200 	mov.w	r2, #0
 8006802:	f04f 0300 	mov.w	r3, #0
 8006806:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800680a:	4629      	mov	r1, r5
 800680c:	008b      	lsls	r3, r1, #2
 800680e:	4621      	mov	r1, r4
 8006810:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006814:	4621      	mov	r1, r4
 8006816:	008a      	lsls	r2, r1, #2
 8006818:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800681c:	f7fa fa84 	bl	8000d28 <__aeabi_uldivmod>
 8006820:	4602      	mov	r2, r0
 8006822:	460b      	mov	r3, r1
 8006824:	4b60      	ldr	r3, [pc, #384]	@ (80069a8 <UART_SetConfig+0x4e4>)
 8006826:	fba3 2302 	umull	r2, r3, r3, r2
 800682a:	095b      	lsrs	r3, r3, #5
 800682c:	011c      	lsls	r4, r3, #4
 800682e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006832:	2200      	movs	r2, #0
 8006834:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006838:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800683c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006840:	4642      	mov	r2, r8
 8006842:	464b      	mov	r3, r9
 8006844:	1891      	adds	r1, r2, r2
 8006846:	61b9      	str	r1, [r7, #24]
 8006848:	415b      	adcs	r3, r3
 800684a:	61fb      	str	r3, [r7, #28]
 800684c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006850:	4641      	mov	r1, r8
 8006852:	1851      	adds	r1, r2, r1
 8006854:	6139      	str	r1, [r7, #16]
 8006856:	4649      	mov	r1, r9
 8006858:	414b      	adcs	r3, r1
 800685a:	617b      	str	r3, [r7, #20]
 800685c:	f04f 0200 	mov.w	r2, #0
 8006860:	f04f 0300 	mov.w	r3, #0
 8006864:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006868:	4659      	mov	r1, fp
 800686a:	00cb      	lsls	r3, r1, #3
 800686c:	4651      	mov	r1, sl
 800686e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006872:	4651      	mov	r1, sl
 8006874:	00ca      	lsls	r2, r1, #3
 8006876:	4610      	mov	r0, r2
 8006878:	4619      	mov	r1, r3
 800687a:	4603      	mov	r3, r0
 800687c:	4642      	mov	r2, r8
 800687e:	189b      	adds	r3, r3, r2
 8006880:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006884:	464b      	mov	r3, r9
 8006886:	460a      	mov	r2, r1
 8006888:	eb42 0303 	adc.w	r3, r2, r3
 800688c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	67bb      	str	r3, [r7, #120]	@ 0x78
 800689a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800689c:	f04f 0200 	mov.w	r2, #0
 80068a0:	f04f 0300 	mov.w	r3, #0
 80068a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80068a8:	4649      	mov	r1, r9
 80068aa:	008b      	lsls	r3, r1, #2
 80068ac:	4641      	mov	r1, r8
 80068ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068b2:	4641      	mov	r1, r8
 80068b4:	008a      	lsls	r2, r1, #2
 80068b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80068ba:	f7fa fa35 	bl	8000d28 <__aeabi_uldivmod>
 80068be:	4602      	mov	r2, r0
 80068c0:	460b      	mov	r3, r1
 80068c2:	4611      	mov	r1, r2
 80068c4:	4b38      	ldr	r3, [pc, #224]	@ (80069a8 <UART_SetConfig+0x4e4>)
 80068c6:	fba3 2301 	umull	r2, r3, r3, r1
 80068ca:	095b      	lsrs	r3, r3, #5
 80068cc:	2264      	movs	r2, #100	@ 0x64
 80068ce:	fb02 f303 	mul.w	r3, r2, r3
 80068d2:	1acb      	subs	r3, r1, r3
 80068d4:	011b      	lsls	r3, r3, #4
 80068d6:	3332      	adds	r3, #50	@ 0x32
 80068d8:	4a33      	ldr	r2, [pc, #204]	@ (80069a8 <UART_SetConfig+0x4e4>)
 80068da:	fba2 2303 	umull	r2, r3, r2, r3
 80068de:	095b      	lsrs	r3, r3, #5
 80068e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80068e4:	441c      	add	r4, r3
 80068e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068ea:	2200      	movs	r2, #0
 80068ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80068ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80068f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80068f4:	4642      	mov	r2, r8
 80068f6:	464b      	mov	r3, r9
 80068f8:	1891      	adds	r1, r2, r2
 80068fa:	60b9      	str	r1, [r7, #8]
 80068fc:	415b      	adcs	r3, r3
 80068fe:	60fb      	str	r3, [r7, #12]
 8006900:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006904:	4641      	mov	r1, r8
 8006906:	1851      	adds	r1, r2, r1
 8006908:	6039      	str	r1, [r7, #0]
 800690a:	4649      	mov	r1, r9
 800690c:	414b      	adcs	r3, r1
 800690e:	607b      	str	r3, [r7, #4]
 8006910:	f04f 0200 	mov.w	r2, #0
 8006914:	f04f 0300 	mov.w	r3, #0
 8006918:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800691c:	4659      	mov	r1, fp
 800691e:	00cb      	lsls	r3, r1, #3
 8006920:	4651      	mov	r1, sl
 8006922:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006926:	4651      	mov	r1, sl
 8006928:	00ca      	lsls	r2, r1, #3
 800692a:	4610      	mov	r0, r2
 800692c:	4619      	mov	r1, r3
 800692e:	4603      	mov	r3, r0
 8006930:	4642      	mov	r2, r8
 8006932:	189b      	adds	r3, r3, r2
 8006934:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006936:	464b      	mov	r3, r9
 8006938:	460a      	mov	r2, r1
 800693a:	eb42 0303 	adc.w	r3, r2, r3
 800693e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	663b      	str	r3, [r7, #96]	@ 0x60
 800694a:	667a      	str	r2, [r7, #100]	@ 0x64
 800694c:	f04f 0200 	mov.w	r2, #0
 8006950:	f04f 0300 	mov.w	r3, #0
 8006954:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006958:	4649      	mov	r1, r9
 800695a:	008b      	lsls	r3, r1, #2
 800695c:	4641      	mov	r1, r8
 800695e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006962:	4641      	mov	r1, r8
 8006964:	008a      	lsls	r2, r1, #2
 8006966:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800696a:	f7fa f9dd 	bl	8000d28 <__aeabi_uldivmod>
 800696e:	4602      	mov	r2, r0
 8006970:	460b      	mov	r3, r1
 8006972:	4b0d      	ldr	r3, [pc, #52]	@ (80069a8 <UART_SetConfig+0x4e4>)
 8006974:	fba3 1302 	umull	r1, r3, r3, r2
 8006978:	095b      	lsrs	r3, r3, #5
 800697a:	2164      	movs	r1, #100	@ 0x64
 800697c:	fb01 f303 	mul.w	r3, r1, r3
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	011b      	lsls	r3, r3, #4
 8006984:	3332      	adds	r3, #50	@ 0x32
 8006986:	4a08      	ldr	r2, [pc, #32]	@ (80069a8 <UART_SetConfig+0x4e4>)
 8006988:	fba2 2303 	umull	r2, r3, r2, r3
 800698c:	095b      	lsrs	r3, r3, #5
 800698e:	f003 020f 	and.w	r2, r3, #15
 8006992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4422      	add	r2, r4
 800699a:	609a      	str	r2, [r3, #8]
}
 800699c:	bf00      	nop
 800699e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80069a2:	46bd      	mov	sp, r7
 80069a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069a8:	51eb851f 	.word	0x51eb851f

080069ac <__cvt>:
 80069ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069b0:	ec57 6b10 	vmov	r6, r7, d0
 80069b4:	2f00      	cmp	r7, #0
 80069b6:	460c      	mov	r4, r1
 80069b8:	4619      	mov	r1, r3
 80069ba:	463b      	mov	r3, r7
 80069bc:	bfbb      	ittet	lt
 80069be:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80069c2:	461f      	movlt	r7, r3
 80069c4:	2300      	movge	r3, #0
 80069c6:	232d      	movlt	r3, #45	@ 0x2d
 80069c8:	700b      	strb	r3, [r1, #0]
 80069ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80069cc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80069d0:	4691      	mov	r9, r2
 80069d2:	f023 0820 	bic.w	r8, r3, #32
 80069d6:	bfbc      	itt	lt
 80069d8:	4632      	movlt	r2, r6
 80069da:	4616      	movlt	r6, r2
 80069dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80069e0:	d005      	beq.n	80069ee <__cvt+0x42>
 80069e2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80069e6:	d100      	bne.n	80069ea <__cvt+0x3e>
 80069e8:	3401      	adds	r4, #1
 80069ea:	2102      	movs	r1, #2
 80069ec:	e000      	b.n	80069f0 <__cvt+0x44>
 80069ee:	2103      	movs	r1, #3
 80069f0:	ab03      	add	r3, sp, #12
 80069f2:	9301      	str	r3, [sp, #4]
 80069f4:	ab02      	add	r3, sp, #8
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	ec47 6b10 	vmov	d0, r6, r7
 80069fc:	4653      	mov	r3, sl
 80069fe:	4622      	mov	r2, r4
 8006a00:	f000 fe8e 	bl	8007720 <_dtoa_r>
 8006a04:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006a08:	4605      	mov	r5, r0
 8006a0a:	d119      	bne.n	8006a40 <__cvt+0x94>
 8006a0c:	f019 0f01 	tst.w	r9, #1
 8006a10:	d00e      	beq.n	8006a30 <__cvt+0x84>
 8006a12:	eb00 0904 	add.w	r9, r0, r4
 8006a16:	2200      	movs	r2, #0
 8006a18:	2300      	movs	r3, #0
 8006a1a:	4630      	mov	r0, r6
 8006a1c:	4639      	mov	r1, r7
 8006a1e:	f7fa f853 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a22:	b108      	cbz	r0, 8006a28 <__cvt+0x7c>
 8006a24:	f8cd 900c 	str.w	r9, [sp, #12]
 8006a28:	2230      	movs	r2, #48	@ 0x30
 8006a2a:	9b03      	ldr	r3, [sp, #12]
 8006a2c:	454b      	cmp	r3, r9
 8006a2e:	d31e      	bcc.n	8006a6e <__cvt+0xc2>
 8006a30:	9b03      	ldr	r3, [sp, #12]
 8006a32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006a34:	1b5b      	subs	r3, r3, r5
 8006a36:	4628      	mov	r0, r5
 8006a38:	6013      	str	r3, [r2, #0]
 8006a3a:	b004      	add	sp, #16
 8006a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a40:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006a44:	eb00 0904 	add.w	r9, r0, r4
 8006a48:	d1e5      	bne.n	8006a16 <__cvt+0x6a>
 8006a4a:	7803      	ldrb	r3, [r0, #0]
 8006a4c:	2b30      	cmp	r3, #48	@ 0x30
 8006a4e:	d10a      	bne.n	8006a66 <__cvt+0xba>
 8006a50:	2200      	movs	r2, #0
 8006a52:	2300      	movs	r3, #0
 8006a54:	4630      	mov	r0, r6
 8006a56:	4639      	mov	r1, r7
 8006a58:	f7fa f836 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a5c:	b918      	cbnz	r0, 8006a66 <__cvt+0xba>
 8006a5e:	f1c4 0401 	rsb	r4, r4, #1
 8006a62:	f8ca 4000 	str.w	r4, [sl]
 8006a66:	f8da 3000 	ldr.w	r3, [sl]
 8006a6a:	4499      	add	r9, r3
 8006a6c:	e7d3      	b.n	8006a16 <__cvt+0x6a>
 8006a6e:	1c59      	adds	r1, r3, #1
 8006a70:	9103      	str	r1, [sp, #12]
 8006a72:	701a      	strb	r2, [r3, #0]
 8006a74:	e7d9      	b.n	8006a2a <__cvt+0x7e>

08006a76 <__exponent>:
 8006a76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a78:	2900      	cmp	r1, #0
 8006a7a:	bfba      	itte	lt
 8006a7c:	4249      	neglt	r1, r1
 8006a7e:	232d      	movlt	r3, #45	@ 0x2d
 8006a80:	232b      	movge	r3, #43	@ 0x2b
 8006a82:	2909      	cmp	r1, #9
 8006a84:	7002      	strb	r2, [r0, #0]
 8006a86:	7043      	strb	r3, [r0, #1]
 8006a88:	dd29      	ble.n	8006ade <__exponent+0x68>
 8006a8a:	f10d 0307 	add.w	r3, sp, #7
 8006a8e:	461d      	mov	r5, r3
 8006a90:	270a      	movs	r7, #10
 8006a92:	461a      	mov	r2, r3
 8006a94:	fbb1 f6f7 	udiv	r6, r1, r7
 8006a98:	fb07 1416 	mls	r4, r7, r6, r1
 8006a9c:	3430      	adds	r4, #48	@ 0x30
 8006a9e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006aa2:	460c      	mov	r4, r1
 8006aa4:	2c63      	cmp	r4, #99	@ 0x63
 8006aa6:	f103 33ff 	add.w	r3, r3, #4294967295
 8006aaa:	4631      	mov	r1, r6
 8006aac:	dcf1      	bgt.n	8006a92 <__exponent+0x1c>
 8006aae:	3130      	adds	r1, #48	@ 0x30
 8006ab0:	1e94      	subs	r4, r2, #2
 8006ab2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006ab6:	1c41      	adds	r1, r0, #1
 8006ab8:	4623      	mov	r3, r4
 8006aba:	42ab      	cmp	r3, r5
 8006abc:	d30a      	bcc.n	8006ad4 <__exponent+0x5e>
 8006abe:	f10d 0309 	add.w	r3, sp, #9
 8006ac2:	1a9b      	subs	r3, r3, r2
 8006ac4:	42ac      	cmp	r4, r5
 8006ac6:	bf88      	it	hi
 8006ac8:	2300      	movhi	r3, #0
 8006aca:	3302      	adds	r3, #2
 8006acc:	4403      	add	r3, r0
 8006ace:	1a18      	subs	r0, r3, r0
 8006ad0:	b003      	add	sp, #12
 8006ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ad4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006ad8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006adc:	e7ed      	b.n	8006aba <__exponent+0x44>
 8006ade:	2330      	movs	r3, #48	@ 0x30
 8006ae0:	3130      	adds	r1, #48	@ 0x30
 8006ae2:	7083      	strb	r3, [r0, #2]
 8006ae4:	70c1      	strb	r1, [r0, #3]
 8006ae6:	1d03      	adds	r3, r0, #4
 8006ae8:	e7f1      	b.n	8006ace <__exponent+0x58>
	...

08006aec <_printf_float>:
 8006aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006af0:	b08d      	sub	sp, #52	@ 0x34
 8006af2:	460c      	mov	r4, r1
 8006af4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006af8:	4616      	mov	r6, r2
 8006afa:	461f      	mov	r7, r3
 8006afc:	4605      	mov	r5, r0
 8006afe:	f000 fd0f 	bl	8007520 <_localeconv_r>
 8006b02:	6803      	ldr	r3, [r0, #0]
 8006b04:	9304      	str	r3, [sp, #16]
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7f9 fbb2 	bl	8000270 <strlen>
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b10:	f8d8 3000 	ldr.w	r3, [r8]
 8006b14:	9005      	str	r0, [sp, #20]
 8006b16:	3307      	adds	r3, #7
 8006b18:	f023 0307 	bic.w	r3, r3, #7
 8006b1c:	f103 0208 	add.w	r2, r3, #8
 8006b20:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006b24:	f8d4 b000 	ldr.w	fp, [r4]
 8006b28:	f8c8 2000 	str.w	r2, [r8]
 8006b2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006b30:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006b34:	9307      	str	r3, [sp, #28]
 8006b36:	f8cd 8018 	str.w	r8, [sp, #24]
 8006b3a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006b3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b42:	4b9c      	ldr	r3, [pc, #624]	@ (8006db4 <_printf_float+0x2c8>)
 8006b44:	f04f 32ff 	mov.w	r2, #4294967295
 8006b48:	f7f9 fff0 	bl	8000b2c <__aeabi_dcmpun>
 8006b4c:	bb70      	cbnz	r0, 8006bac <_printf_float+0xc0>
 8006b4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b52:	4b98      	ldr	r3, [pc, #608]	@ (8006db4 <_printf_float+0x2c8>)
 8006b54:	f04f 32ff 	mov.w	r2, #4294967295
 8006b58:	f7f9 ffca 	bl	8000af0 <__aeabi_dcmple>
 8006b5c:	bb30      	cbnz	r0, 8006bac <_printf_float+0xc0>
 8006b5e:	2200      	movs	r2, #0
 8006b60:	2300      	movs	r3, #0
 8006b62:	4640      	mov	r0, r8
 8006b64:	4649      	mov	r1, r9
 8006b66:	f7f9 ffb9 	bl	8000adc <__aeabi_dcmplt>
 8006b6a:	b110      	cbz	r0, 8006b72 <_printf_float+0x86>
 8006b6c:	232d      	movs	r3, #45	@ 0x2d
 8006b6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b72:	4a91      	ldr	r2, [pc, #580]	@ (8006db8 <_printf_float+0x2cc>)
 8006b74:	4b91      	ldr	r3, [pc, #580]	@ (8006dbc <_printf_float+0x2d0>)
 8006b76:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006b7a:	bf94      	ite	ls
 8006b7c:	4690      	movls	r8, r2
 8006b7e:	4698      	movhi	r8, r3
 8006b80:	2303      	movs	r3, #3
 8006b82:	6123      	str	r3, [r4, #16]
 8006b84:	f02b 0304 	bic.w	r3, fp, #4
 8006b88:	6023      	str	r3, [r4, #0]
 8006b8a:	f04f 0900 	mov.w	r9, #0
 8006b8e:	9700      	str	r7, [sp, #0]
 8006b90:	4633      	mov	r3, r6
 8006b92:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006b94:	4621      	mov	r1, r4
 8006b96:	4628      	mov	r0, r5
 8006b98:	f000 f9d2 	bl	8006f40 <_printf_common>
 8006b9c:	3001      	adds	r0, #1
 8006b9e:	f040 808d 	bne.w	8006cbc <_printf_float+0x1d0>
 8006ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba6:	b00d      	add	sp, #52	@ 0x34
 8006ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bac:	4642      	mov	r2, r8
 8006bae:	464b      	mov	r3, r9
 8006bb0:	4640      	mov	r0, r8
 8006bb2:	4649      	mov	r1, r9
 8006bb4:	f7f9 ffba 	bl	8000b2c <__aeabi_dcmpun>
 8006bb8:	b140      	cbz	r0, 8006bcc <_printf_float+0xe0>
 8006bba:	464b      	mov	r3, r9
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	bfbc      	itt	lt
 8006bc0:	232d      	movlt	r3, #45	@ 0x2d
 8006bc2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006bc6:	4a7e      	ldr	r2, [pc, #504]	@ (8006dc0 <_printf_float+0x2d4>)
 8006bc8:	4b7e      	ldr	r3, [pc, #504]	@ (8006dc4 <_printf_float+0x2d8>)
 8006bca:	e7d4      	b.n	8006b76 <_printf_float+0x8a>
 8006bcc:	6863      	ldr	r3, [r4, #4]
 8006bce:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006bd2:	9206      	str	r2, [sp, #24]
 8006bd4:	1c5a      	adds	r2, r3, #1
 8006bd6:	d13b      	bne.n	8006c50 <_printf_float+0x164>
 8006bd8:	2306      	movs	r3, #6
 8006bda:	6063      	str	r3, [r4, #4]
 8006bdc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006be0:	2300      	movs	r3, #0
 8006be2:	6022      	str	r2, [r4, #0]
 8006be4:	9303      	str	r3, [sp, #12]
 8006be6:	ab0a      	add	r3, sp, #40	@ 0x28
 8006be8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006bec:	ab09      	add	r3, sp, #36	@ 0x24
 8006bee:	9300      	str	r3, [sp, #0]
 8006bf0:	6861      	ldr	r1, [r4, #4]
 8006bf2:	ec49 8b10 	vmov	d0, r8, r9
 8006bf6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006bfa:	4628      	mov	r0, r5
 8006bfc:	f7ff fed6 	bl	80069ac <__cvt>
 8006c00:	9b06      	ldr	r3, [sp, #24]
 8006c02:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006c04:	2b47      	cmp	r3, #71	@ 0x47
 8006c06:	4680      	mov	r8, r0
 8006c08:	d129      	bne.n	8006c5e <_printf_float+0x172>
 8006c0a:	1cc8      	adds	r0, r1, #3
 8006c0c:	db02      	blt.n	8006c14 <_printf_float+0x128>
 8006c0e:	6863      	ldr	r3, [r4, #4]
 8006c10:	4299      	cmp	r1, r3
 8006c12:	dd41      	ble.n	8006c98 <_printf_float+0x1ac>
 8006c14:	f1aa 0a02 	sub.w	sl, sl, #2
 8006c18:	fa5f fa8a 	uxtb.w	sl, sl
 8006c1c:	3901      	subs	r1, #1
 8006c1e:	4652      	mov	r2, sl
 8006c20:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006c24:	9109      	str	r1, [sp, #36]	@ 0x24
 8006c26:	f7ff ff26 	bl	8006a76 <__exponent>
 8006c2a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006c2c:	1813      	adds	r3, r2, r0
 8006c2e:	2a01      	cmp	r2, #1
 8006c30:	4681      	mov	r9, r0
 8006c32:	6123      	str	r3, [r4, #16]
 8006c34:	dc02      	bgt.n	8006c3c <_printf_float+0x150>
 8006c36:	6822      	ldr	r2, [r4, #0]
 8006c38:	07d2      	lsls	r2, r2, #31
 8006c3a:	d501      	bpl.n	8006c40 <_printf_float+0x154>
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	6123      	str	r3, [r4, #16]
 8006c40:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d0a2      	beq.n	8006b8e <_printf_float+0xa2>
 8006c48:	232d      	movs	r3, #45	@ 0x2d
 8006c4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c4e:	e79e      	b.n	8006b8e <_printf_float+0xa2>
 8006c50:	9a06      	ldr	r2, [sp, #24]
 8006c52:	2a47      	cmp	r2, #71	@ 0x47
 8006c54:	d1c2      	bne.n	8006bdc <_printf_float+0xf0>
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d1c0      	bne.n	8006bdc <_printf_float+0xf0>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e7bd      	b.n	8006bda <_printf_float+0xee>
 8006c5e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006c62:	d9db      	bls.n	8006c1c <_printf_float+0x130>
 8006c64:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006c68:	d118      	bne.n	8006c9c <_printf_float+0x1b0>
 8006c6a:	2900      	cmp	r1, #0
 8006c6c:	6863      	ldr	r3, [r4, #4]
 8006c6e:	dd0b      	ble.n	8006c88 <_printf_float+0x19c>
 8006c70:	6121      	str	r1, [r4, #16]
 8006c72:	b913      	cbnz	r3, 8006c7a <_printf_float+0x18e>
 8006c74:	6822      	ldr	r2, [r4, #0]
 8006c76:	07d0      	lsls	r0, r2, #31
 8006c78:	d502      	bpl.n	8006c80 <_printf_float+0x194>
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	440b      	add	r3, r1
 8006c7e:	6123      	str	r3, [r4, #16]
 8006c80:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006c82:	f04f 0900 	mov.w	r9, #0
 8006c86:	e7db      	b.n	8006c40 <_printf_float+0x154>
 8006c88:	b913      	cbnz	r3, 8006c90 <_printf_float+0x1a4>
 8006c8a:	6822      	ldr	r2, [r4, #0]
 8006c8c:	07d2      	lsls	r2, r2, #31
 8006c8e:	d501      	bpl.n	8006c94 <_printf_float+0x1a8>
 8006c90:	3302      	adds	r3, #2
 8006c92:	e7f4      	b.n	8006c7e <_printf_float+0x192>
 8006c94:	2301      	movs	r3, #1
 8006c96:	e7f2      	b.n	8006c7e <_printf_float+0x192>
 8006c98:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006c9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c9e:	4299      	cmp	r1, r3
 8006ca0:	db05      	blt.n	8006cae <_printf_float+0x1c2>
 8006ca2:	6823      	ldr	r3, [r4, #0]
 8006ca4:	6121      	str	r1, [r4, #16]
 8006ca6:	07d8      	lsls	r0, r3, #31
 8006ca8:	d5ea      	bpl.n	8006c80 <_printf_float+0x194>
 8006caa:	1c4b      	adds	r3, r1, #1
 8006cac:	e7e7      	b.n	8006c7e <_printf_float+0x192>
 8006cae:	2900      	cmp	r1, #0
 8006cb0:	bfd4      	ite	le
 8006cb2:	f1c1 0202 	rsble	r2, r1, #2
 8006cb6:	2201      	movgt	r2, #1
 8006cb8:	4413      	add	r3, r2
 8006cba:	e7e0      	b.n	8006c7e <_printf_float+0x192>
 8006cbc:	6823      	ldr	r3, [r4, #0]
 8006cbe:	055a      	lsls	r2, r3, #21
 8006cc0:	d407      	bmi.n	8006cd2 <_printf_float+0x1e6>
 8006cc2:	6923      	ldr	r3, [r4, #16]
 8006cc4:	4642      	mov	r2, r8
 8006cc6:	4631      	mov	r1, r6
 8006cc8:	4628      	mov	r0, r5
 8006cca:	47b8      	blx	r7
 8006ccc:	3001      	adds	r0, #1
 8006cce:	d12b      	bne.n	8006d28 <_printf_float+0x23c>
 8006cd0:	e767      	b.n	8006ba2 <_printf_float+0xb6>
 8006cd2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006cd6:	f240 80dd 	bls.w	8006e94 <_printf_float+0x3a8>
 8006cda:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006cde:	2200      	movs	r2, #0
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	f7f9 fef1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ce6:	2800      	cmp	r0, #0
 8006ce8:	d033      	beq.n	8006d52 <_printf_float+0x266>
 8006cea:	4a37      	ldr	r2, [pc, #220]	@ (8006dc8 <_printf_float+0x2dc>)
 8006cec:	2301      	movs	r3, #1
 8006cee:	4631      	mov	r1, r6
 8006cf0:	4628      	mov	r0, r5
 8006cf2:	47b8      	blx	r7
 8006cf4:	3001      	adds	r0, #1
 8006cf6:	f43f af54 	beq.w	8006ba2 <_printf_float+0xb6>
 8006cfa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006cfe:	4543      	cmp	r3, r8
 8006d00:	db02      	blt.n	8006d08 <_printf_float+0x21c>
 8006d02:	6823      	ldr	r3, [r4, #0]
 8006d04:	07d8      	lsls	r0, r3, #31
 8006d06:	d50f      	bpl.n	8006d28 <_printf_float+0x23c>
 8006d08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d0c:	4631      	mov	r1, r6
 8006d0e:	4628      	mov	r0, r5
 8006d10:	47b8      	blx	r7
 8006d12:	3001      	adds	r0, #1
 8006d14:	f43f af45 	beq.w	8006ba2 <_printf_float+0xb6>
 8006d18:	f04f 0900 	mov.w	r9, #0
 8006d1c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006d20:	f104 0a1a 	add.w	sl, r4, #26
 8006d24:	45c8      	cmp	r8, r9
 8006d26:	dc09      	bgt.n	8006d3c <_printf_float+0x250>
 8006d28:	6823      	ldr	r3, [r4, #0]
 8006d2a:	079b      	lsls	r3, r3, #30
 8006d2c:	f100 8103 	bmi.w	8006f36 <_printf_float+0x44a>
 8006d30:	68e0      	ldr	r0, [r4, #12]
 8006d32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d34:	4298      	cmp	r0, r3
 8006d36:	bfb8      	it	lt
 8006d38:	4618      	movlt	r0, r3
 8006d3a:	e734      	b.n	8006ba6 <_printf_float+0xba>
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	4652      	mov	r2, sl
 8006d40:	4631      	mov	r1, r6
 8006d42:	4628      	mov	r0, r5
 8006d44:	47b8      	blx	r7
 8006d46:	3001      	adds	r0, #1
 8006d48:	f43f af2b 	beq.w	8006ba2 <_printf_float+0xb6>
 8006d4c:	f109 0901 	add.w	r9, r9, #1
 8006d50:	e7e8      	b.n	8006d24 <_printf_float+0x238>
 8006d52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	dc39      	bgt.n	8006dcc <_printf_float+0x2e0>
 8006d58:	4a1b      	ldr	r2, [pc, #108]	@ (8006dc8 <_printf_float+0x2dc>)
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	4631      	mov	r1, r6
 8006d5e:	4628      	mov	r0, r5
 8006d60:	47b8      	blx	r7
 8006d62:	3001      	adds	r0, #1
 8006d64:	f43f af1d 	beq.w	8006ba2 <_printf_float+0xb6>
 8006d68:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006d6c:	ea59 0303 	orrs.w	r3, r9, r3
 8006d70:	d102      	bne.n	8006d78 <_printf_float+0x28c>
 8006d72:	6823      	ldr	r3, [r4, #0]
 8006d74:	07d9      	lsls	r1, r3, #31
 8006d76:	d5d7      	bpl.n	8006d28 <_printf_float+0x23c>
 8006d78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d7c:	4631      	mov	r1, r6
 8006d7e:	4628      	mov	r0, r5
 8006d80:	47b8      	blx	r7
 8006d82:	3001      	adds	r0, #1
 8006d84:	f43f af0d 	beq.w	8006ba2 <_printf_float+0xb6>
 8006d88:	f04f 0a00 	mov.w	sl, #0
 8006d8c:	f104 0b1a 	add.w	fp, r4, #26
 8006d90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d92:	425b      	negs	r3, r3
 8006d94:	4553      	cmp	r3, sl
 8006d96:	dc01      	bgt.n	8006d9c <_printf_float+0x2b0>
 8006d98:	464b      	mov	r3, r9
 8006d9a:	e793      	b.n	8006cc4 <_printf_float+0x1d8>
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	465a      	mov	r2, fp
 8006da0:	4631      	mov	r1, r6
 8006da2:	4628      	mov	r0, r5
 8006da4:	47b8      	blx	r7
 8006da6:	3001      	adds	r0, #1
 8006da8:	f43f aefb 	beq.w	8006ba2 <_printf_float+0xb6>
 8006dac:	f10a 0a01 	add.w	sl, sl, #1
 8006db0:	e7ee      	b.n	8006d90 <_printf_float+0x2a4>
 8006db2:	bf00      	nop
 8006db4:	7fefffff 	.word	0x7fefffff
 8006db8:	080097e0 	.word	0x080097e0
 8006dbc:	080097e4 	.word	0x080097e4
 8006dc0:	080097e8 	.word	0x080097e8
 8006dc4:	080097ec 	.word	0x080097ec
 8006dc8:	080097f0 	.word	0x080097f0
 8006dcc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006dce:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006dd2:	4553      	cmp	r3, sl
 8006dd4:	bfa8      	it	ge
 8006dd6:	4653      	movge	r3, sl
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	4699      	mov	r9, r3
 8006ddc:	dc36      	bgt.n	8006e4c <_printf_float+0x360>
 8006dde:	f04f 0b00 	mov.w	fp, #0
 8006de2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006de6:	f104 021a 	add.w	r2, r4, #26
 8006dea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006dec:	9306      	str	r3, [sp, #24]
 8006dee:	eba3 0309 	sub.w	r3, r3, r9
 8006df2:	455b      	cmp	r3, fp
 8006df4:	dc31      	bgt.n	8006e5a <_printf_float+0x36e>
 8006df6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006df8:	459a      	cmp	sl, r3
 8006dfa:	dc3a      	bgt.n	8006e72 <_printf_float+0x386>
 8006dfc:	6823      	ldr	r3, [r4, #0]
 8006dfe:	07da      	lsls	r2, r3, #31
 8006e00:	d437      	bmi.n	8006e72 <_printf_float+0x386>
 8006e02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e04:	ebaa 0903 	sub.w	r9, sl, r3
 8006e08:	9b06      	ldr	r3, [sp, #24]
 8006e0a:	ebaa 0303 	sub.w	r3, sl, r3
 8006e0e:	4599      	cmp	r9, r3
 8006e10:	bfa8      	it	ge
 8006e12:	4699      	movge	r9, r3
 8006e14:	f1b9 0f00 	cmp.w	r9, #0
 8006e18:	dc33      	bgt.n	8006e82 <_printf_float+0x396>
 8006e1a:	f04f 0800 	mov.w	r8, #0
 8006e1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e22:	f104 0b1a 	add.w	fp, r4, #26
 8006e26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e28:	ebaa 0303 	sub.w	r3, sl, r3
 8006e2c:	eba3 0309 	sub.w	r3, r3, r9
 8006e30:	4543      	cmp	r3, r8
 8006e32:	f77f af79 	ble.w	8006d28 <_printf_float+0x23c>
 8006e36:	2301      	movs	r3, #1
 8006e38:	465a      	mov	r2, fp
 8006e3a:	4631      	mov	r1, r6
 8006e3c:	4628      	mov	r0, r5
 8006e3e:	47b8      	blx	r7
 8006e40:	3001      	adds	r0, #1
 8006e42:	f43f aeae 	beq.w	8006ba2 <_printf_float+0xb6>
 8006e46:	f108 0801 	add.w	r8, r8, #1
 8006e4a:	e7ec      	b.n	8006e26 <_printf_float+0x33a>
 8006e4c:	4642      	mov	r2, r8
 8006e4e:	4631      	mov	r1, r6
 8006e50:	4628      	mov	r0, r5
 8006e52:	47b8      	blx	r7
 8006e54:	3001      	adds	r0, #1
 8006e56:	d1c2      	bne.n	8006dde <_printf_float+0x2f2>
 8006e58:	e6a3      	b.n	8006ba2 <_printf_float+0xb6>
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	4631      	mov	r1, r6
 8006e5e:	4628      	mov	r0, r5
 8006e60:	9206      	str	r2, [sp, #24]
 8006e62:	47b8      	blx	r7
 8006e64:	3001      	adds	r0, #1
 8006e66:	f43f ae9c 	beq.w	8006ba2 <_printf_float+0xb6>
 8006e6a:	9a06      	ldr	r2, [sp, #24]
 8006e6c:	f10b 0b01 	add.w	fp, fp, #1
 8006e70:	e7bb      	b.n	8006dea <_printf_float+0x2fe>
 8006e72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e76:	4631      	mov	r1, r6
 8006e78:	4628      	mov	r0, r5
 8006e7a:	47b8      	blx	r7
 8006e7c:	3001      	adds	r0, #1
 8006e7e:	d1c0      	bne.n	8006e02 <_printf_float+0x316>
 8006e80:	e68f      	b.n	8006ba2 <_printf_float+0xb6>
 8006e82:	9a06      	ldr	r2, [sp, #24]
 8006e84:	464b      	mov	r3, r9
 8006e86:	4442      	add	r2, r8
 8006e88:	4631      	mov	r1, r6
 8006e8a:	4628      	mov	r0, r5
 8006e8c:	47b8      	blx	r7
 8006e8e:	3001      	adds	r0, #1
 8006e90:	d1c3      	bne.n	8006e1a <_printf_float+0x32e>
 8006e92:	e686      	b.n	8006ba2 <_printf_float+0xb6>
 8006e94:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006e98:	f1ba 0f01 	cmp.w	sl, #1
 8006e9c:	dc01      	bgt.n	8006ea2 <_printf_float+0x3b6>
 8006e9e:	07db      	lsls	r3, r3, #31
 8006ea0:	d536      	bpl.n	8006f10 <_printf_float+0x424>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	4642      	mov	r2, r8
 8006ea6:	4631      	mov	r1, r6
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	47b8      	blx	r7
 8006eac:	3001      	adds	r0, #1
 8006eae:	f43f ae78 	beq.w	8006ba2 <_printf_float+0xb6>
 8006eb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006eb6:	4631      	mov	r1, r6
 8006eb8:	4628      	mov	r0, r5
 8006eba:	47b8      	blx	r7
 8006ebc:	3001      	adds	r0, #1
 8006ebe:	f43f ae70 	beq.w	8006ba2 <_printf_float+0xb6>
 8006ec2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	2300      	movs	r3, #0
 8006eca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ece:	f7f9 fdfb 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ed2:	b9c0      	cbnz	r0, 8006f06 <_printf_float+0x41a>
 8006ed4:	4653      	mov	r3, sl
 8006ed6:	f108 0201 	add.w	r2, r8, #1
 8006eda:	4631      	mov	r1, r6
 8006edc:	4628      	mov	r0, r5
 8006ede:	47b8      	blx	r7
 8006ee0:	3001      	adds	r0, #1
 8006ee2:	d10c      	bne.n	8006efe <_printf_float+0x412>
 8006ee4:	e65d      	b.n	8006ba2 <_printf_float+0xb6>
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	465a      	mov	r2, fp
 8006eea:	4631      	mov	r1, r6
 8006eec:	4628      	mov	r0, r5
 8006eee:	47b8      	blx	r7
 8006ef0:	3001      	adds	r0, #1
 8006ef2:	f43f ae56 	beq.w	8006ba2 <_printf_float+0xb6>
 8006ef6:	f108 0801 	add.w	r8, r8, #1
 8006efa:	45d0      	cmp	r8, sl
 8006efc:	dbf3      	blt.n	8006ee6 <_printf_float+0x3fa>
 8006efe:	464b      	mov	r3, r9
 8006f00:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006f04:	e6df      	b.n	8006cc6 <_printf_float+0x1da>
 8006f06:	f04f 0800 	mov.w	r8, #0
 8006f0a:	f104 0b1a 	add.w	fp, r4, #26
 8006f0e:	e7f4      	b.n	8006efa <_printf_float+0x40e>
 8006f10:	2301      	movs	r3, #1
 8006f12:	4642      	mov	r2, r8
 8006f14:	e7e1      	b.n	8006eda <_printf_float+0x3ee>
 8006f16:	2301      	movs	r3, #1
 8006f18:	464a      	mov	r2, r9
 8006f1a:	4631      	mov	r1, r6
 8006f1c:	4628      	mov	r0, r5
 8006f1e:	47b8      	blx	r7
 8006f20:	3001      	adds	r0, #1
 8006f22:	f43f ae3e 	beq.w	8006ba2 <_printf_float+0xb6>
 8006f26:	f108 0801 	add.w	r8, r8, #1
 8006f2a:	68e3      	ldr	r3, [r4, #12]
 8006f2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f2e:	1a5b      	subs	r3, r3, r1
 8006f30:	4543      	cmp	r3, r8
 8006f32:	dcf0      	bgt.n	8006f16 <_printf_float+0x42a>
 8006f34:	e6fc      	b.n	8006d30 <_printf_float+0x244>
 8006f36:	f04f 0800 	mov.w	r8, #0
 8006f3a:	f104 0919 	add.w	r9, r4, #25
 8006f3e:	e7f4      	b.n	8006f2a <_printf_float+0x43e>

08006f40 <_printf_common>:
 8006f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f44:	4616      	mov	r6, r2
 8006f46:	4698      	mov	r8, r3
 8006f48:	688a      	ldr	r2, [r1, #8]
 8006f4a:	690b      	ldr	r3, [r1, #16]
 8006f4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f50:	4293      	cmp	r3, r2
 8006f52:	bfb8      	it	lt
 8006f54:	4613      	movlt	r3, r2
 8006f56:	6033      	str	r3, [r6, #0]
 8006f58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006f5c:	4607      	mov	r7, r0
 8006f5e:	460c      	mov	r4, r1
 8006f60:	b10a      	cbz	r2, 8006f66 <_printf_common+0x26>
 8006f62:	3301      	adds	r3, #1
 8006f64:	6033      	str	r3, [r6, #0]
 8006f66:	6823      	ldr	r3, [r4, #0]
 8006f68:	0699      	lsls	r1, r3, #26
 8006f6a:	bf42      	ittt	mi
 8006f6c:	6833      	ldrmi	r3, [r6, #0]
 8006f6e:	3302      	addmi	r3, #2
 8006f70:	6033      	strmi	r3, [r6, #0]
 8006f72:	6825      	ldr	r5, [r4, #0]
 8006f74:	f015 0506 	ands.w	r5, r5, #6
 8006f78:	d106      	bne.n	8006f88 <_printf_common+0x48>
 8006f7a:	f104 0a19 	add.w	sl, r4, #25
 8006f7e:	68e3      	ldr	r3, [r4, #12]
 8006f80:	6832      	ldr	r2, [r6, #0]
 8006f82:	1a9b      	subs	r3, r3, r2
 8006f84:	42ab      	cmp	r3, r5
 8006f86:	dc26      	bgt.n	8006fd6 <_printf_common+0x96>
 8006f88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006f8c:	6822      	ldr	r2, [r4, #0]
 8006f8e:	3b00      	subs	r3, #0
 8006f90:	bf18      	it	ne
 8006f92:	2301      	movne	r3, #1
 8006f94:	0692      	lsls	r2, r2, #26
 8006f96:	d42b      	bmi.n	8006ff0 <_printf_common+0xb0>
 8006f98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006f9c:	4641      	mov	r1, r8
 8006f9e:	4638      	mov	r0, r7
 8006fa0:	47c8      	blx	r9
 8006fa2:	3001      	adds	r0, #1
 8006fa4:	d01e      	beq.n	8006fe4 <_printf_common+0xa4>
 8006fa6:	6823      	ldr	r3, [r4, #0]
 8006fa8:	6922      	ldr	r2, [r4, #16]
 8006faa:	f003 0306 	and.w	r3, r3, #6
 8006fae:	2b04      	cmp	r3, #4
 8006fb0:	bf02      	ittt	eq
 8006fb2:	68e5      	ldreq	r5, [r4, #12]
 8006fb4:	6833      	ldreq	r3, [r6, #0]
 8006fb6:	1aed      	subeq	r5, r5, r3
 8006fb8:	68a3      	ldr	r3, [r4, #8]
 8006fba:	bf0c      	ite	eq
 8006fbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fc0:	2500      	movne	r5, #0
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	bfc4      	itt	gt
 8006fc6:	1a9b      	subgt	r3, r3, r2
 8006fc8:	18ed      	addgt	r5, r5, r3
 8006fca:	2600      	movs	r6, #0
 8006fcc:	341a      	adds	r4, #26
 8006fce:	42b5      	cmp	r5, r6
 8006fd0:	d11a      	bne.n	8007008 <_printf_common+0xc8>
 8006fd2:	2000      	movs	r0, #0
 8006fd4:	e008      	b.n	8006fe8 <_printf_common+0xa8>
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	4652      	mov	r2, sl
 8006fda:	4641      	mov	r1, r8
 8006fdc:	4638      	mov	r0, r7
 8006fde:	47c8      	blx	r9
 8006fe0:	3001      	adds	r0, #1
 8006fe2:	d103      	bne.n	8006fec <_printf_common+0xac>
 8006fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fec:	3501      	adds	r5, #1
 8006fee:	e7c6      	b.n	8006f7e <_printf_common+0x3e>
 8006ff0:	18e1      	adds	r1, r4, r3
 8006ff2:	1c5a      	adds	r2, r3, #1
 8006ff4:	2030      	movs	r0, #48	@ 0x30
 8006ff6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006ffa:	4422      	add	r2, r4
 8006ffc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007000:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007004:	3302      	adds	r3, #2
 8007006:	e7c7      	b.n	8006f98 <_printf_common+0x58>
 8007008:	2301      	movs	r3, #1
 800700a:	4622      	mov	r2, r4
 800700c:	4641      	mov	r1, r8
 800700e:	4638      	mov	r0, r7
 8007010:	47c8      	blx	r9
 8007012:	3001      	adds	r0, #1
 8007014:	d0e6      	beq.n	8006fe4 <_printf_common+0xa4>
 8007016:	3601      	adds	r6, #1
 8007018:	e7d9      	b.n	8006fce <_printf_common+0x8e>
	...

0800701c <_printf_i>:
 800701c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007020:	7e0f      	ldrb	r7, [r1, #24]
 8007022:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007024:	2f78      	cmp	r7, #120	@ 0x78
 8007026:	4691      	mov	r9, r2
 8007028:	4680      	mov	r8, r0
 800702a:	460c      	mov	r4, r1
 800702c:	469a      	mov	sl, r3
 800702e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007032:	d807      	bhi.n	8007044 <_printf_i+0x28>
 8007034:	2f62      	cmp	r7, #98	@ 0x62
 8007036:	d80a      	bhi.n	800704e <_printf_i+0x32>
 8007038:	2f00      	cmp	r7, #0
 800703a:	f000 80d2 	beq.w	80071e2 <_printf_i+0x1c6>
 800703e:	2f58      	cmp	r7, #88	@ 0x58
 8007040:	f000 80b9 	beq.w	80071b6 <_printf_i+0x19a>
 8007044:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007048:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800704c:	e03a      	b.n	80070c4 <_printf_i+0xa8>
 800704e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007052:	2b15      	cmp	r3, #21
 8007054:	d8f6      	bhi.n	8007044 <_printf_i+0x28>
 8007056:	a101      	add	r1, pc, #4	@ (adr r1, 800705c <_printf_i+0x40>)
 8007058:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800705c:	080070b5 	.word	0x080070b5
 8007060:	080070c9 	.word	0x080070c9
 8007064:	08007045 	.word	0x08007045
 8007068:	08007045 	.word	0x08007045
 800706c:	08007045 	.word	0x08007045
 8007070:	08007045 	.word	0x08007045
 8007074:	080070c9 	.word	0x080070c9
 8007078:	08007045 	.word	0x08007045
 800707c:	08007045 	.word	0x08007045
 8007080:	08007045 	.word	0x08007045
 8007084:	08007045 	.word	0x08007045
 8007088:	080071c9 	.word	0x080071c9
 800708c:	080070f3 	.word	0x080070f3
 8007090:	08007183 	.word	0x08007183
 8007094:	08007045 	.word	0x08007045
 8007098:	08007045 	.word	0x08007045
 800709c:	080071eb 	.word	0x080071eb
 80070a0:	08007045 	.word	0x08007045
 80070a4:	080070f3 	.word	0x080070f3
 80070a8:	08007045 	.word	0x08007045
 80070ac:	08007045 	.word	0x08007045
 80070b0:	0800718b 	.word	0x0800718b
 80070b4:	6833      	ldr	r3, [r6, #0]
 80070b6:	1d1a      	adds	r2, r3, #4
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	6032      	str	r2, [r6, #0]
 80070bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80070c4:	2301      	movs	r3, #1
 80070c6:	e09d      	b.n	8007204 <_printf_i+0x1e8>
 80070c8:	6833      	ldr	r3, [r6, #0]
 80070ca:	6820      	ldr	r0, [r4, #0]
 80070cc:	1d19      	adds	r1, r3, #4
 80070ce:	6031      	str	r1, [r6, #0]
 80070d0:	0606      	lsls	r6, r0, #24
 80070d2:	d501      	bpl.n	80070d8 <_printf_i+0xbc>
 80070d4:	681d      	ldr	r5, [r3, #0]
 80070d6:	e003      	b.n	80070e0 <_printf_i+0xc4>
 80070d8:	0645      	lsls	r5, r0, #25
 80070da:	d5fb      	bpl.n	80070d4 <_printf_i+0xb8>
 80070dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80070e0:	2d00      	cmp	r5, #0
 80070e2:	da03      	bge.n	80070ec <_printf_i+0xd0>
 80070e4:	232d      	movs	r3, #45	@ 0x2d
 80070e6:	426d      	negs	r5, r5
 80070e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070ec:	4859      	ldr	r0, [pc, #356]	@ (8007254 <_printf_i+0x238>)
 80070ee:	230a      	movs	r3, #10
 80070f0:	e011      	b.n	8007116 <_printf_i+0xfa>
 80070f2:	6821      	ldr	r1, [r4, #0]
 80070f4:	6833      	ldr	r3, [r6, #0]
 80070f6:	0608      	lsls	r0, r1, #24
 80070f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80070fc:	d402      	bmi.n	8007104 <_printf_i+0xe8>
 80070fe:	0649      	lsls	r1, r1, #25
 8007100:	bf48      	it	mi
 8007102:	b2ad      	uxthmi	r5, r5
 8007104:	2f6f      	cmp	r7, #111	@ 0x6f
 8007106:	4853      	ldr	r0, [pc, #332]	@ (8007254 <_printf_i+0x238>)
 8007108:	6033      	str	r3, [r6, #0]
 800710a:	bf14      	ite	ne
 800710c:	230a      	movne	r3, #10
 800710e:	2308      	moveq	r3, #8
 8007110:	2100      	movs	r1, #0
 8007112:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007116:	6866      	ldr	r6, [r4, #4]
 8007118:	60a6      	str	r6, [r4, #8]
 800711a:	2e00      	cmp	r6, #0
 800711c:	bfa2      	ittt	ge
 800711e:	6821      	ldrge	r1, [r4, #0]
 8007120:	f021 0104 	bicge.w	r1, r1, #4
 8007124:	6021      	strge	r1, [r4, #0]
 8007126:	b90d      	cbnz	r5, 800712c <_printf_i+0x110>
 8007128:	2e00      	cmp	r6, #0
 800712a:	d04b      	beq.n	80071c4 <_printf_i+0x1a8>
 800712c:	4616      	mov	r6, r2
 800712e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007132:	fb03 5711 	mls	r7, r3, r1, r5
 8007136:	5dc7      	ldrb	r7, [r0, r7]
 8007138:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800713c:	462f      	mov	r7, r5
 800713e:	42bb      	cmp	r3, r7
 8007140:	460d      	mov	r5, r1
 8007142:	d9f4      	bls.n	800712e <_printf_i+0x112>
 8007144:	2b08      	cmp	r3, #8
 8007146:	d10b      	bne.n	8007160 <_printf_i+0x144>
 8007148:	6823      	ldr	r3, [r4, #0]
 800714a:	07df      	lsls	r7, r3, #31
 800714c:	d508      	bpl.n	8007160 <_printf_i+0x144>
 800714e:	6923      	ldr	r3, [r4, #16]
 8007150:	6861      	ldr	r1, [r4, #4]
 8007152:	4299      	cmp	r1, r3
 8007154:	bfde      	ittt	le
 8007156:	2330      	movle	r3, #48	@ 0x30
 8007158:	f806 3c01 	strble.w	r3, [r6, #-1]
 800715c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007160:	1b92      	subs	r2, r2, r6
 8007162:	6122      	str	r2, [r4, #16]
 8007164:	f8cd a000 	str.w	sl, [sp]
 8007168:	464b      	mov	r3, r9
 800716a:	aa03      	add	r2, sp, #12
 800716c:	4621      	mov	r1, r4
 800716e:	4640      	mov	r0, r8
 8007170:	f7ff fee6 	bl	8006f40 <_printf_common>
 8007174:	3001      	adds	r0, #1
 8007176:	d14a      	bne.n	800720e <_printf_i+0x1f2>
 8007178:	f04f 30ff 	mov.w	r0, #4294967295
 800717c:	b004      	add	sp, #16
 800717e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007182:	6823      	ldr	r3, [r4, #0]
 8007184:	f043 0320 	orr.w	r3, r3, #32
 8007188:	6023      	str	r3, [r4, #0]
 800718a:	4833      	ldr	r0, [pc, #204]	@ (8007258 <_printf_i+0x23c>)
 800718c:	2778      	movs	r7, #120	@ 0x78
 800718e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007192:	6823      	ldr	r3, [r4, #0]
 8007194:	6831      	ldr	r1, [r6, #0]
 8007196:	061f      	lsls	r7, r3, #24
 8007198:	f851 5b04 	ldr.w	r5, [r1], #4
 800719c:	d402      	bmi.n	80071a4 <_printf_i+0x188>
 800719e:	065f      	lsls	r7, r3, #25
 80071a0:	bf48      	it	mi
 80071a2:	b2ad      	uxthmi	r5, r5
 80071a4:	6031      	str	r1, [r6, #0]
 80071a6:	07d9      	lsls	r1, r3, #31
 80071a8:	bf44      	itt	mi
 80071aa:	f043 0320 	orrmi.w	r3, r3, #32
 80071ae:	6023      	strmi	r3, [r4, #0]
 80071b0:	b11d      	cbz	r5, 80071ba <_printf_i+0x19e>
 80071b2:	2310      	movs	r3, #16
 80071b4:	e7ac      	b.n	8007110 <_printf_i+0xf4>
 80071b6:	4827      	ldr	r0, [pc, #156]	@ (8007254 <_printf_i+0x238>)
 80071b8:	e7e9      	b.n	800718e <_printf_i+0x172>
 80071ba:	6823      	ldr	r3, [r4, #0]
 80071bc:	f023 0320 	bic.w	r3, r3, #32
 80071c0:	6023      	str	r3, [r4, #0]
 80071c2:	e7f6      	b.n	80071b2 <_printf_i+0x196>
 80071c4:	4616      	mov	r6, r2
 80071c6:	e7bd      	b.n	8007144 <_printf_i+0x128>
 80071c8:	6833      	ldr	r3, [r6, #0]
 80071ca:	6825      	ldr	r5, [r4, #0]
 80071cc:	6961      	ldr	r1, [r4, #20]
 80071ce:	1d18      	adds	r0, r3, #4
 80071d0:	6030      	str	r0, [r6, #0]
 80071d2:	062e      	lsls	r6, r5, #24
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	d501      	bpl.n	80071dc <_printf_i+0x1c0>
 80071d8:	6019      	str	r1, [r3, #0]
 80071da:	e002      	b.n	80071e2 <_printf_i+0x1c6>
 80071dc:	0668      	lsls	r0, r5, #25
 80071de:	d5fb      	bpl.n	80071d8 <_printf_i+0x1bc>
 80071e0:	8019      	strh	r1, [r3, #0]
 80071e2:	2300      	movs	r3, #0
 80071e4:	6123      	str	r3, [r4, #16]
 80071e6:	4616      	mov	r6, r2
 80071e8:	e7bc      	b.n	8007164 <_printf_i+0x148>
 80071ea:	6833      	ldr	r3, [r6, #0]
 80071ec:	1d1a      	adds	r2, r3, #4
 80071ee:	6032      	str	r2, [r6, #0]
 80071f0:	681e      	ldr	r6, [r3, #0]
 80071f2:	6862      	ldr	r2, [r4, #4]
 80071f4:	2100      	movs	r1, #0
 80071f6:	4630      	mov	r0, r6
 80071f8:	f7f8 ffea 	bl	80001d0 <memchr>
 80071fc:	b108      	cbz	r0, 8007202 <_printf_i+0x1e6>
 80071fe:	1b80      	subs	r0, r0, r6
 8007200:	6060      	str	r0, [r4, #4]
 8007202:	6863      	ldr	r3, [r4, #4]
 8007204:	6123      	str	r3, [r4, #16]
 8007206:	2300      	movs	r3, #0
 8007208:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800720c:	e7aa      	b.n	8007164 <_printf_i+0x148>
 800720e:	6923      	ldr	r3, [r4, #16]
 8007210:	4632      	mov	r2, r6
 8007212:	4649      	mov	r1, r9
 8007214:	4640      	mov	r0, r8
 8007216:	47d0      	blx	sl
 8007218:	3001      	adds	r0, #1
 800721a:	d0ad      	beq.n	8007178 <_printf_i+0x15c>
 800721c:	6823      	ldr	r3, [r4, #0]
 800721e:	079b      	lsls	r3, r3, #30
 8007220:	d413      	bmi.n	800724a <_printf_i+0x22e>
 8007222:	68e0      	ldr	r0, [r4, #12]
 8007224:	9b03      	ldr	r3, [sp, #12]
 8007226:	4298      	cmp	r0, r3
 8007228:	bfb8      	it	lt
 800722a:	4618      	movlt	r0, r3
 800722c:	e7a6      	b.n	800717c <_printf_i+0x160>
 800722e:	2301      	movs	r3, #1
 8007230:	4632      	mov	r2, r6
 8007232:	4649      	mov	r1, r9
 8007234:	4640      	mov	r0, r8
 8007236:	47d0      	blx	sl
 8007238:	3001      	adds	r0, #1
 800723a:	d09d      	beq.n	8007178 <_printf_i+0x15c>
 800723c:	3501      	adds	r5, #1
 800723e:	68e3      	ldr	r3, [r4, #12]
 8007240:	9903      	ldr	r1, [sp, #12]
 8007242:	1a5b      	subs	r3, r3, r1
 8007244:	42ab      	cmp	r3, r5
 8007246:	dcf2      	bgt.n	800722e <_printf_i+0x212>
 8007248:	e7eb      	b.n	8007222 <_printf_i+0x206>
 800724a:	2500      	movs	r5, #0
 800724c:	f104 0619 	add.w	r6, r4, #25
 8007250:	e7f5      	b.n	800723e <_printf_i+0x222>
 8007252:	bf00      	nop
 8007254:	080097f2 	.word	0x080097f2
 8007258:	08009803 	.word	0x08009803

0800725c <std>:
 800725c:	2300      	movs	r3, #0
 800725e:	b510      	push	{r4, lr}
 8007260:	4604      	mov	r4, r0
 8007262:	e9c0 3300 	strd	r3, r3, [r0]
 8007266:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800726a:	6083      	str	r3, [r0, #8]
 800726c:	8181      	strh	r1, [r0, #12]
 800726e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007270:	81c2      	strh	r2, [r0, #14]
 8007272:	6183      	str	r3, [r0, #24]
 8007274:	4619      	mov	r1, r3
 8007276:	2208      	movs	r2, #8
 8007278:	305c      	adds	r0, #92	@ 0x5c
 800727a:	f000 f948 	bl	800750e <memset>
 800727e:	4b0d      	ldr	r3, [pc, #52]	@ (80072b4 <std+0x58>)
 8007280:	6263      	str	r3, [r4, #36]	@ 0x24
 8007282:	4b0d      	ldr	r3, [pc, #52]	@ (80072b8 <std+0x5c>)
 8007284:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007286:	4b0d      	ldr	r3, [pc, #52]	@ (80072bc <std+0x60>)
 8007288:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800728a:	4b0d      	ldr	r3, [pc, #52]	@ (80072c0 <std+0x64>)
 800728c:	6323      	str	r3, [r4, #48]	@ 0x30
 800728e:	4b0d      	ldr	r3, [pc, #52]	@ (80072c4 <std+0x68>)
 8007290:	6224      	str	r4, [r4, #32]
 8007292:	429c      	cmp	r4, r3
 8007294:	d006      	beq.n	80072a4 <std+0x48>
 8007296:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800729a:	4294      	cmp	r4, r2
 800729c:	d002      	beq.n	80072a4 <std+0x48>
 800729e:	33d0      	adds	r3, #208	@ 0xd0
 80072a0:	429c      	cmp	r4, r3
 80072a2:	d105      	bne.n	80072b0 <std+0x54>
 80072a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80072a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072ac:	f000 b9ac 	b.w	8007608 <__retarget_lock_init_recursive>
 80072b0:	bd10      	pop	{r4, pc}
 80072b2:	bf00      	nop
 80072b4:	08007489 	.word	0x08007489
 80072b8:	080074ab 	.word	0x080074ab
 80072bc:	080074e3 	.word	0x080074e3
 80072c0:	08007507 	.word	0x08007507
 80072c4:	20000498 	.word	0x20000498

080072c8 <stdio_exit_handler>:
 80072c8:	4a02      	ldr	r2, [pc, #8]	@ (80072d4 <stdio_exit_handler+0xc>)
 80072ca:	4903      	ldr	r1, [pc, #12]	@ (80072d8 <stdio_exit_handler+0x10>)
 80072cc:	4803      	ldr	r0, [pc, #12]	@ (80072dc <stdio_exit_handler+0x14>)
 80072ce:	f000 b869 	b.w	80073a4 <_fwalk_sglue>
 80072d2:	bf00      	nop
 80072d4:	20000020 	.word	0x20000020
 80072d8:	08008f65 	.word	0x08008f65
 80072dc:	20000030 	.word	0x20000030

080072e0 <cleanup_stdio>:
 80072e0:	6841      	ldr	r1, [r0, #4]
 80072e2:	4b0c      	ldr	r3, [pc, #48]	@ (8007314 <cleanup_stdio+0x34>)
 80072e4:	4299      	cmp	r1, r3
 80072e6:	b510      	push	{r4, lr}
 80072e8:	4604      	mov	r4, r0
 80072ea:	d001      	beq.n	80072f0 <cleanup_stdio+0x10>
 80072ec:	f001 fe3a 	bl	8008f64 <_fflush_r>
 80072f0:	68a1      	ldr	r1, [r4, #8]
 80072f2:	4b09      	ldr	r3, [pc, #36]	@ (8007318 <cleanup_stdio+0x38>)
 80072f4:	4299      	cmp	r1, r3
 80072f6:	d002      	beq.n	80072fe <cleanup_stdio+0x1e>
 80072f8:	4620      	mov	r0, r4
 80072fa:	f001 fe33 	bl	8008f64 <_fflush_r>
 80072fe:	68e1      	ldr	r1, [r4, #12]
 8007300:	4b06      	ldr	r3, [pc, #24]	@ (800731c <cleanup_stdio+0x3c>)
 8007302:	4299      	cmp	r1, r3
 8007304:	d004      	beq.n	8007310 <cleanup_stdio+0x30>
 8007306:	4620      	mov	r0, r4
 8007308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800730c:	f001 be2a 	b.w	8008f64 <_fflush_r>
 8007310:	bd10      	pop	{r4, pc}
 8007312:	bf00      	nop
 8007314:	20000498 	.word	0x20000498
 8007318:	20000500 	.word	0x20000500
 800731c:	20000568 	.word	0x20000568

08007320 <global_stdio_init.part.0>:
 8007320:	b510      	push	{r4, lr}
 8007322:	4b0b      	ldr	r3, [pc, #44]	@ (8007350 <global_stdio_init.part.0+0x30>)
 8007324:	4c0b      	ldr	r4, [pc, #44]	@ (8007354 <global_stdio_init.part.0+0x34>)
 8007326:	4a0c      	ldr	r2, [pc, #48]	@ (8007358 <global_stdio_init.part.0+0x38>)
 8007328:	601a      	str	r2, [r3, #0]
 800732a:	4620      	mov	r0, r4
 800732c:	2200      	movs	r2, #0
 800732e:	2104      	movs	r1, #4
 8007330:	f7ff ff94 	bl	800725c <std>
 8007334:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007338:	2201      	movs	r2, #1
 800733a:	2109      	movs	r1, #9
 800733c:	f7ff ff8e 	bl	800725c <std>
 8007340:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007344:	2202      	movs	r2, #2
 8007346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800734a:	2112      	movs	r1, #18
 800734c:	f7ff bf86 	b.w	800725c <std>
 8007350:	200005d0 	.word	0x200005d0
 8007354:	20000498 	.word	0x20000498
 8007358:	080072c9 	.word	0x080072c9

0800735c <__sfp_lock_acquire>:
 800735c:	4801      	ldr	r0, [pc, #4]	@ (8007364 <__sfp_lock_acquire+0x8>)
 800735e:	f000 b954 	b.w	800760a <__retarget_lock_acquire_recursive>
 8007362:	bf00      	nop
 8007364:	200005d9 	.word	0x200005d9

08007368 <__sfp_lock_release>:
 8007368:	4801      	ldr	r0, [pc, #4]	@ (8007370 <__sfp_lock_release+0x8>)
 800736a:	f000 b94f 	b.w	800760c <__retarget_lock_release_recursive>
 800736e:	bf00      	nop
 8007370:	200005d9 	.word	0x200005d9

08007374 <__sinit>:
 8007374:	b510      	push	{r4, lr}
 8007376:	4604      	mov	r4, r0
 8007378:	f7ff fff0 	bl	800735c <__sfp_lock_acquire>
 800737c:	6a23      	ldr	r3, [r4, #32]
 800737e:	b11b      	cbz	r3, 8007388 <__sinit+0x14>
 8007380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007384:	f7ff bff0 	b.w	8007368 <__sfp_lock_release>
 8007388:	4b04      	ldr	r3, [pc, #16]	@ (800739c <__sinit+0x28>)
 800738a:	6223      	str	r3, [r4, #32]
 800738c:	4b04      	ldr	r3, [pc, #16]	@ (80073a0 <__sinit+0x2c>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1f5      	bne.n	8007380 <__sinit+0xc>
 8007394:	f7ff ffc4 	bl	8007320 <global_stdio_init.part.0>
 8007398:	e7f2      	b.n	8007380 <__sinit+0xc>
 800739a:	bf00      	nop
 800739c:	080072e1 	.word	0x080072e1
 80073a0:	200005d0 	.word	0x200005d0

080073a4 <_fwalk_sglue>:
 80073a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073a8:	4607      	mov	r7, r0
 80073aa:	4688      	mov	r8, r1
 80073ac:	4614      	mov	r4, r2
 80073ae:	2600      	movs	r6, #0
 80073b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073b4:	f1b9 0901 	subs.w	r9, r9, #1
 80073b8:	d505      	bpl.n	80073c6 <_fwalk_sglue+0x22>
 80073ba:	6824      	ldr	r4, [r4, #0]
 80073bc:	2c00      	cmp	r4, #0
 80073be:	d1f7      	bne.n	80073b0 <_fwalk_sglue+0xc>
 80073c0:	4630      	mov	r0, r6
 80073c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073c6:	89ab      	ldrh	r3, [r5, #12]
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d907      	bls.n	80073dc <_fwalk_sglue+0x38>
 80073cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073d0:	3301      	adds	r3, #1
 80073d2:	d003      	beq.n	80073dc <_fwalk_sglue+0x38>
 80073d4:	4629      	mov	r1, r5
 80073d6:	4638      	mov	r0, r7
 80073d8:	47c0      	blx	r8
 80073da:	4306      	orrs	r6, r0
 80073dc:	3568      	adds	r5, #104	@ 0x68
 80073de:	e7e9      	b.n	80073b4 <_fwalk_sglue+0x10>

080073e0 <sniprintf>:
 80073e0:	b40c      	push	{r2, r3}
 80073e2:	b530      	push	{r4, r5, lr}
 80073e4:	4b17      	ldr	r3, [pc, #92]	@ (8007444 <sniprintf+0x64>)
 80073e6:	1e0c      	subs	r4, r1, #0
 80073e8:	681d      	ldr	r5, [r3, #0]
 80073ea:	b09d      	sub	sp, #116	@ 0x74
 80073ec:	da08      	bge.n	8007400 <sniprintf+0x20>
 80073ee:	238b      	movs	r3, #139	@ 0x8b
 80073f0:	602b      	str	r3, [r5, #0]
 80073f2:	f04f 30ff 	mov.w	r0, #4294967295
 80073f6:	b01d      	add	sp, #116	@ 0x74
 80073f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073fc:	b002      	add	sp, #8
 80073fe:	4770      	bx	lr
 8007400:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007404:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007408:	bf14      	ite	ne
 800740a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800740e:	4623      	moveq	r3, r4
 8007410:	9304      	str	r3, [sp, #16]
 8007412:	9307      	str	r3, [sp, #28]
 8007414:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007418:	9002      	str	r0, [sp, #8]
 800741a:	9006      	str	r0, [sp, #24]
 800741c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007420:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007422:	ab21      	add	r3, sp, #132	@ 0x84
 8007424:	a902      	add	r1, sp, #8
 8007426:	4628      	mov	r0, r5
 8007428:	9301      	str	r3, [sp, #4]
 800742a:	f001 fc1b 	bl	8008c64 <_svfiprintf_r>
 800742e:	1c43      	adds	r3, r0, #1
 8007430:	bfbc      	itt	lt
 8007432:	238b      	movlt	r3, #139	@ 0x8b
 8007434:	602b      	strlt	r3, [r5, #0]
 8007436:	2c00      	cmp	r4, #0
 8007438:	d0dd      	beq.n	80073f6 <sniprintf+0x16>
 800743a:	9b02      	ldr	r3, [sp, #8]
 800743c:	2200      	movs	r2, #0
 800743e:	701a      	strb	r2, [r3, #0]
 8007440:	e7d9      	b.n	80073f6 <sniprintf+0x16>
 8007442:	bf00      	nop
 8007444:	2000002c 	.word	0x2000002c

08007448 <siprintf>:
 8007448:	b40e      	push	{r1, r2, r3}
 800744a:	b500      	push	{lr}
 800744c:	b09c      	sub	sp, #112	@ 0x70
 800744e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007450:	9002      	str	r0, [sp, #8]
 8007452:	9006      	str	r0, [sp, #24]
 8007454:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007458:	4809      	ldr	r0, [pc, #36]	@ (8007480 <siprintf+0x38>)
 800745a:	9107      	str	r1, [sp, #28]
 800745c:	9104      	str	r1, [sp, #16]
 800745e:	4909      	ldr	r1, [pc, #36]	@ (8007484 <siprintf+0x3c>)
 8007460:	f853 2b04 	ldr.w	r2, [r3], #4
 8007464:	9105      	str	r1, [sp, #20]
 8007466:	6800      	ldr	r0, [r0, #0]
 8007468:	9301      	str	r3, [sp, #4]
 800746a:	a902      	add	r1, sp, #8
 800746c:	f001 fbfa 	bl	8008c64 <_svfiprintf_r>
 8007470:	9b02      	ldr	r3, [sp, #8]
 8007472:	2200      	movs	r2, #0
 8007474:	701a      	strb	r2, [r3, #0]
 8007476:	b01c      	add	sp, #112	@ 0x70
 8007478:	f85d eb04 	ldr.w	lr, [sp], #4
 800747c:	b003      	add	sp, #12
 800747e:	4770      	bx	lr
 8007480:	2000002c 	.word	0x2000002c
 8007484:	ffff0208 	.word	0xffff0208

08007488 <__sread>:
 8007488:	b510      	push	{r4, lr}
 800748a:	460c      	mov	r4, r1
 800748c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007490:	f000 f86c 	bl	800756c <_read_r>
 8007494:	2800      	cmp	r0, #0
 8007496:	bfab      	itete	ge
 8007498:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800749a:	89a3      	ldrhlt	r3, [r4, #12]
 800749c:	181b      	addge	r3, r3, r0
 800749e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80074a2:	bfac      	ite	ge
 80074a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80074a6:	81a3      	strhlt	r3, [r4, #12]
 80074a8:	bd10      	pop	{r4, pc}

080074aa <__swrite>:
 80074aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074ae:	461f      	mov	r7, r3
 80074b0:	898b      	ldrh	r3, [r1, #12]
 80074b2:	05db      	lsls	r3, r3, #23
 80074b4:	4605      	mov	r5, r0
 80074b6:	460c      	mov	r4, r1
 80074b8:	4616      	mov	r6, r2
 80074ba:	d505      	bpl.n	80074c8 <__swrite+0x1e>
 80074bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074c0:	2302      	movs	r3, #2
 80074c2:	2200      	movs	r2, #0
 80074c4:	f000 f840 	bl	8007548 <_lseek_r>
 80074c8:	89a3      	ldrh	r3, [r4, #12]
 80074ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80074d2:	81a3      	strh	r3, [r4, #12]
 80074d4:	4632      	mov	r2, r6
 80074d6:	463b      	mov	r3, r7
 80074d8:	4628      	mov	r0, r5
 80074da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074de:	f000 b857 	b.w	8007590 <_write_r>

080074e2 <__sseek>:
 80074e2:	b510      	push	{r4, lr}
 80074e4:	460c      	mov	r4, r1
 80074e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ea:	f000 f82d 	bl	8007548 <_lseek_r>
 80074ee:	1c43      	adds	r3, r0, #1
 80074f0:	89a3      	ldrh	r3, [r4, #12]
 80074f2:	bf15      	itete	ne
 80074f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80074f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80074fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80074fe:	81a3      	strheq	r3, [r4, #12]
 8007500:	bf18      	it	ne
 8007502:	81a3      	strhne	r3, [r4, #12]
 8007504:	bd10      	pop	{r4, pc}

08007506 <__sclose>:
 8007506:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800750a:	f000 b80d 	b.w	8007528 <_close_r>

0800750e <memset>:
 800750e:	4402      	add	r2, r0
 8007510:	4603      	mov	r3, r0
 8007512:	4293      	cmp	r3, r2
 8007514:	d100      	bne.n	8007518 <memset+0xa>
 8007516:	4770      	bx	lr
 8007518:	f803 1b01 	strb.w	r1, [r3], #1
 800751c:	e7f9      	b.n	8007512 <memset+0x4>
	...

08007520 <_localeconv_r>:
 8007520:	4800      	ldr	r0, [pc, #0]	@ (8007524 <_localeconv_r+0x4>)
 8007522:	4770      	bx	lr
 8007524:	2000016c 	.word	0x2000016c

08007528 <_close_r>:
 8007528:	b538      	push	{r3, r4, r5, lr}
 800752a:	4d06      	ldr	r5, [pc, #24]	@ (8007544 <_close_r+0x1c>)
 800752c:	2300      	movs	r3, #0
 800752e:	4604      	mov	r4, r0
 8007530:	4608      	mov	r0, r1
 8007532:	602b      	str	r3, [r5, #0]
 8007534:	f7fb fb4e 	bl	8002bd4 <_close>
 8007538:	1c43      	adds	r3, r0, #1
 800753a:	d102      	bne.n	8007542 <_close_r+0x1a>
 800753c:	682b      	ldr	r3, [r5, #0]
 800753e:	b103      	cbz	r3, 8007542 <_close_r+0x1a>
 8007540:	6023      	str	r3, [r4, #0]
 8007542:	bd38      	pop	{r3, r4, r5, pc}
 8007544:	200005d4 	.word	0x200005d4

08007548 <_lseek_r>:
 8007548:	b538      	push	{r3, r4, r5, lr}
 800754a:	4d07      	ldr	r5, [pc, #28]	@ (8007568 <_lseek_r+0x20>)
 800754c:	4604      	mov	r4, r0
 800754e:	4608      	mov	r0, r1
 8007550:	4611      	mov	r1, r2
 8007552:	2200      	movs	r2, #0
 8007554:	602a      	str	r2, [r5, #0]
 8007556:	461a      	mov	r2, r3
 8007558:	f7fb fb63 	bl	8002c22 <_lseek>
 800755c:	1c43      	adds	r3, r0, #1
 800755e:	d102      	bne.n	8007566 <_lseek_r+0x1e>
 8007560:	682b      	ldr	r3, [r5, #0]
 8007562:	b103      	cbz	r3, 8007566 <_lseek_r+0x1e>
 8007564:	6023      	str	r3, [r4, #0]
 8007566:	bd38      	pop	{r3, r4, r5, pc}
 8007568:	200005d4 	.word	0x200005d4

0800756c <_read_r>:
 800756c:	b538      	push	{r3, r4, r5, lr}
 800756e:	4d07      	ldr	r5, [pc, #28]	@ (800758c <_read_r+0x20>)
 8007570:	4604      	mov	r4, r0
 8007572:	4608      	mov	r0, r1
 8007574:	4611      	mov	r1, r2
 8007576:	2200      	movs	r2, #0
 8007578:	602a      	str	r2, [r5, #0]
 800757a:	461a      	mov	r2, r3
 800757c:	f7fb faf1 	bl	8002b62 <_read>
 8007580:	1c43      	adds	r3, r0, #1
 8007582:	d102      	bne.n	800758a <_read_r+0x1e>
 8007584:	682b      	ldr	r3, [r5, #0]
 8007586:	b103      	cbz	r3, 800758a <_read_r+0x1e>
 8007588:	6023      	str	r3, [r4, #0]
 800758a:	bd38      	pop	{r3, r4, r5, pc}
 800758c:	200005d4 	.word	0x200005d4

08007590 <_write_r>:
 8007590:	b538      	push	{r3, r4, r5, lr}
 8007592:	4d07      	ldr	r5, [pc, #28]	@ (80075b0 <_write_r+0x20>)
 8007594:	4604      	mov	r4, r0
 8007596:	4608      	mov	r0, r1
 8007598:	4611      	mov	r1, r2
 800759a:	2200      	movs	r2, #0
 800759c:	602a      	str	r2, [r5, #0]
 800759e:	461a      	mov	r2, r3
 80075a0:	f7fb fafc 	bl	8002b9c <_write>
 80075a4:	1c43      	adds	r3, r0, #1
 80075a6:	d102      	bne.n	80075ae <_write_r+0x1e>
 80075a8:	682b      	ldr	r3, [r5, #0]
 80075aa:	b103      	cbz	r3, 80075ae <_write_r+0x1e>
 80075ac:	6023      	str	r3, [r4, #0]
 80075ae:	bd38      	pop	{r3, r4, r5, pc}
 80075b0:	200005d4 	.word	0x200005d4

080075b4 <__errno>:
 80075b4:	4b01      	ldr	r3, [pc, #4]	@ (80075bc <__errno+0x8>)
 80075b6:	6818      	ldr	r0, [r3, #0]
 80075b8:	4770      	bx	lr
 80075ba:	bf00      	nop
 80075bc:	2000002c 	.word	0x2000002c

080075c0 <__libc_init_array>:
 80075c0:	b570      	push	{r4, r5, r6, lr}
 80075c2:	4d0d      	ldr	r5, [pc, #52]	@ (80075f8 <__libc_init_array+0x38>)
 80075c4:	4c0d      	ldr	r4, [pc, #52]	@ (80075fc <__libc_init_array+0x3c>)
 80075c6:	1b64      	subs	r4, r4, r5
 80075c8:	10a4      	asrs	r4, r4, #2
 80075ca:	2600      	movs	r6, #0
 80075cc:	42a6      	cmp	r6, r4
 80075ce:	d109      	bne.n	80075e4 <__libc_init_array+0x24>
 80075d0:	4d0b      	ldr	r5, [pc, #44]	@ (8007600 <__libc_init_array+0x40>)
 80075d2:	4c0c      	ldr	r4, [pc, #48]	@ (8007604 <__libc_init_array+0x44>)
 80075d4:	f002 f864 	bl	80096a0 <_init>
 80075d8:	1b64      	subs	r4, r4, r5
 80075da:	10a4      	asrs	r4, r4, #2
 80075dc:	2600      	movs	r6, #0
 80075de:	42a6      	cmp	r6, r4
 80075e0:	d105      	bne.n	80075ee <__libc_init_array+0x2e>
 80075e2:	bd70      	pop	{r4, r5, r6, pc}
 80075e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80075e8:	4798      	blx	r3
 80075ea:	3601      	adds	r6, #1
 80075ec:	e7ee      	b.n	80075cc <__libc_init_array+0xc>
 80075ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80075f2:	4798      	blx	r3
 80075f4:	3601      	adds	r6, #1
 80075f6:	e7f2      	b.n	80075de <__libc_init_array+0x1e>
 80075f8:	08009b58 	.word	0x08009b58
 80075fc:	08009b58 	.word	0x08009b58
 8007600:	08009b58 	.word	0x08009b58
 8007604:	08009b5c 	.word	0x08009b5c

08007608 <__retarget_lock_init_recursive>:
 8007608:	4770      	bx	lr

0800760a <__retarget_lock_acquire_recursive>:
 800760a:	4770      	bx	lr

0800760c <__retarget_lock_release_recursive>:
 800760c:	4770      	bx	lr

0800760e <quorem>:
 800760e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007612:	6903      	ldr	r3, [r0, #16]
 8007614:	690c      	ldr	r4, [r1, #16]
 8007616:	42a3      	cmp	r3, r4
 8007618:	4607      	mov	r7, r0
 800761a:	db7e      	blt.n	800771a <quorem+0x10c>
 800761c:	3c01      	subs	r4, #1
 800761e:	f101 0814 	add.w	r8, r1, #20
 8007622:	00a3      	lsls	r3, r4, #2
 8007624:	f100 0514 	add.w	r5, r0, #20
 8007628:	9300      	str	r3, [sp, #0]
 800762a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800762e:	9301      	str	r3, [sp, #4]
 8007630:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007634:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007638:	3301      	adds	r3, #1
 800763a:	429a      	cmp	r2, r3
 800763c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007640:	fbb2 f6f3 	udiv	r6, r2, r3
 8007644:	d32e      	bcc.n	80076a4 <quorem+0x96>
 8007646:	f04f 0a00 	mov.w	sl, #0
 800764a:	46c4      	mov	ip, r8
 800764c:	46ae      	mov	lr, r5
 800764e:	46d3      	mov	fp, sl
 8007650:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007654:	b298      	uxth	r0, r3
 8007656:	fb06 a000 	mla	r0, r6, r0, sl
 800765a:	0c02      	lsrs	r2, r0, #16
 800765c:	0c1b      	lsrs	r3, r3, #16
 800765e:	fb06 2303 	mla	r3, r6, r3, r2
 8007662:	f8de 2000 	ldr.w	r2, [lr]
 8007666:	b280      	uxth	r0, r0
 8007668:	b292      	uxth	r2, r2
 800766a:	1a12      	subs	r2, r2, r0
 800766c:	445a      	add	r2, fp
 800766e:	f8de 0000 	ldr.w	r0, [lr]
 8007672:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007676:	b29b      	uxth	r3, r3
 8007678:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800767c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007680:	b292      	uxth	r2, r2
 8007682:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007686:	45e1      	cmp	r9, ip
 8007688:	f84e 2b04 	str.w	r2, [lr], #4
 800768c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007690:	d2de      	bcs.n	8007650 <quorem+0x42>
 8007692:	9b00      	ldr	r3, [sp, #0]
 8007694:	58eb      	ldr	r3, [r5, r3]
 8007696:	b92b      	cbnz	r3, 80076a4 <quorem+0x96>
 8007698:	9b01      	ldr	r3, [sp, #4]
 800769a:	3b04      	subs	r3, #4
 800769c:	429d      	cmp	r5, r3
 800769e:	461a      	mov	r2, r3
 80076a0:	d32f      	bcc.n	8007702 <quorem+0xf4>
 80076a2:	613c      	str	r4, [r7, #16]
 80076a4:	4638      	mov	r0, r7
 80076a6:	f001 f979 	bl	800899c <__mcmp>
 80076aa:	2800      	cmp	r0, #0
 80076ac:	db25      	blt.n	80076fa <quorem+0xec>
 80076ae:	4629      	mov	r1, r5
 80076b0:	2000      	movs	r0, #0
 80076b2:	f858 2b04 	ldr.w	r2, [r8], #4
 80076b6:	f8d1 c000 	ldr.w	ip, [r1]
 80076ba:	fa1f fe82 	uxth.w	lr, r2
 80076be:	fa1f f38c 	uxth.w	r3, ip
 80076c2:	eba3 030e 	sub.w	r3, r3, lr
 80076c6:	4403      	add	r3, r0
 80076c8:	0c12      	lsrs	r2, r2, #16
 80076ca:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80076ce:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076d8:	45c1      	cmp	r9, r8
 80076da:	f841 3b04 	str.w	r3, [r1], #4
 80076de:	ea4f 4022 	mov.w	r0, r2, asr #16
 80076e2:	d2e6      	bcs.n	80076b2 <quorem+0xa4>
 80076e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076ec:	b922      	cbnz	r2, 80076f8 <quorem+0xea>
 80076ee:	3b04      	subs	r3, #4
 80076f0:	429d      	cmp	r5, r3
 80076f2:	461a      	mov	r2, r3
 80076f4:	d30b      	bcc.n	800770e <quorem+0x100>
 80076f6:	613c      	str	r4, [r7, #16]
 80076f8:	3601      	adds	r6, #1
 80076fa:	4630      	mov	r0, r6
 80076fc:	b003      	add	sp, #12
 80076fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007702:	6812      	ldr	r2, [r2, #0]
 8007704:	3b04      	subs	r3, #4
 8007706:	2a00      	cmp	r2, #0
 8007708:	d1cb      	bne.n	80076a2 <quorem+0x94>
 800770a:	3c01      	subs	r4, #1
 800770c:	e7c6      	b.n	800769c <quorem+0x8e>
 800770e:	6812      	ldr	r2, [r2, #0]
 8007710:	3b04      	subs	r3, #4
 8007712:	2a00      	cmp	r2, #0
 8007714:	d1ef      	bne.n	80076f6 <quorem+0xe8>
 8007716:	3c01      	subs	r4, #1
 8007718:	e7ea      	b.n	80076f0 <quorem+0xe2>
 800771a:	2000      	movs	r0, #0
 800771c:	e7ee      	b.n	80076fc <quorem+0xee>
	...

08007720 <_dtoa_r>:
 8007720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007724:	69c7      	ldr	r7, [r0, #28]
 8007726:	b099      	sub	sp, #100	@ 0x64
 8007728:	ed8d 0b02 	vstr	d0, [sp, #8]
 800772c:	ec55 4b10 	vmov	r4, r5, d0
 8007730:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007732:	9109      	str	r1, [sp, #36]	@ 0x24
 8007734:	4683      	mov	fp, r0
 8007736:	920e      	str	r2, [sp, #56]	@ 0x38
 8007738:	9313      	str	r3, [sp, #76]	@ 0x4c
 800773a:	b97f      	cbnz	r7, 800775c <_dtoa_r+0x3c>
 800773c:	2010      	movs	r0, #16
 800773e:	f000 fdfd 	bl	800833c <malloc>
 8007742:	4602      	mov	r2, r0
 8007744:	f8cb 001c 	str.w	r0, [fp, #28]
 8007748:	b920      	cbnz	r0, 8007754 <_dtoa_r+0x34>
 800774a:	4ba7      	ldr	r3, [pc, #668]	@ (80079e8 <_dtoa_r+0x2c8>)
 800774c:	21ef      	movs	r1, #239	@ 0xef
 800774e:	48a7      	ldr	r0, [pc, #668]	@ (80079ec <_dtoa_r+0x2cc>)
 8007750:	f001 fc68 	bl	8009024 <__assert_func>
 8007754:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007758:	6007      	str	r7, [r0, #0]
 800775a:	60c7      	str	r7, [r0, #12]
 800775c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007760:	6819      	ldr	r1, [r3, #0]
 8007762:	b159      	cbz	r1, 800777c <_dtoa_r+0x5c>
 8007764:	685a      	ldr	r2, [r3, #4]
 8007766:	604a      	str	r2, [r1, #4]
 8007768:	2301      	movs	r3, #1
 800776a:	4093      	lsls	r3, r2
 800776c:	608b      	str	r3, [r1, #8]
 800776e:	4658      	mov	r0, fp
 8007770:	f000 feda 	bl	8008528 <_Bfree>
 8007774:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007778:	2200      	movs	r2, #0
 800777a:	601a      	str	r2, [r3, #0]
 800777c:	1e2b      	subs	r3, r5, #0
 800777e:	bfb9      	ittee	lt
 8007780:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007784:	9303      	strlt	r3, [sp, #12]
 8007786:	2300      	movge	r3, #0
 8007788:	6033      	strge	r3, [r6, #0]
 800778a:	9f03      	ldr	r7, [sp, #12]
 800778c:	4b98      	ldr	r3, [pc, #608]	@ (80079f0 <_dtoa_r+0x2d0>)
 800778e:	bfbc      	itt	lt
 8007790:	2201      	movlt	r2, #1
 8007792:	6032      	strlt	r2, [r6, #0]
 8007794:	43bb      	bics	r3, r7
 8007796:	d112      	bne.n	80077be <_dtoa_r+0x9e>
 8007798:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800779a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800779e:	6013      	str	r3, [r2, #0]
 80077a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80077a4:	4323      	orrs	r3, r4
 80077a6:	f000 854d 	beq.w	8008244 <_dtoa_r+0xb24>
 80077aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80077ac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007a04 <_dtoa_r+0x2e4>
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	f000 854f 	beq.w	8008254 <_dtoa_r+0xb34>
 80077b6:	f10a 0303 	add.w	r3, sl, #3
 80077ba:	f000 bd49 	b.w	8008250 <_dtoa_r+0xb30>
 80077be:	ed9d 7b02 	vldr	d7, [sp, #8]
 80077c2:	2200      	movs	r2, #0
 80077c4:	ec51 0b17 	vmov	r0, r1, d7
 80077c8:	2300      	movs	r3, #0
 80077ca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80077ce:	f7f9 f97b 	bl	8000ac8 <__aeabi_dcmpeq>
 80077d2:	4680      	mov	r8, r0
 80077d4:	b158      	cbz	r0, 80077ee <_dtoa_r+0xce>
 80077d6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80077d8:	2301      	movs	r3, #1
 80077da:	6013      	str	r3, [r2, #0]
 80077dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80077de:	b113      	cbz	r3, 80077e6 <_dtoa_r+0xc6>
 80077e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80077e2:	4b84      	ldr	r3, [pc, #528]	@ (80079f4 <_dtoa_r+0x2d4>)
 80077e4:	6013      	str	r3, [r2, #0]
 80077e6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007a08 <_dtoa_r+0x2e8>
 80077ea:	f000 bd33 	b.w	8008254 <_dtoa_r+0xb34>
 80077ee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80077f2:	aa16      	add	r2, sp, #88	@ 0x58
 80077f4:	a917      	add	r1, sp, #92	@ 0x5c
 80077f6:	4658      	mov	r0, fp
 80077f8:	f001 f980 	bl	8008afc <__d2b>
 80077fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007800:	4681      	mov	r9, r0
 8007802:	2e00      	cmp	r6, #0
 8007804:	d077      	beq.n	80078f6 <_dtoa_r+0x1d6>
 8007806:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007808:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800780c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007810:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007814:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007818:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800781c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007820:	4619      	mov	r1, r3
 8007822:	2200      	movs	r2, #0
 8007824:	4b74      	ldr	r3, [pc, #464]	@ (80079f8 <_dtoa_r+0x2d8>)
 8007826:	f7f8 fd2f 	bl	8000288 <__aeabi_dsub>
 800782a:	a369      	add	r3, pc, #420	@ (adr r3, 80079d0 <_dtoa_r+0x2b0>)
 800782c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007830:	f7f8 fee2 	bl	80005f8 <__aeabi_dmul>
 8007834:	a368      	add	r3, pc, #416	@ (adr r3, 80079d8 <_dtoa_r+0x2b8>)
 8007836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783a:	f7f8 fd27 	bl	800028c <__adddf3>
 800783e:	4604      	mov	r4, r0
 8007840:	4630      	mov	r0, r6
 8007842:	460d      	mov	r5, r1
 8007844:	f7f8 fe6e 	bl	8000524 <__aeabi_i2d>
 8007848:	a365      	add	r3, pc, #404	@ (adr r3, 80079e0 <_dtoa_r+0x2c0>)
 800784a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784e:	f7f8 fed3 	bl	80005f8 <__aeabi_dmul>
 8007852:	4602      	mov	r2, r0
 8007854:	460b      	mov	r3, r1
 8007856:	4620      	mov	r0, r4
 8007858:	4629      	mov	r1, r5
 800785a:	f7f8 fd17 	bl	800028c <__adddf3>
 800785e:	4604      	mov	r4, r0
 8007860:	460d      	mov	r5, r1
 8007862:	f7f9 f979 	bl	8000b58 <__aeabi_d2iz>
 8007866:	2200      	movs	r2, #0
 8007868:	4607      	mov	r7, r0
 800786a:	2300      	movs	r3, #0
 800786c:	4620      	mov	r0, r4
 800786e:	4629      	mov	r1, r5
 8007870:	f7f9 f934 	bl	8000adc <__aeabi_dcmplt>
 8007874:	b140      	cbz	r0, 8007888 <_dtoa_r+0x168>
 8007876:	4638      	mov	r0, r7
 8007878:	f7f8 fe54 	bl	8000524 <__aeabi_i2d>
 800787c:	4622      	mov	r2, r4
 800787e:	462b      	mov	r3, r5
 8007880:	f7f9 f922 	bl	8000ac8 <__aeabi_dcmpeq>
 8007884:	b900      	cbnz	r0, 8007888 <_dtoa_r+0x168>
 8007886:	3f01      	subs	r7, #1
 8007888:	2f16      	cmp	r7, #22
 800788a:	d851      	bhi.n	8007930 <_dtoa_r+0x210>
 800788c:	4b5b      	ldr	r3, [pc, #364]	@ (80079fc <_dtoa_r+0x2dc>)
 800788e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007896:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800789a:	f7f9 f91f 	bl	8000adc <__aeabi_dcmplt>
 800789e:	2800      	cmp	r0, #0
 80078a0:	d048      	beq.n	8007934 <_dtoa_r+0x214>
 80078a2:	3f01      	subs	r7, #1
 80078a4:	2300      	movs	r3, #0
 80078a6:	9312      	str	r3, [sp, #72]	@ 0x48
 80078a8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80078aa:	1b9b      	subs	r3, r3, r6
 80078ac:	1e5a      	subs	r2, r3, #1
 80078ae:	bf44      	itt	mi
 80078b0:	f1c3 0801 	rsbmi	r8, r3, #1
 80078b4:	2300      	movmi	r3, #0
 80078b6:	9208      	str	r2, [sp, #32]
 80078b8:	bf54      	ite	pl
 80078ba:	f04f 0800 	movpl.w	r8, #0
 80078be:	9308      	strmi	r3, [sp, #32]
 80078c0:	2f00      	cmp	r7, #0
 80078c2:	db39      	blt.n	8007938 <_dtoa_r+0x218>
 80078c4:	9b08      	ldr	r3, [sp, #32]
 80078c6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80078c8:	443b      	add	r3, r7
 80078ca:	9308      	str	r3, [sp, #32]
 80078cc:	2300      	movs	r3, #0
 80078ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80078d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078d2:	2b09      	cmp	r3, #9
 80078d4:	d864      	bhi.n	80079a0 <_dtoa_r+0x280>
 80078d6:	2b05      	cmp	r3, #5
 80078d8:	bfc4      	itt	gt
 80078da:	3b04      	subgt	r3, #4
 80078dc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80078de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078e0:	f1a3 0302 	sub.w	r3, r3, #2
 80078e4:	bfcc      	ite	gt
 80078e6:	2400      	movgt	r4, #0
 80078e8:	2401      	movle	r4, #1
 80078ea:	2b03      	cmp	r3, #3
 80078ec:	d863      	bhi.n	80079b6 <_dtoa_r+0x296>
 80078ee:	e8df f003 	tbb	[pc, r3]
 80078f2:	372a      	.short	0x372a
 80078f4:	5535      	.short	0x5535
 80078f6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80078fa:	441e      	add	r6, r3
 80078fc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007900:	2b20      	cmp	r3, #32
 8007902:	bfc1      	itttt	gt
 8007904:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007908:	409f      	lslgt	r7, r3
 800790a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800790e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007912:	bfd6      	itet	le
 8007914:	f1c3 0320 	rsble	r3, r3, #32
 8007918:	ea47 0003 	orrgt.w	r0, r7, r3
 800791c:	fa04 f003 	lslle.w	r0, r4, r3
 8007920:	f7f8 fdf0 	bl	8000504 <__aeabi_ui2d>
 8007924:	2201      	movs	r2, #1
 8007926:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800792a:	3e01      	subs	r6, #1
 800792c:	9214      	str	r2, [sp, #80]	@ 0x50
 800792e:	e777      	b.n	8007820 <_dtoa_r+0x100>
 8007930:	2301      	movs	r3, #1
 8007932:	e7b8      	b.n	80078a6 <_dtoa_r+0x186>
 8007934:	9012      	str	r0, [sp, #72]	@ 0x48
 8007936:	e7b7      	b.n	80078a8 <_dtoa_r+0x188>
 8007938:	427b      	negs	r3, r7
 800793a:	930a      	str	r3, [sp, #40]	@ 0x28
 800793c:	2300      	movs	r3, #0
 800793e:	eba8 0807 	sub.w	r8, r8, r7
 8007942:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007944:	e7c4      	b.n	80078d0 <_dtoa_r+0x1b0>
 8007946:	2300      	movs	r3, #0
 8007948:	930b      	str	r3, [sp, #44]	@ 0x2c
 800794a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800794c:	2b00      	cmp	r3, #0
 800794e:	dc35      	bgt.n	80079bc <_dtoa_r+0x29c>
 8007950:	2301      	movs	r3, #1
 8007952:	9300      	str	r3, [sp, #0]
 8007954:	9307      	str	r3, [sp, #28]
 8007956:	461a      	mov	r2, r3
 8007958:	920e      	str	r2, [sp, #56]	@ 0x38
 800795a:	e00b      	b.n	8007974 <_dtoa_r+0x254>
 800795c:	2301      	movs	r3, #1
 800795e:	e7f3      	b.n	8007948 <_dtoa_r+0x228>
 8007960:	2300      	movs	r3, #0
 8007962:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007964:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007966:	18fb      	adds	r3, r7, r3
 8007968:	9300      	str	r3, [sp, #0]
 800796a:	3301      	adds	r3, #1
 800796c:	2b01      	cmp	r3, #1
 800796e:	9307      	str	r3, [sp, #28]
 8007970:	bfb8      	it	lt
 8007972:	2301      	movlt	r3, #1
 8007974:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007978:	2100      	movs	r1, #0
 800797a:	2204      	movs	r2, #4
 800797c:	f102 0514 	add.w	r5, r2, #20
 8007980:	429d      	cmp	r5, r3
 8007982:	d91f      	bls.n	80079c4 <_dtoa_r+0x2a4>
 8007984:	6041      	str	r1, [r0, #4]
 8007986:	4658      	mov	r0, fp
 8007988:	f000 fd8e 	bl	80084a8 <_Balloc>
 800798c:	4682      	mov	sl, r0
 800798e:	2800      	cmp	r0, #0
 8007990:	d13c      	bne.n	8007a0c <_dtoa_r+0x2ec>
 8007992:	4b1b      	ldr	r3, [pc, #108]	@ (8007a00 <_dtoa_r+0x2e0>)
 8007994:	4602      	mov	r2, r0
 8007996:	f240 11af 	movw	r1, #431	@ 0x1af
 800799a:	e6d8      	b.n	800774e <_dtoa_r+0x2e>
 800799c:	2301      	movs	r3, #1
 800799e:	e7e0      	b.n	8007962 <_dtoa_r+0x242>
 80079a0:	2401      	movs	r4, #1
 80079a2:	2300      	movs	r3, #0
 80079a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80079a6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80079a8:	f04f 33ff 	mov.w	r3, #4294967295
 80079ac:	9300      	str	r3, [sp, #0]
 80079ae:	9307      	str	r3, [sp, #28]
 80079b0:	2200      	movs	r2, #0
 80079b2:	2312      	movs	r3, #18
 80079b4:	e7d0      	b.n	8007958 <_dtoa_r+0x238>
 80079b6:	2301      	movs	r3, #1
 80079b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079ba:	e7f5      	b.n	80079a8 <_dtoa_r+0x288>
 80079bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079be:	9300      	str	r3, [sp, #0]
 80079c0:	9307      	str	r3, [sp, #28]
 80079c2:	e7d7      	b.n	8007974 <_dtoa_r+0x254>
 80079c4:	3101      	adds	r1, #1
 80079c6:	0052      	lsls	r2, r2, #1
 80079c8:	e7d8      	b.n	800797c <_dtoa_r+0x25c>
 80079ca:	bf00      	nop
 80079cc:	f3af 8000 	nop.w
 80079d0:	636f4361 	.word	0x636f4361
 80079d4:	3fd287a7 	.word	0x3fd287a7
 80079d8:	8b60c8b3 	.word	0x8b60c8b3
 80079dc:	3fc68a28 	.word	0x3fc68a28
 80079e0:	509f79fb 	.word	0x509f79fb
 80079e4:	3fd34413 	.word	0x3fd34413
 80079e8:	08009821 	.word	0x08009821
 80079ec:	08009838 	.word	0x08009838
 80079f0:	7ff00000 	.word	0x7ff00000
 80079f4:	080097f1 	.word	0x080097f1
 80079f8:	3ff80000 	.word	0x3ff80000
 80079fc:	08009930 	.word	0x08009930
 8007a00:	08009890 	.word	0x08009890
 8007a04:	0800981d 	.word	0x0800981d
 8007a08:	080097f0 	.word	0x080097f0
 8007a0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007a10:	6018      	str	r0, [r3, #0]
 8007a12:	9b07      	ldr	r3, [sp, #28]
 8007a14:	2b0e      	cmp	r3, #14
 8007a16:	f200 80a4 	bhi.w	8007b62 <_dtoa_r+0x442>
 8007a1a:	2c00      	cmp	r4, #0
 8007a1c:	f000 80a1 	beq.w	8007b62 <_dtoa_r+0x442>
 8007a20:	2f00      	cmp	r7, #0
 8007a22:	dd33      	ble.n	8007a8c <_dtoa_r+0x36c>
 8007a24:	4bad      	ldr	r3, [pc, #692]	@ (8007cdc <_dtoa_r+0x5bc>)
 8007a26:	f007 020f 	and.w	r2, r7, #15
 8007a2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a2e:	ed93 7b00 	vldr	d7, [r3]
 8007a32:	05f8      	lsls	r0, r7, #23
 8007a34:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007a38:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007a3c:	d516      	bpl.n	8007a6c <_dtoa_r+0x34c>
 8007a3e:	4ba8      	ldr	r3, [pc, #672]	@ (8007ce0 <_dtoa_r+0x5c0>)
 8007a40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a48:	f7f8 ff00 	bl	800084c <__aeabi_ddiv>
 8007a4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a50:	f004 040f 	and.w	r4, r4, #15
 8007a54:	2603      	movs	r6, #3
 8007a56:	4da2      	ldr	r5, [pc, #648]	@ (8007ce0 <_dtoa_r+0x5c0>)
 8007a58:	b954      	cbnz	r4, 8007a70 <_dtoa_r+0x350>
 8007a5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a62:	f7f8 fef3 	bl	800084c <__aeabi_ddiv>
 8007a66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a6a:	e028      	b.n	8007abe <_dtoa_r+0x39e>
 8007a6c:	2602      	movs	r6, #2
 8007a6e:	e7f2      	b.n	8007a56 <_dtoa_r+0x336>
 8007a70:	07e1      	lsls	r1, r4, #31
 8007a72:	d508      	bpl.n	8007a86 <_dtoa_r+0x366>
 8007a74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a78:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007a7c:	f7f8 fdbc 	bl	80005f8 <__aeabi_dmul>
 8007a80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a84:	3601      	adds	r6, #1
 8007a86:	1064      	asrs	r4, r4, #1
 8007a88:	3508      	adds	r5, #8
 8007a8a:	e7e5      	b.n	8007a58 <_dtoa_r+0x338>
 8007a8c:	f000 80d2 	beq.w	8007c34 <_dtoa_r+0x514>
 8007a90:	427c      	negs	r4, r7
 8007a92:	4b92      	ldr	r3, [pc, #584]	@ (8007cdc <_dtoa_r+0x5bc>)
 8007a94:	4d92      	ldr	r5, [pc, #584]	@ (8007ce0 <_dtoa_r+0x5c0>)
 8007a96:	f004 020f 	and.w	r2, r4, #15
 8007a9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007aa6:	f7f8 fda7 	bl	80005f8 <__aeabi_dmul>
 8007aaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007aae:	1124      	asrs	r4, r4, #4
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	2602      	movs	r6, #2
 8007ab4:	2c00      	cmp	r4, #0
 8007ab6:	f040 80b2 	bne.w	8007c1e <_dtoa_r+0x4fe>
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d1d3      	bne.n	8007a66 <_dtoa_r+0x346>
 8007abe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007ac0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f000 80b7 	beq.w	8007c38 <_dtoa_r+0x518>
 8007aca:	4b86      	ldr	r3, [pc, #536]	@ (8007ce4 <_dtoa_r+0x5c4>)
 8007acc:	2200      	movs	r2, #0
 8007ace:	4620      	mov	r0, r4
 8007ad0:	4629      	mov	r1, r5
 8007ad2:	f7f9 f803 	bl	8000adc <__aeabi_dcmplt>
 8007ad6:	2800      	cmp	r0, #0
 8007ad8:	f000 80ae 	beq.w	8007c38 <_dtoa_r+0x518>
 8007adc:	9b07      	ldr	r3, [sp, #28]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f000 80aa 	beq.w	8007c38 <_dtoa_r+0x518>
 8007ae4:	9b00      	ldr	r3, [sp, #0]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	dd37      	ble.n	8007b5a <_dtoa_r+0x43a>
 8007aea:	1e7b      	subs	r3, r7, #1
 8007aec:	9304      	str	r3, [sp, #16]
 8007aee:	4620      	mov	r0, r4
 8007af0:	4b7d      	ldr	r3, [pc, #500]	@ (8007ce8 <_dtoa_r+0x5c8>)
 8007af2:	2200      	movs	r2, #0
 8007af4:	4629      	mov	r1, r5
 8007af6:	f7f8 fd7f 	bl	80005f8 <__aeabi_dmul>
 8007afa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007afe:	9c00      	ldr	r4, [sp, #0]
 8007b00:	3601      	adds	r6, #1
 8007b02:	4630      	mov	r0, r6
 8007b04:	f7f8 fd0e 	bl	8000524 <__aeabi_i2d>
 8007b08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b0c:	f7f8 fd74 	bl	80005f8 <__aeabi_dmul>
 8007b10:	4b76      	ldr	r3, [pc, #472]	@ (8007cec <_dtoa_r+0x5cc>)
 8007b12:	2200      	movs	r2, #0
 8007b14:	f7f8 fbba 	bl	800028c <__adddf3>
 8007b18:	4605      	mov	r5, r0
 8007b1a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007b1e:	2c00      	cmp	r4, #0
 8007b20:	f040 808d 	bne.w	8007c3e <_dtoa_r+0x51e>
 8007b24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b28:	4b71      	ldr	r3, [pc, #452]	@ (8007cf0 <_dtoa_r+0x5d0>)
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f7f8 fbac 	bl	8000288 <__aeabi_dsub>
 8007b30:	4602      	mov	r2, r0
 8007b32:	460b      	mov	r3, r1
 8007b34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b38:	462a      	mov	r2, r5
 8007b3a:	4633      	mov	r3, r6
 8007b3c:	f7f8 ffec 	bl	8000b18 <__aeabi_dcmpgt>
 8007b40:	2800      	cmp	r0, #0
 8007b42:	f040 828b 	bne.w	800805c <_dtoa_r+0x93c>
 8007b46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b4a:	462a      	mov	r2, r5
 8007b4c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007b50:	f7f8 ffc4 	bl	8000adc <__aeabi_dcmplt>
 8007b54:	2800      	cmp	r0, #0
 8007b56:	f040 8128 	bne.w	8007daa <_dtoa_r+0x68a>
 8007b5a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007b5e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007b62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f2c0 815a 	blt.w	8007e1e <_dtoa_r+0x6fe>
 8007b6a:	2f0e      	cmp	r7, #14
 8007b6c:	f300 8157 	bgt.w	8007e1e <_dtoa_r+0x6fe>
 8007b70:	4b5a      	ldr	r3, [pc, #360]	@ (8007cdc <_dtoa_r+0x5bc>)
 8007b72:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007b76:	ed93 7b00 	vldr	d7, [r3]
 8007b7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	ed8d 7b00 	vstr	d7, [sp]
 8007b82:	da03      	bge.n	8007b8c <_dtoa_r+0x46c>
 8007b84:	9b07      	ldr	r3, [sp, #28]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	f340 8101 	ble.w	8007d8e <_dtoa_r+0x66e>
 8007b8c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007b90:	4656      	mov	r6, sl
 8007b92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b96:	4620      	mov	r0, r4
 8007b98:	4629      	mov	r1, r5
 8007b9a:	f7f8 fe57 	bl	800084c <__aeabi_ddiv>
 8007b9e:	f7f8 ffdb 	bl	8000b58 <__aeabi_d2iz>
 8007ba2:	4680      	mov	r8, r0
 8007ba4:	f7f8 fcbe 	bl	8000524 <__aeabi_i2d>
 8007ba8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bac:	f7f8 fd24 	bl	80005f8 <__aeabi_dmul>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	4620      	mov	r0, r4
 8007bb6:	4629      	mov	r1, r5
 8007bb8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007bbc:	f7f8 fb64 	bl	8000288 <__aeabi_dsub>
 8007bc0:	f806 4b01 	strb.w	r4, [r6], #1
 8007bc4:	9d07      	ldr	r5, [sp, #28]
 8007bc6:	eba6 040a 	sub.w	r4, r6, sl
 8007bca:	42a5      	cmp	r5, r4
 8007bcc:	4602      	mov	r2, r0
 8007bce:	460b      	mov	r3, r1
 8007bd0:	f040 8117 	bne.w	8007e02 <_dtoa_r+0x6e2>
 8007bd4:	f7f8 fb5a 	bl	800028c <__adddf3>
 8007bd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bdc:	4604      	mov	r4, r0
 8007bde:	460d      	mov	r5, r1
 8007be0:	f7f8 ff9a 	bl	8000b18 <__aeabi_dcmpgt>
 8007be4:	2800      	cmp	r0, #0
 8007be6:	f040 80f9 	bne.w	8007ddc <_dtoa_r+0x6bc>
 8007bea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bee:	4620      	mov	r0, r4
 8007bf0:	4629      	mov	r1, r5
 8007bf2:	f7f8 ff69 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bf6:	b118      	cbz	r0, 8007c00 <_dtoa_r+0x4e0>
 8007bf8:	f018 0f01 	tst.w	r8, #1
 8007bfc:	f040 80ee 	bne.w	8007ddc <_dtoa_r+0x6bc>
 8007c00:	4649      	mov	r1, r9
 8007c02:	4658      	mov	r0, fp
 8007c04:	f000 fc90 	bl	8008528 <_Bfree>
 8007c08:	2300      	movs	r3, #0
 8007c0a:	7033      	strb	r3, [r6, #0]
 8007c0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007c0e:	3701      	adds	r7, #1
 8007c10:	601f      	str	r7, [r3, #0]
 8007c12:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f000 831d 	beq.w	8008254 <_dtoa_r+0xb34>
 8007c1a:	601e      	str	r6, [r3, #0]
 8007c1c:	e31a      	b.n	8008254 <_dtoa_r+0xb34>
 8007c1e:	07e2      	lsls	r2, r4, #31
 8007c20:	d505      	bpl.n	8007c2e <_dtoa_r+0x50e>
 8007c22:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c26:	f7f8 fce7 	bl	80005f8 <__aeabi_dmul>
 8007c2a:	3601      	adds	r6, #1
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	1064      	asrs	r4, r4, #1
 8007c30:	3508      	adds	r5, #8
 8007c32:	e73f      	b.n	8007ab4 <_dtoa_r+0x394>
 8007c34:	2602      	movs	r6, #2
 8007c36:	e742      	b.n	8007abe <_dtoa_r+0x39e>
 8007c38:	9c07      	ldr	r4, [sp, #28]
 8007c3a:	9704      	str	r7, [sp, #16]
 8007c3c:	e761      	b.n	8007b02 <_dtoa_r+0x3e2>
 8007c3e:	4b27      	ldr	r3, [pc, #156]	@ (8007cdc <_dtoa_r+0x5bc>)
 8007c40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c42:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007c46:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c4a:	4454      	add	r4, sl
 8007c4c:	2900      	cmp	r1, #0
 8007c4e:	d053      	beq.n	8007cf8 <_dtoa_r+0x5d8>
 8007c50:	4928      	ldr	r1, [pc, #160]	@ (8007cf4 <_dtoa_r+0x5d4>)
 8007c52:	2000      	movs	r0, #0
 8007c54:	f7f8 fdfa 	bl	800084c <__aeabi_ddiv>
 8007c58:	4633      	mov	r3, r6
 8007c5a:	462a      	mov	r2, r5
 8007c5c:	f7f8 fb14 	bl	8000288 <__aeabi_dsub>
 8007c60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007c64:	4656      	mov	r6, sl
 8007c66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c6a:	f7f8 ff75 	bl	8000b58 <__aeabi_d2iz>
 8007c6e:	4605      	mov	r5, r0
 8007c70:	f7f8 fc58 	bl	8000524 <__aeabi_i2d>
 8007c74:	4602      	mov	r2, r0
 8007c76:	460b      	mov	r3, r1
 8007c78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c7c:	f7f8 fb04 	bl	8000288 <__aeabi_dsub>
 8007c80:	3530      	adds	r5, #48	@ 0x30
 8007c82:	4602      	mov	r2, r0
 8007c84:	460b      	mov	r3, r1
 8007c86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c8a:	f806 5b01 	strb.w	r5, [r6], #1
 8007c8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007c92:	f7f8 ff23 	bl	8000adc <__aeabi_dcmplt>
 8007c96:	2800      	cmp	r0, #0
 8007c98:	d171      	bne.n	8007d7e <_dtoa_r+0x65e>
 8007c9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c9e:	4911      	ldr	r1, [pc, #68]	@ (8007ce4 <_dtoa_r+0x5c4>)
 8007ca0:	2000      	movs	r0, #0
 8007ca2:	f7f8 faf1 	bl	8000288 <__aeabi_dsub>
 8007ca6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007caa:	f7f8 ff17 	bl	8000adc <__aeabi_dcmplt>
 8007cae:	2800      	cmp	r0, #0
 8007cb0:	f040 8095 	bne.w	8007dde <_dtoa_r+0x6be>
 8007cb4:	42a6      	cmp	r6, r4
 8007cb6:	f43f af50 	beq.w	8007b5a <_dtoa_r+0x43a>
 8007cba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8007ce8 <_dtoa_r+0x5c8>)
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f7f8 fc99 	bl	80005f8 <__aeabi_dmul>
 8007cc6:	4b08      	ldr	r3, [pc, #32]	@ (8007ce8 <_dtoa_r+0x5c8>)
 8007cc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007ccc:	2200      	movs	r2, #0
 8007cce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cd2:	f7f8 fc91 	bl	80005f8 <__aeabi_dmul>
 8007cd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cda:	e7c4      	b.n	8007c66 <_dtoa_r+0x546>
 8007cdc:	08009930 	.word	0x08009930
 8007ce0:	08009908 	.word	0x08009908
 8007ce4:	3ff00000 	.word	0x3ff00000
 8007ce8:	40240000 	.word	0x40240000
 8007cec:	401c0000 	.word	0x401c0000
 8007cf0:	40140000 	.word	0x40140000
 8007cf4:	3fe00000 	.word	0x3fe00000
 8007cf8:	4631      	mov	r1, r6
 8007cfa:	4628      	mov	r0, r5
 8007cfc:	f7f8 fc7c 	bl	80005f8 <__aeabi_dmul>
 8007d00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007d04:	9415      	str	r4, [sp, #84]	@ 0x54
 8007d06:	4656      	mov	r6, sl
 8007d08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d0c:	f7f8 ff24 	bl	8000b58 <__aeabi_d2iz>
 8007d10:	4605      	mov	r5, r0
 8007d12:	f7f8 fc07 	bl	8000524 <__aeabi_i2d>
 8007d16:	4602      	mov	r2, r0
 8007d18:	460b      	mov	r3, r1
 8007d1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d1e:	f7f8 fab3 	bl	8000288 <__aeabi_dsub>
 8007d22:	3530      	adds	r5, #48	@ 0x30
 8007d24:	f806 5b01 	strb.w	r5, [r6], #1
 8007d28:	4602      	mov	r2, r0
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	42a6      	cmp	r6, r4
 8007d2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d32:	f04f 0200 	mov.w	r2, #0
 8007d36:	d124      	bne.n	8007d82 <_dtoa_r+0x662>
 8007d38:	4bac      	ldr	r3, [pc, #688]	@ (8007fec <_dtoa_r+0x8cc>)
 8007d3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007d3e:	f7f8 faa5 	bl	800028c <__adddf3>
 8007d42:	4602      	mov	r2, r0
 8007d44:	460b      	mov	r3, r1
 8007d46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d4a:	f7f8 fee5 	bl	8000b18 <__aeabi_dcmpgt>
 8007d4e:	2800      	cmp	r0, #0
 8007d50:	d145      	bne.n	8007dde <_dtoa_r+0x6be>
 8007d52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007d56:	49a5      	ldr	r1, [pc, #660]	@ (8007fec <_dtoa_r+0x8cc>)
 8007d58:	2000      	movs	r0, #0
 8007d5a:	f7f8 fa95 	bl	8000288 <__aeabi_dsub>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	460b      	mov	r3, r1
 8007d62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d66:	f7f8 feb9 	bl	8000adc <__aeabi_dcmplt>
 8007d6a:	2800      	cmp	r0, #0
 8007d6c:	f43f aef5 	beq.w	8007b5a <_dtoa_r+0x43a>
 8007d70:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007d72:	1e73      	subs	r3, r6, #1
 8007d74:	9315      	str	r3, [sp, #84]	@ 0x54
 8007d76:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007d7a:	2b30      	cmp	r3, #48	@ 0x30
 8007d7c:	d0f8      	beq.n	8007d70 <_dtoa_r+0x650>
 8007d7e:	9f04      	ldr	r7, [sp, #16]
 8007d80:	e73e      	b.n	8007c00 <_dtoa_r+0x4e0>
 8007d82:	4b9b      	ldr	r3, [pc, #620]	@ (8007ff0 <_dtoa_r+0x8d0>)
 8007d84:	f7f8 fc38 	bl	80005f8 <__aeabi_dmul>
 8007d88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d8c:	e7bc      	b.n	8007d08 <_dtoa_r+0x5e8>
 8007d8e:	d10c      	bne.n	8007daa <_dtoa_r+0x68a>
 8007d90:	4b98      	ldr	r3, [pc, #608]	@ (8007ff4 <_dtoa_r+0x8d4>)
 8007d92:	2200      	movs	r2, #0
 8007d94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d98:	f7f8 fc2e 	bl	80005f8 <__aeabi_dmul>
 8007d9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007da0:	f7f8 feb0 	bl	8000b04 <__aeabi_dcmpge>
 8007da4:	2800      	cmp	r0, #0
 8007da6:	f000 8157 	beq.w	8008058 <_dtoa_r+0x938>
 8007daa:	2400      	movs	r4, #0
 8007dac:	4625      	mov	r5, r4
 8007dae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007db0:	43db      	mvns	r3, r3
 8007db2:	9304      	str	r3, [sp, #16]
 8007db4:	4656      	mov	r6, sl
 8007db6:	2700      	movs	r7, #0
 8007db8:	4621      	mov	r1, r4
 8007dba:	4658      	mov	r0, fp
 8007dbc:	f000 fbb4 	bl	8008528 <_Bfree>
 8007dc0:	2d00      	cmp	r5, #0
 8007dc2:	d0dc      	beq.n	8007d7e <_dtoa_r+0x65e>
 8007dc4:	b12f      	cbz	r7, 8007dd2 <_dtoa_r+0x6b2>
 8007dc6:	42af      	cmp	r7, r5
 8007dc8:	d003      	beq.n	8007dd2 <_dtoa_r+0x6b2>
 8007dca:	4639      	mov	r1, r7
 8007dcc:	4658      	mov	r0, fp
 8007dce:	f000 fbab 	bl	8008528 <_Bfree>
 8007dd2:	4629      	mov	r1, r5
 8007dd4:	4658      	mov	r0, fp
 8007dd6:	f000 fba7 	bl	8008528 <_Bfree>
 8007dda:	e7d0      	b.n	8007d7e <_dtoa_r+0x65e>
 8007ddc:	9704      	str	r7, [sp, #16]
 8007dde:	4633      	mov	r3, r6
 8007de0:	461e      	mov	r6, r3
 8007de2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007de6:	2a39      	cmp	r2, #57	@ 0x39
 8007de8:	d107      	bne.n	8007dfa <_dtoa_r+0x6da>
 8007dea:	459a      	cmp	sl, r3
 8007dec:	d1f8      	bne.n	8007de0 <_dtoa_r+0x6c0>
 8007dee:	9a04      	ldr	r2, [sp, #16]
 8007df0:	3201      	adds	r2, #1
 8007df2:	9204      	str	r2, [sp, #16]
 8007df4:	2230      	movs	r2, #48	@ 0x30
 8007df6:	f88a 2000 	strb.w	r2, [sl]
 8007dfa:	781a      	ldrb	r2, [r3, #0]
 8007dfc:	3201      	adds	r2, #1
 8007dfe:	701a      	strb	r2, [r3, #0]
 8007e00:	e7bd      	b.n	8007d7e <_dtoa_r+0x65e>
 8007e02:	4b7b      	ldr	r3, [pc, #492]	@ (8007ff0 <_dtoa_r+0x8d0>)
 8007e04:	2200      	movs	r2, #0
 8007e06:	f7f8 fbf7 	bl	80005f8 <__aeabi_dmul>
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	4604      	mov	r4, r0
 8007e10:	460d      	mov	r5, r1
 8007e12:	f7f8 fe59 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e16:	2800      	cmp	r0, #0
 8007e18:	f43f aebb 	beq.w	8007b92 <_dtoa_r+0x472>
 8007e1c:	e6f0      	b.n	8007c00 <_dtoa_r+0x4e0>
 8007e1e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007e20:	2a00      	cmp	r2, #0
 8007e22:	f000 80db 	beq.w	8007fdc <_dtoa_r+0x8bc>
 8007e26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e28:	2a01      	cmp	r2, #1
 8007e2a:	f300 80bf 	bgt.w	8007fac <_dtoa_r+0x88c>
 8007e2e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007e30:	2a00      	cmp	r2, #0
 8007e32:	f000 80b7 	beq.w	8007fa4 <_dtoa_r+0x884>
 8007e36:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007e3a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007e3c:	4646      	mov	r6, r8
 8007e3e:	9a08      	ldr	r2, [sp, #32]
 8007e40:	2101      	movs	r1, #1
 8007e42:	441a      	add	r2, r3
 8007e44:	4658      	mov	r0, fp
 8007e46:	4498      	add	r8, r3
 8007e48:	9208      	str	r2, [sp, #32]
 8007e4a:	f000 fc21 	bl	8008690 <__i2b>
 8007e4e:	4605      	mov	r5, r0
 8007e50:	b15e      	cbz	r6, 8007e6a <_dtoa_r+0x74a>
 8007e52:	9b08      	ldr	r3, [sp, #32]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	dd08      	ble.n	8007e6a <_dtoa_r+0x74a>
 8007e58:	42b3      	cmp	r3, r6
 8007e5a:	9a08      	ldr	r2, [sp, #32]
 8007e5c:	bfa8      	it	ge
 8007e5e:	4633      	movge	r3, r6
 8007e60:	eba8 0803 	sub.w	r8, r8, r3
 8007e64:	1af6      	subs	r6, r6, r3
 8007e66:	1ad3      	subs	r3, r2, r3
 8007e68:	9308      	str	r3, [sp, #32]
 8007e6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e6c:	b1f3      	cbz	r3, 8007eac <_dtoa_r+0x78c>
 8007e6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	f000 80b7 	beq.w	8007fe4 <_dtoa_r+0x8c4>
 8007e76:	b18c      	cbz	r4, 8007e9c <_dtoa_r+0x77c>
 8007e78:	4629      	mov	r1, r5
 8007e7a:	4622      	mov	r2, r4
 8007e7c:	4658      	mov	r0, fp
 8007e7e:	f000 fcc7 	bl	8008810 <__pow5mult>
 8007e82:	464a      	mov	r2, r9
 8007e84:	4601      	mov	r1, r0
 8007e86:	4605      	mov	r5, r0
 8007e88:	4658      	mov	r0, fp
 8007e8a:	f000 fc17 	bl	80086bc <__multiply>
 8007e8e:	4649      	mov	r1, r9
 8007e90:	9004      	str	r0, [sp, #16]
 8007e92:	4658      	mov	r0, fp
 8007e94:	f000 fb48 	bl	8008528 <_Bfree>
 8007e98:	9b04      	ldr	r3, [sp, #16]
 8007e9a:	4699      	mov	r9, r3
 8007e9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e9e:	1b1a      	subs	r2, r3, r4
 8007ea0:	d004      	beq.n	8007eac <_dtoa_r+0x78c>
 8007ea2:	4649      	mov	r1, r9
 8007ea4:	4658      	mov	r0, fp
 8007ea6:	f000 fcb3 	bl	8008810 <__pow5mult>
 8007eaa:	4681      	mov	r9, r0
 8007eac:	2101      	movs	r1, #1
 8007eae:	4658      	mov	r0, fp
 8007eb0:	f000 fbee 	bl	8008690 <__i2b>
 8007eb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007eb6:	4604      	mov	r4, r0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f000 81cf 	beq.w	800825c <_dtoa_r+0xb3c>
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	4601      	mov	r1, r0
 8007ec2:	4658      	mov	r0, fp
 8007ec4:	f000 fca4 	bl	8008810 <__pow5mult>
 8007ec8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	4604      	mov	r4, r0
 8007ece:	f300 8095 	bgt.w	8007ffc <_dtoa_r+0x8dc>
 8007ed2:	9b02      	ldr	r3, [sp, #8]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	f040 8087 	bne.w	8007fe8 <_dtoa_r+0x8c8>
 8007eda:	9b03      	ldr	r3, [sp, #12]
 8007edc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f040 8089 	bne.w	8007ff8 <_dtoa_r+0x8d8>
 8007ee6:	9b03      	ldr	r3, [sp, #12]
 8007ee8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007eec:	0d1b      	lsrs	r3, r3, #20
 8007eee:	051b      	lsls	r3, r3, #20
 8007ef0:	b12b      	cbz	r3, 8007efe <_dtoa_r+0x7de>
 8007ef2:	9b08      	ldr	r3, [sp, #32]
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	9308      	str	r3, [sp, #32]
 8007ef8:	f108 0801 	add.w	r8, r8, #1
 8007efc:	2301      	movs	r3, #1
 8007efe:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f000 81b0 	beq.w	8008268 <_dtoa_r+0xb48>
 8007f08:	6923      	ldr	r3, [r4, #16]
 8007f0a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007f0e:	6918      	ldr	r0, [r3, #16]
 8007f10:	f000 fb72 	bl	80085f8 <__hi0bits>
 8007f14:	f1c0 0020 	rsb	r0, r0, #32
 8007f18:	9b08      	ldr	r3, [sp, #32]
 8007f1a:	4418      	add	r0, r3
 8007f1c:	f010 001f 	ands.w	r0, r0, #31
 8007f20:	d077      	beq.n	8008012 <_dtoa_r+0x8f2>
 8007f22:	f1c0 0320 	rsb	r3, r0, #32
 8007f26:	2b04      	cmp	r3, #4
 8007f28:	dd6b      	ble.n	8008002 <_dtoa_r+0x8e2>
 8007f2a:	9b08      	ldr	r3, [sp, #32]
 8007f2c:	f1c0 001c 	rsb	r0, r0, #28
 8007f30:	4403      	add	r3, r0
 8007f32:	4480      	add	r8, r0
 8007f34:	4406      	add	r6, r0
 8007f36:	9308      	str	r3, [sp, #32]
 8007f38:	f1b8 0f00 	cmp.w	r8, #0
 8007f3c:	dd05      	ble.n	8007f4a <_dtoa_r+0x82a>
 8007f3e:	4649      	mov	r1, r9
 8007f40:	4642      	mov	r2, r8
 8007f42:	4658      	mov	r0, fp
 8007f44:	f000 fcbe 	bl	80088c4 <__lshift>
 8007f48:	4681      	mov	r9, r0
 8007f4a:	9b08      	ldr	r3, [sp, #32]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	dd05      	ble.n	8007f5c <_dtoa_r+0x83c>
 8007f50:	4621      	mov	r1, r4
 8007f52:	461a      	mov	r2, r3
 8007f54:	4658      	mov	r0, fp
 8007f56:	f000 fcb5 	bl	80088c4 <__lshift>
 8007f5a:	4604      	mov	r4, r0
 8007f5c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d059      	beq.n	8008016 <_dtoa_r+0x8f6>
 8007f62:	4621      	mov	r1, r4
 8007f64:	4648      	mov	r0, r9
 8007f66:	f000 fd19 	bl	800899c <__mcmp>
 8007f6a:	2800      	cmp	r0, #0
 8007f6c:	da53      	bge.n	8008016 <_dtoa_r+0x8f6>
 8007f6e:	1e7b      	subs	r3, r7, #1
 8007f70:	9304      	str	r3, [sp, #16]
 8007f72:	4649      	mov	r1, r9
 8007f74:	2300      	movs	r3, #0
 8007f76:	220a      	movs	r2, #10
 8007f78:	4658      	mov	r0, fp
 8007f7a:	f000 faf7 	bl	800856c <__multadd>
 8007f7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f80:	4681      	mov	r9, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	f000 8172 	beq.w	800826c <_dtoa_r+0xb4c>
 8007f88:	2300      	movs	r3, #0
 8007f8a:	4629      	mov	r1, r5
 8007f8c:	220a      	movs	r2, #10
 8007f8e:	4658      	mov	r0, fp
 8007f90:	f000 faec 	bl	800856c <__multadd>
 8007f94:	9b00      	ldr	r3, [sp, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	4605      	mov	r5, r0
 8007f9a:	dc67      	bgt.n	800806c <_dtoa_r+0x94c>
 8007f9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	dc41      	bgt.n	8008026 <_dtoa_r+0x906>
 8007fa2:	e063      	b.n	800806c <_dtoa_r+0x94c>
 8007fa4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007fa6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007faa:	e746      	b.n	8007e3a <_dtoa_r+0x71a>
 8007fac:	9b07      	ldr	r3, [sp, #28]
 8007fae:	1e5c      	subs	r4, r3, #1
 8007fb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007fb2:	42a3      	cmp	r3, r4
 8007fb4:	bfbf      	itttt	lt
 8007fb6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007fb8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007fba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007fbc:	1ae3      	sublt	r3, r4, r3
 8007fbe:	bfb4      	ite	lt
 8007fc0:	18d2      	addlt	r2, r2, r3
 8007fc2:	1b1c      	subge	r4, r3, r4
 8007fc4:	9b07      	ldr	r3, [sp, #28]
 8007fc6:	bfbc      	itt	lt
 8007fc8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007fca:	2400      	movlt	r4, #0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	bfb5      	itete	lt
 8007fd0:	eba8 0603 	sublt.w	r6, r8, r3
 8007fd4:	9b07      	ldrge	r3, [sp, #28]
 8007fd6:	2300      	movlt	r3, #0
 8007fd8:	4646      	movge	r6, r8
 8007fda:	e730      	b.n	8007e3e <_dtoa_r+0x71e>
 8007fdc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007fde:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007fe0:	4646      	mov	r6, r8
 8007fe2:	e735      	b.n	8007e50 <_dtoa_r+0x730>
 8007fe4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007fe6:	e75c      	b.n	8007ea2 <_dtoa_r+0x782>
 8007fe8:	2300      	movs	r3, #0
 8007fea:	e788      	b.n	8007efe <_dtoa_r+0x7de>
 8007fec:	3fe00000 	.word	0x3fe00000
 8007ff0:	40240000 	.word	0x40240000
 8007ff4:	40140000 	.word	0x40140000
 8007ff8:	9b02      	ldr	r3, [sp, #8]
 8007ffa:	e780      	b.n	8007efe <_dtoa_r+0x7de>
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	930a      	str	r3, [sp, #40]	@ 0x28
 8008000:	e782      	b.n	8007f08 <_dtoa_r+0x7e8>
 8008002:	d099      	beq.n	8007f38 <_dtoa_r+0x818>
 8008004:	9a08      	ldr	r2, [sp, #32]
 8008006:	331c      	adds	r3, #28
 8008008:	441a      	add	r2, r3
 800800a:	4498      	add	r8, r3
 800800c:	441e      	add	r6, r3
 800800e:	9208      	str	r2, [sp, #32]
 8008010:	e792      	b.n	8007f38 <_dtoa_r+0x818>
 8008012:	4603      	mov	r3, r0
 8008014:	e7f6      	b.n	8008004 <_dtoa_r+0x8e4>
 8008016:	9b07      	ldr	r3, [sp, #28]
 8008018:	9704      	str	r7, [sp, #16]
 800801a:	2b00      	cmp	r3, #0
 800801c:	dc20      	bgt.n	8008060 <_dtoa_r+0x940>
 800801e:	9300      	str	r3, [sp, #0]
 8008020:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008022:	2b02      	cmp	r3, #2
 8008024:	dd1e      	ble.n	8008064 <_dtoa_r+0x944>
 8008026:	9b00      	ldr	r3, [sp, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	f47f aec0 	bne.w	8007dae <_dtoa_r+0x68e>
 800802e:	4621      	mov	r1, r4
 8008030:	2205      	movs	r2, #5
 8008032:	4658      	mov	r0, fp
 8008034:	f000 fa9a 	bl	800856c <__multadd>
 8008038:	4601      	mov	r1, r0
 800803a:	4604      	mov	r4, r0
 800803c:	4648      	mov	r0, r9
 800803e:	f000 fcad 	bl	800899c <__mcmp>
 8008042:	2800      	cmp	r0, #0
 8008044:	f77f aeb3 	ble.w	8007dae <_dtoa_r+0x68e>
 8008048:	4656      	mov	r6, sl
 800804a:	2331      	movs	r3, #49	@ 0x31
 800804c:	f806 3b01 	strb.w	r3, [r6], #1
 8008050:	9b04      	ldr	r3, [sp, #16]
 8008052:	3301      	adds	r3, #1
 8008054:	9304      	str	r3, [sp, #16]
 8008056:	e6ae      	b.n	8007db6 <_dtoa_r+0x696>
 8008058:	9c07      	ldr	r4, [sp, #28]
 800805a:	9704      	str	r7, [sp, #16]
 800805c:	4625      	mov	r5, r4
 800805e:	e7f3      	b.n	8008048 <_dtoa_r+0x928>
 8008060:	9b07      	ldr	r3, [sp, #28]
 8008062:	9300      	str	r3, [sp, #0]
 8008064:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008066:	2b00      	cmp	r3, #0
 8008068:	f000 8104 	beq.w	8008274 <_dtoa_r+0xb54>
 800806c:	2e00      	cmp	r6, #0
 800806e:	dd05      	ble.n	800807c <_dtoa_r+0x95c>
 8008070:	4629      	mov	r1, r5
 8008072:	4632      	mov	r2, r6
 8008074:	4658      	mov	r0, fp
 8008076:	f000 fc25 	bl	80088c4 <__lshift>
 800807a:	4605      	mov	r5, r0
 800807c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800807e:	2b00      	cmp	r3, #0
 8008080:	d05a      	beq.n	8008138 <_dtoa_r+0xa18>
 8008082:	6869      	ldr	r1, [r5, #4]
 8008084:	4658      	mov	r0, fp
 8008086:	f000 fa0f 	bl	80084a8 <_Balloc>
 800808a:	4606      	mov	r6, r0
 800808c:	b928      	cbnz	r0, 800809a <_dtoa_r+0x97a>
 800808e:	4b84      	ldr	r3, [pc, #528]	@ (80082a0 <_dtoa_r+0xb80>)
 8008090:	4602      	mov	r2, r0
 8008092:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008096:	f7ff bb5a 	b.w	800774e <_dtoa_r+0x2e>
 800809a:	692a      	ldr	r2, [r5, #16]
 800809c:	3202      	adds	r2, #2
 800809e:	0092      	lsls	r2, r2, #2
 80080a0:	f105 010c 	add.w	r1, r5, #12
 80080a4:	300c      	adds	r0, #12
 80080a6:	f000 ffaf 	bl	8009008 <memcpy>
 80080aa:	2201      	movs	r2, #1
 80080ac:	4631      	mov	r1, r6
 80080ae:	4658      	mov	r0, fp
 80080b0:	f000 fc08 	bl	80088c4 <__lshift>
 80080b4:	f10a 0301 	add.w	r3, sl, #1
 80080b8:	9307      	str	r3, [sp, #28]
 80080ba:	9b00      	ldr	r3, [sp, #0]
 80080bc:	4453      	add	r3, sl
 80080be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080c0:	9b02      	ldr	r3, [sp, #8]
 80080c2:	f003 0301 	and.w	r3, r3, #1
 80080c6:	462f      	mov	r7, r5
 80080c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80080ca:	4605      	mov	r5, r0
 80080cc:	9b07      	ldr	r3, [sp, #28]
 80080ce:	4621      	mov	r1, r4
 80080d0:	3b01      	subs	r3, #1
 80080d2:	4648      	mov	r0, r9
 80080d4:	9300      	str	r3, [sp, #0]
 80080d6:	f7ff fa9a 	bl	800760e <quorem>
 80080da:	4639      	mov	r1, r7
 80080dc:	9002      	str	r0, [sp, #8]
 80080de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80080e2:	4648      	mov	r0, r9
 80080e4:	f000 fc5a 	bl	800899c <__mcmp>
 80080e8:	462a      	mov	r2, r5
 80080ea:	9008      	str	r0, [sp, #32]
 80080ec:	4621      	mov	r1, r4
 80080ee:	4658      	mov	r0, fp
 80080f0:	f000 fc70 	bl	80089d4 <__mdiff>
 80080f4:	68c2      	ldr	r2, [r0, #12]
 80080f6:	4606      	mov	r6, r0
 80080f8:	bb02      	cbnz	r2, 800813c <_dtoa_r+0xa1c>
 80080fa:	4601      	mov	r1, r0
 80080fc:	4648      	mov	r0, r9
 80080fe:	f000 fc4d 	bl	800899c <__mcmp>
 8008102:	4602      	mov	r2, r0
 8008104:	4631      	mov	r1, r6
 8008106:	4658      	mov	r0, fp
 8008108:	920e      	str	r2, [sp, #56]	@ 0x38
 800810a:	f000 fa0d 	bl	8008528 <_Bfree>
 800810e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008110:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008112:	9e07      	ldr	r6, [sp, #28]
 8008114:	ea43 0102 	orr.w	r1, r3, r2
 8008118:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800811a:	4319      	orrs	r1, r3
 800811c:	d110      	bne.n	8008140 <_dtoa_r+0xa20>
 800811e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008122:	d029      	beq.n	8008178 <_dtoa_r+0xa58>
 8008124:	9b08      	ldr	r3, [sp, #32]
 8008126:	2b00      	cmp	r3, #0
 8008128:	dd02      	ble.n	8008130 <_dtoa_r+0xa10>
 800812a:	9b02      	ldr	r3, [sp, #8]
 800812c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008130:	9b00      	ldr	r3, [sp, #0]
 8008132:	f883 8000 	strb.w	r8, [r3]
 8008136:	e63f      	b.n	8007db8 <_dtoa_r+0x698>
 8008138:	4628      	mov	r0, r5
 800813a:	e7bb      	b.n	80080b4 <_dtoa_r+0x994>
 800813c:	2201      	movs	r2, #1
 800813e:	e7e1      	b.n	8008104 <_dtoa_r+0x9e4>
 8008140:	9b08      	ldr	r3, [sp, #32]
 8008142:	2b00      	cmp	r3, #0
 8008144:	db04      	blt.n	8008150 <_dtoa_r+0xa30>
 8008146:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008148:	430b      	orrs	r3, r1
 800814a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800814c:	430b      	orrs	r3, r1
 800814e:	d120      	bne.n	8008192 <_dtoa_r+0xa72>
 8008150:	2a00      	cmp	r2, #0
 8008152:	dded      	ble.n	8008130 <_dtoa_r+0xa10>
 8008154:	4649      	mov	r1, r9
 8008156:	2201      	movs	r2, #1
 8008158:	4658      	mov	r0, fp
 800815a:	f000 fbb3 	bl	80088c4 <__lshift>
 800815e:	4621      	mov	r1, r4
 8008160:	4681      	mov	r9, r0
 8008162:	f000 fc1b 	bl	800899c <__mcmp>
 8008166:	2800      	cmp	r0, #0
 8008168:	dc03      	bgt.n	8008172 <_dtoa_r+0xa52>
 800816a:	d1e1      	bne.n	8008130 <_dtoa_r+0xa10>
 800816c:	f018 0f01 	tst.w	r8, #1
 8008170:	d0de      	beq.n	8008130 <_dtoa_r+0xa10>
 8008172:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008176:	d1d8      	bne.n	800812a <_dtoa_r+0xa0a>
 8008178:	9a00      	ldr	r2, [sp, #0]
 800817a:	2339      	movs	r3, #57	@ 0x39
 800817c:	7013      	strb	r3, [r2, #0]
 800817e:	4633      	mov	r3, r6
 8008180:	461e      	mov	r6, r3
 8008182:	3b01      	subs	r3, #1
 8008184:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008188:	2a39      	cmp	r2, #57	@ 0x39
 800818a:	d052      	beq.n	8008232 <_dtoa_r+0xb12>
 800818c:	3201      	adds	r2, #1
 800818e:	701a      	strb	r2, [r3, #0]
 8008190:	e612      	b.n	8007db8 <_dtoa_r+0x698>
 8008192:	2a00      	cmp	r2, #0
 8008194:	dd07      	ble.n	80081a6 <_dtoa_r+0xa86>
 8008196:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800819a:	d0ed      	beq.n	8008178 <_dtoa_r+0xa58>
 800819c:	9a00      	ldr	r2, [sp, #0]
 800819e:	f108 0301 	add.w	r3, r8, #1
 80081a2:	7013      	strb	r3, [r2, #0]
 80081a4:	e608      	b.n	8007db8 <_dtoa_r+0x698>
 80081a6:	9b07      	ldr	r3, [sp, #28]
 80081a8:	9a07      	ldr	r2, [sp, #28]
 80081aa:	f803 8c01 	strb.w	r8, [r3, #-1]
 80081ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d028      	beq.n	8008206 <_dtoa_r+0xae6>
 80081b4:	4649      	mov	r1, r9
 80081b6:	2300      	movs	r3, #0
 80081b8:	220a      	movs	r2, #10
 80081ba:	4658      	mov	r0, fp
 80081bc:	f000 f9d6 	bl	800856c <__multadd>
 80081c0:	42af      	cmp	r7, r5
 80081c2:	4681      	mov	r9, r0
 80081c4:	f04f 0300 	mov.w	r3, #0
 80081c8:	f04f 020a 	mov.w	r2, #10
 80081cc:	4639      	mov	r1, r7
 80081ce:	4658      	mov	r0, fp
 80081d0:	d107      	bne.n	80081e2 <_dtoa_r+0xac2>
 80081d2:	f000 f9cb 	bl	800856c <__multadd>
 80081d6:	4607      	mov	r7, r0
 80081d8:	4605      	mov	r5, r0
 80081da:	9b07      	ldr	r3, [sp, #28]
 80081dc:	3301      	adds	r3, #1
 80081de:	9307      	str	r3, [sp, #28]
 80081e0:	e774      	b.n	80080cc <_dtoa_r+0x9ac>
 80081e2:	f000 f9c3 	bl	800856c <__multadd>
 80081e6:	4629      	mov	r1, r5
 80081e8:	4607      	mov	r7, r0
 80081ea:	2300      	movs	r3, #0
 80081ec:	220a      	movs	r2, #10
 80081ee:	4658      	mov	r0, fp
 80081f0:	f000 f9bc 	bl	800856c <__multadd>
 80081f4:	4605      	mov	r5, r0
 80081f6:	e7f0      	b.n	80081da <_dtoa_r+0xaba>
 80081f8:	9b00      	ldr	r3, [sp, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	bfcc      	ite	gt
 80081fe:	461e      	movgt	r6, r3
 8008200:	2601      	movle	r6, #1
 8008202:	4456      	add	r6, sl
 8008204:	2700      	movs	r7, #0
 8008206:	4649      	mov	r1, r9
 8008208:	2201      	movs	r2, #1
 800820a:	4658      	mov	r0, fp
 800820c:	f000 fb5a 	bl	80088c4 <__lshift>
 8008210:	4621      	mov	r1, r4
 8008212:	4681      	mov	r9, r0
 8008214:	f000 fbc2 	bl	800899c <__mcmp>
 8008218:	2800      	cmp	r0, #0
 800821a:	dcb0      	bgt.n	800817e <_dtoa_r+0xa5e>
 800821c:	d102      	bne.n	8008224 <_dtoa_r+0xb04>
 800821e:	f018 0f01 	tst.w	r8, #1
 8008222:	d1ac      	bne.n	800817e <_dtoa_r+0xa5e>
 8008224:	4633      	mov	r3, r6
 8008226:	461e      	mov	r6, r3
 8008228:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800822c:	2a30      	cmp	r2, #48	@ 0x30
 800822e:	d0fa      	beq.n	8008226 <_dtoa_r+0xb06>
 8008230:	e5c2      	b.n	8007db8 <_dtoa_r+0x698>
 8008232:	459a      	cmp	sl, r3
 8008234:	d1a4      	bne.n	8008180 <_dtoa_r+0xa60>
 8008236:	9b04      	ldr	r3, [sp, #16]
 8008238:	3301      	adds	r3, #1
 800823a:	9304      	str	r3, [sp, #16]
 800823c:	2331      	movs	r3, #49	@ 0x31
 800823e:	f88a 3000 	strb.w	r3, [sl]
 8008242:	e5b9      	b.n	8007db8 <_dtoa_r+0x698>
 8008244:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008246:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80082a4 <_dtoa_r+0xb84>
 800824a:	b11b      	cbz	r3, 8008254 <_dtoa_r+0xb34>
 800824c:	f10a 0308 	add.w	r3, sl, #8
 8008250:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008252:	6013      	str	r3, [r2, #0]
 8008254:	4650      	mov	r0, sl
 8008256:	b019      	add	sp, #100	@ 0x64
 8008258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800825c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800825e:	2b01      	cmp	r3, #1
 8008260:	f77f ae37 	ble.w	8007ed2 <_dtoa_r+0x7b2>
 8008264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008266:	930a      	str	r3, [sp, #40]	@ 0x28
 8008268:	2001      	movs	r0, #1
 800826a:	e655      	b.n	8007f18 <_dtoa_r+0x7f8>
 800826c:	9b00      	ldr	r3, [sp, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	f77f aed6 	ble.w	8008020 <_dtoa_r+0x900>
 8008274:	4656      	mov	r6, sl
 8008276:	4621      	mov	r1, r4
 8008278:	4648      	mov	r0, r9
 800827a:	f7ff f9c8 	bl	800760e <quorem>
 800827e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008282:	f806 8b01 	strb.w	r8, [r6], #1
 8008286:	9b00      	ldr	r3, [sp, #0]
 8008288:	eba6 020a 	sub.w	r2, r6, sl
 800828c:	4293      	cmp	r3, r2
 800828e:	ddb3      	ble.n	80081f8 <_dtoa_r+0xad8>
 8008290:	4649      	mov	r1, r9
 8008292:	2300      	movs	r3, #0
 8008294:	220a      	movs	r2, #10
 8008296:	4658      	mov	r0, fp
 8008298:	f000 f968 	bl	800856c <__multadd>
 800829c:	4681      	mov	r9, r0
 800829e:	e7ea      	b.n	8008276 <_dtoa_r+0xb56>
 80082a0:	08009890 	.word	0x08009890
 80082a4:	08009814 	.word	0x08009814

080082a8 <_free_r>:
 80082a8:	b538      	push	{r3, r4, r5, lr}
 80082aa:	4605      	mov	r5, r0
 80082ac:	2900      	cmp	r1, #0
 80082ae:	d041      	beq.n	8008334 <_free_r+0x8c>
 80082b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082b4:	1f0c      	subs	r4, r1, #4
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	bfb8      	it	lt
 80082ba:	18e4      	addlt	r4, r4, r3
 80082bc:	f000 f8e8 	bl	8008490 <__malloc_lock>
 80082c0:	4a1d      	ldr	r2, [pc, #116]	@ (8008338 <_free_r+0x90>)
 80082c2:	6813      	ldr	r3, [r2, #0]
 80082c4:	b933      	cbnz	r3, 80082d4 <_free_r+0x2c>
 80082c6:	6063      	str	r3, [r4, #4]
 80082c8:	6014      	str	r4, [r2, #0]
 80082ca:	4628      	mov	r0, r5
 80082cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082d0:	f000 b8e4 	b.w	800849c <__malloc_unlock>
 80082d4:	42a3      	cmp	r3, r4
 80082d6:	d908      	bls.n	80082ea <_free_r+0x42>
 80082d8:	6820      	ldr	r0, [r4, #0]
 80082da:	1821      	adds	r1, r4, r0
 80082dc:	428b      	cmp	r3, r1
 80082de:	bf01      	itttt	eq
 80082e0:	6819      	ldreq	r1, [r3, #0]
 80082e2:	685b      	ldreq	r3, [r3, #4]
 80082e4:	1809      	addeq	r1, r1, r0
 80082e6:	6021      	streq	r1, [r4, #0]
 80082e8:	e7ed      	b.n	80082c6 <_free_r+0x1e>
 80082ea:	461a      	mov	r2, r3
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	b10b      	cbz	r3, 80082f4 <_free_r+0x4c>
 80082f0:	42a3      	cmp	r3, r4
 80082f2:	d9fa      	bls.n	80082ea <_free_r+0x42>
 80082f4:	6811      	ldr	r1, [r2, #0]
 80082f6:	1850      	adds	r0, r2, r1
 80082f8:	42a0      	cmp	r0, r4
 80082fa:	d10b      	bne.n	8008314 <_free_r+0x6c>
 80082fc:	6820      	ldr	r0, [r4, #0]
 80082fe:	4401      	add	r1, r0
 8008300:	1850      	adds	r0, r2, r1
 8008302:	4283      	cmp	r3, r0
 8008304:	6011      	str	r1, [r2, #0]
 8008306:	d1e0      	bne.n	80082ca <_free_r+0x22>
 8008308:	6818      	ldr	r0, [r3, #0]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	6053      	str	r3, [r2, #4]
 800830e:	4408      	add	r0, r1
 8008310:	6010      	str	r0, [r2, #0]
 8008312:	e7da      	b.n	80082ca <_free_r+0x22>
 8008314:	d902      	bls.n	800831c <_free_r+0x74>
 8008316:	230c      	movs	r3, #12
 8008318:	602b      	str	r3, [r5, #0]
 800831a:	e7d6      	b.n	80082ca <_free_r+0x22>
 800831c:	6820      	ldr	r0, [r4, #0]
 800831e:	1821      	adds	r1, r4, r0
 8008320:	428b      	cmp	r3, r1
 8008322:	bf04      	itt	eq
 8008324:	6819      	ldreq	r1, [r3, #0]
 8008326:	685b      	ldreq	r3, [r3, #4]
 8008328:	6063      	str	r3, [r4, #4]
 800832a:	bf04      	itt	eq
 800832c:	1809      	addeq	r1, r1, r0
 800832e:	6021      	streq	r1, [r4, #0]
 8008330:	6054      	str	r4, [r2, #4]
 8008332:	e7ca      	b.n	80082ca <_free_r+0x22>
 8008334:	bd38      	pop	{r3, r4, r5, pc}
 8008336:	bf00      	nop
 8008338:	200005e0 	.word	0x200005e0

0800833c <malloc>:
 800833c:	4b02      	ldr	r3, [pc, #8]	@ (8008348 <malloc+0xc>)
 800833e:	4601      	mov	r1, r0
 8008340:	6818      	ldr	r0, [r3, #0]
 8008342:	f000 b825 	b.w	8008390 <_malloc_r>
 8008346:	bf00      	nop
 8008348:	2000002c 	.word	0x2000002c

0800834c <sbrk_aligned>:
 800834c:	b570      	push	{r4, r5, r6, lr}
 800834e:	4e0f      	ldr	r6, [pc, #60]	@ (800838c <sbrk_aligned+0x40>)
 8008350:	460c      	mov	r4, r1
 8008352:	6831      	ldr	r1, [r6, #0]
 8008354:	4605      	mov	r5, r0
 8008356:	b911      	cbnz	r1, 800835e <sbrk_aligned+0x12>
 8008358:	f000 fe46 	bl	8008fe8 <_sbrk_r>
 800835c:	6030      	str	r0, [r6, #0]
 800835e:	4621      	mov	r1, r4
 8008360:	4628      	mov	r0, r5
 8008362:	f000 fe41 	bl	8008fe8 <_sbrk_r>
 8008366:	1c43      	adds	r3, r0, #1
 8008368:	d103      	bne.n	8008372 <sbrk_aligned+0x26>
 800836a:	f04f 34ff 	mov.w	r4, #4294967295
 800836e:	4620      	mov	r0, r4
 8008370:	bd70      	pop	{r4, r5, r6, pc}
 8008372:	1cc4      	adds	r4, r0, #3
 8008374:	f024 0403 	bic.w	r4, r4, #3
 8008378:	42a0      	cmp	r0, r4
 800837a:	d0f8      	beq.n	800836e <sbrk_aligned+0x22>
 800837c:	1a21      	subs	r1, r4, r0
 800837e:	4628      	mov	r0, r5
 8008380:	f000 fe32 	bl	8008fe8 <_sbrk_r>
 8008384:	3001      	adds	r0, #1
 8008386:	d1f2      	bne.n	800836e <sbrk_aligned+0x22>
 8008388:	e7ef      	b.n	800836a <sbrk_aligned+0x1e>
 800838a:	bf00      	nop
 800838c:	200005dc 	.word	0x200005dc

08008390 <_malloc_r>:
 8008390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008394:	1ccd      	adds	r5, r1, #3
 8008396:	f025 0503 	bic.w	r5, r5, #3
 800839a:	3508      	adds	r5, #8
 800839c:	2d0c      	cmp	r5, #12
 800839e:	bf38      	it	cc
 80083a0:	250c      	movcc	r5, #12
 80083a2:	2d00      	cmp	r5, #0
 80083a4:	4606      	mov	r6, r0
 80083a6:	db01      	blt.n	80083ac <_malloc_r+0x1c>
 80083a8:	42a9      	cmp	r1, r5
 80083aa:	d904      	bls.n	80083b6 <_malloc_r+0x26>
 80083ac:	230c      	movs	r3, #12
 80083ae:	6033      	str	r3, [r6, #0]
 80083b0:	2000      	movs	r0, #0
 80083b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800848c <_malloc_r+0xfc>
 80083ba:	f000 f869 	bl	8008490 <__malloc_lock>
 80083be:	f8d8 3000 	ldr.w	r3, [r8]
 80083c2:	461c      	mov	r4, r3
 80083c4:	bb44      	cbnz	r4, 8008418 <_malloc_r+0x88>
 80083c6:	4629      	mov	r1, r5
 80083c8:	4630      	mov	r0, r6
 80083ca:	f7ff ffbf 	bl	800834c <sbrk_aligned>
 80083ce:	1c43      	adds	r3, r0, #1
 80083d0:	4604      	mov	r4, r0
 80083d2:	d158      	bne.n	8008486 <_malloc_r+0xf6>
 80083d4:	f8d8 4000 	ldr.w	r4, [r8]
 80083d8:	4627      	mov	r7, r4
 80083da:	2f00      	cmp	r7, #0
 80083dc:	d143      	bne.n	8008466 <_malloc_r+0xd6>
 80083de:	2c00      	cmp	r4, #0
 80083e0:	d04b      	beq.n	800847a <_malloc_r+0xea>
 80083e2:	6823      	ldr	r3, [r4, #0]
 80083e4:	4639      	mov	r1, r7
 80083e6:	4630      	mov	r0, r6
 80083e8:	eb04 0903 	add.w	r9, r4, r3
 80083ec:	f000 fdfc 	bl	8008fe8 <_sbrk_r>
 80083f0:	4581      	cmp	r9, r0
 80083f2:	d142      	bne.n	800847a <_malloc_r+0xea>
 80083f4:	6821      	ldr	r1, [r4, #0]
 80083f6:	1a6d      	subs	r5, r5, r1
 80083f8:	4629      	mov	r1, r5
 80083fa:	4630      	mov	r0, r6
 80083fc:	f7ff ffa6 	bl	800834c <sbrk_aligned>
 8008400:	3001      	adds	r0, #1
 8008402:	d03a      	beq.n	800847a <_malloc_r+0xea>
 8008404:	6823      	ldr	r3, [r4, #0]
 8008406:	442b      	add	r3, r5
 8008408:	6023      	str	r3, [r4, #0]
 800840a:	f8d8 3000 	ldr.w	r3, [r8]
 800840e:	685a      	ldr	r2, [r3, #4]
 8008410:	bb62      	cbnz	r2, 800846c <_malloc_r+0xdc>
 8008412:	f8c8 7000 	str.w	r7, [r8]
 8008416:	e00f      	b.n	8008438 <_malloc_r+0xa8>
 8008418:	6822      	ldr	r2, [r4, #0]
 800841a:	1b52      	subs	r2, r2, r5
 800841c:	d420      	bmi.n	8008460 <_malloc_r+0xd0>
 800841e:	2a0b      	cmp	r2, #11
 8008420:	d917      	bls.n	8008452 <_malloc_r+0xc2>
 8008422:	1961      	adds	r1, r4, r5
 8008424:	42a3      	cmp	r3, r4
 8008426:	6025      	str	r5, [r4, #0]
 8008428:	bf18      	it	ne
 800842a:	6059      	strne	r1, [r3, #4]
 800842c:	6863      	ldr	r3, [r4, #4]
 800842e:	bf08      	it	eq
 8008430:	f8c8 1000 	streq.w	r1, [r8]
 8008434:	5162      	str	r2, [r4, r5]
 8008436:	604b      	str	r3, [r1, #4]
 8008438:	4630      	mov	r0, r6
 800843a:	f000 f82f 	bl	800849c <__malloc_unlock>
 800843e:	f104 000b 	add.w	r0, r4, #11
 8008442:	1d23      	adds	r3, r4, #4
 8008444:	f020 0007 	bic.w	r0, r0, #7
 8008448:	1ac2      	subs	r2, r0, r3
 800844a:	bf1c      	itt	ne
 800844c:	1a1b      	subne	r3, r3, r0
 800844e:	50a3      	strne	r3, [r4, r2]
 8008450:	e7af      	b.n	80083b2 <_malloc_r+0x22>
 8008452:	6862      	ldr	r2, [r4, #4]
 8008454:	42a3      	cmp	r3, r4
 8008456:	bf0c      	ite	eq
 8008458:	f8c8 2000 	streq.w	r2, [r8]
 800845c:	605a      	strne	r2, [r3, #4]
 800845e:	e7eb      	b.n	8008438 <_malloc_r+0xa8>
 8008460:	4623      	mov	r3, r4
 8008462:	6864      	ldr	r4, [r4, #4]
 8008464:	e7ae      	b.n	80083c4 <_malloc_r+0x34>
 8008466:	463c      	mov	r4, r7
 8008468:	687f      	ldr	r7, [r7, #4]
 800846a:	e7b6      	b.n	80083da <_malloc_r+0x4a>
 800846c:	461a      	mov	r2, r3
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	42a3      	cmp	r3, r4
 8008472:	d1fb      	bne.n	800846c <_malloc_r+0xdc>
 8008474:	2300      	movs	r3, #0
 8008476:	6053      	str	r3, [r2, #4]
 8008478:	e7de      	b.n	8008438 <_malloc_r+0xa8>
 800847a:	230c      	movs	r3, #12
 800847c:	6033      	str	r3, [r6, #0]
 800847e:	4630      	mov	r0, r6
 8008480:	f000 f80c 	bl	800849c <__malloc_unlock>
 8008484:	e794      	b.n	80083b0 <_malloc_r+0x20>
 8008486:	6005      	str	r5, [r0, #0]
 8008488:	e7d6      	b.n	8008438 <_malloc_r+0xa8>
 800848a:	bf00      	nop
 800848c:	200005e0 	.word	0x200005e0

08008490 <__malloc_lock>:
 8008490:	4801      	ldr	r0, [pc, #4]	@ (8008498 <__malloc_lock+0x8>)
 8008492:	f7ff b8ba 	b.w	800760a <__retarget_lock_acquire_recursive>
 8008496:	bf00      	nop
 8008498:	200005d8 	.word	0x200005d8

0800849c <__malloc_unlock>:
 800849c:	4801      	ldr	r0, [pc, #4]	@ (80084a4 <__malloc_unlock+0x8>)
 800849e:	f7ff b8b5 	b.w	800760c <__retarget_lock_release_recursive>
 80084a2:	bf00      	nop
 80084a4:	200005d8 	.word	0x200005d8

080084a8 <_Balloc>:
 80084a8:	b570      	push	{r4, r5, r6, lr}
 80084aa:	69c6      	ldr	r6, [r0, #28]
 80084ac:	4604      	mov	r4, r0
 80084ae:	460d      	mov	r5, r1
 80084b0:	b976      	cbnz	r6, 80084d0 <_Balloc+0x28>
 80084b2:	2010      	movs	r0, #16
 80084b4:	f7ff ff42 	bl	800833c <malloc>
 80084b8:	4602      	mov	r2, r0
 80084ba:	61e0      	str	r0, [r4, #28]
 80084bc:	b920      	cbnz	r0, 80084c8 <_Balloc+0x20>
 80084be:	4b18      	ldr	r3, [pc, #96]	@ (8008520 <_Balloc+0x78>)
 80084c0:	4818      	ldr	r0, [pc, #96]	@ (8008524 <_Balloc+0x7c>)
 80084c2:	216b      	movs	r1, #107	@ 0x6b
 80084c4:	f000 fdae 	bl	8009024 <__assert_func>
 80084c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084cc:	6006      	str	r6, [r0, #0]
 80084ce:	60c6      	str	r6, [r0, #12]
 80084d0:	69e6      	ldr	r6, [r4, #28]
 80084d2:	68f3      	ldr	r3, [r6, #12]
 80084d4:	b183      	cbz	r3, 80084f8 <_Balloc+0x50>
 80084d6:	69e3      	ldr	r3, [r4, #28]
 80084d8:	68db      	ldr	r3, [r3, #12]
 80084da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80084de:	b9b8      	cbnz	r0, 8008510 <_Balloc+0x68>
 80084e0:	2101      	movs	r1, #1
 80084e2:	fa01 f605 	lsl.w	r6, r1, r5
 80084e6:	1d72      	adds	r2, r6, #5
 80084e8:	0092      	lsls	r2, r2, #2
 80084ea:	4620      	mov	r0, r4
 80084ec:	f000 fdb8 	bl	8009060 <_calloc_r>
 80084f0:	b160      	cbz	r0, 800850c <_Balloc+0x64>
 80084f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80084f6:	e00e      	b.n	8008516 <_Balloc+0x6e>
 80084f8:	2221      	movs	r2, #33	@ 0x21
 80084fa:	2104      	movs	r1, #4
 80084fc:	4620      	mov	r0, r4
 80084fe:	f000 fdaf 	bl	8009060 <_calloc_r>
 8008502:	69e3      	ldr	r3, [r4, #28]
 8008504:	60f0      	str	r0, [r6, #12]
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1e4      	bne.n	80084d6 <_Balloc+0x2e>
 800850c:	2000      	movs	r0, #0
 800850e:	bd70      	pop	{r4, r5, r6, pc}
 8008510:	6802      	ldr	r2, [r0, #0]
 8008512:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008516:	2300      	movs	r3, #0
 8008518:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800851c:	e7f7      	b.n	800850e <_Balloc+0x66>
 800851e:	bf00      	nop
 8008520:	08009821 	.word	0x08009821
 8008524:	080098a1 	.word	0x080098a1

08008528 <_Bfree>:
 8008528:	b570      	push	{r4, r5, r6, lr}
 800852a:	69c6      	ldr	r6, [r0, #28]
 800852c:	4605      	mov	r5, r0
 800852e:	460c      	mov	r4, r1
 8008530:	b976      	cbnz	r6, 8008550 <_Bfree+0x28>
 8008532:	2010      	movs	r0, #16
 8008534:	f7ff ff02 	bl	800833c <malloc>
 8008538:	4602      	mov	r2, r0
 800853a:	61e8      	str	r0, [r5, #28]
 800853c:	b920      	cbnz	r0, 8008548 <_Bfree+0x20>
 800853e:	4b09      	ldr	r3, [pc, #36]	@ (8008564 <_Bfree+0x3c>)
 8008540:	4809      	ldr	r0, [pc, #36]	@ (8008568 <_Bfree+0x40>)
 8008542:	218f      	movs	r1, #143	@ 0x8f
 8008544:	f000 fd6e 	bl	8009024 <__assert_func>
 8008548:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800854c:	6006      	str	r6, [r0, #0]
 800854e:	60c6      	str	r6, [r0, #12]
 8008550:	b13c      	cbz	r4, 8008562 <_Bfree+0x3a>
 8008552:	69eb      	ldr	r3, [r5, #28]
 8008554:	6862      	ldr	r2, [r4, #4]
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800855c:	6021      	str	r1, [r4, #0]
 800855e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008562:	bd70      	pop	{r4, r5, r6, pc}
 8008564:	08009821 	.word	0x08009821
 8008568:	080098a1 	.word	0x080098a1

0800856c <__multadd>:
 800856c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008570:	690d      	ldr	r5, [r1, #16]
 8008572:	4607      	mov	r7, r0
 8008574:	460c      	mov	r4, r1
 8008576:	461e      	mov	r6, r3
 8008578:	f101 0c14 	add.w	ip, r1, #20
 800857c:	2000      	movs	r0, #0
 800857e:	f8dc 3000 	ldr.w	r3, [ip]
 8008582:	b299      	uxth	r1, r3
 8008584:	fb02 6101 	mla	r1, r2, r1, r6
 8008588:	0c1e      	lsrs	r6, r3, #16
 800858a:	0c0b      	lsrs	r3, r1, #16
 800858c:	fb02 3306 	mla	r3, r2, r6, r3
 8008590:	b289      	uxth	r1, r1
 8008592:	3001      	adds	r0, #1
 8008594:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008598:	4285      	cmp	r5, r0
 800859a:	f84c 1b04 	str.w	r1, [ip], #4
 800859e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80085a2:	dcec      	bgt.n	800857e <__multadd+0x12>
 80085a4:	b30e      	cbz	r6, 80085ea <__multadd+0x7e>
 80085a6:	68a3      	ldr	r3, [r4, #8]
 80085a8:	42ab      	cmp	r3, r5
 80085aa:	dc19      	bgt.n	80085e0 <__multadd+0x74>
 80085ac:	6861      	ldr	r1, [r4, #4]
 80085ae:	4638      	mov	r0, r7
 80085b0:	3101      	adds	r1, #1
 80085b2:	f7ff ff79 	bl	80084a8 <_Balloc>
 80085b6:	4680      	mov	r8, r0
 80085b8:	b928      	cbnz	r0, 80085c6 <__multadd+0x5a>
 80085ba:	4602      	mov	r2, r0
 80085bc:	4b0c      	ldr	r3, [pc, #48]	@ (80085f0 <__multadd+0x84>)
 80085be:	480d      	ldr	r0, [pc, #52]	@ (80085f4 <__multadd+0x88>)
 80085c0:	21ba      	movs	r1, #186	@ 0xba
 80085c2:	f000 fd2f 	bl	8009024 <__assert_func>
 80085c6:	6922      	ldr	r2, [r4, #16]
 80085c8:	3202      	adds	r2, #2
 80085ca:	f104 010c 	add.w	r1, r4, #12
 80085ce:	0092      	lsls	r2, r2, #2
 80085d0:	300c      	adds	r0, #12
 80085d2:	f000 fd19 	bl	8009008 <memcpy>
 80085d6:	4621      	mov	r1, r4
 80085d8:	4638      	mov	r0, r7
 80085da:	f7ff ffa5 	bl	8008528 <_Bfree>
 80085de:	4644      	mov	r4, r8
 80085e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80085e4:	3501      	adds	r5, #1
 80085e6:	615e      	str	r6, [r3, #20]
 80085e8:	6125      	str	r5, [r4, #16]
 80085ea:	4620      	mov	r0, r4
 80085ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085f0:	08009890 	.word	0x08009890
 80085f4:	080098a1 	.word	0x080098a1

080085f8 <__hi0bits>:
 80085f8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80085fc:	4603      	mov	r3, r0
 80085fe:	bf36      	itet	cc
 8008600:	0403      	lslcc	r3, r0, #16
 8008602:	2000      	movcs	r0, #0
 8008604:	2010      	movcc	r0, #16
 8008606:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800860a:	bf3c      	itt	cc
 800860c:	021b      	lslcc	r3, r3, #8
 800860e:	3008      	addcc	r0, #8
 8008610:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008614:	bf3c      	itt	cc
 8008616:	011b      	lslcc	r3, r3, #4
 8008618:	3004      	addcc	r0, #4
 800861a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800861e:	bf3c      	itt	cc
 8008620:	009b      	lslcc	r3, r3, #2
 8008622:	3002      	addcc	r0, #2
 8008624:	2b00      	cmp	r3, #0
 8008626:	db05      	blt.n	8008634 <__hi0bits+0x3c>
 8008628:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800862c:	f100 0001 	add.w	r0, r0, #1
 8008630:	bf08      	it	eq
 8008632:	2020      	moveq	r0, #32
 8008634:	4770      	bx	lr

08008636 <__lo0bits>:
 8008636:	6803      	ldr	r3, [r0, #0]
 8008638:	4602      	mov	r2, r0
 800863a:	f013 0007 	ands.w	r0, r3, #7
 800863e:	d00b      	beq.n	8008658 <__lo0bits+0x22>
 8008640:	07d9      	lsls	r1, r3, #31
 8008642:	d421      	bmi.n	8008688 <__lo0bits+0x52>
 8008644:	0798      	lsls	r0, r3, #30
 8008646:	bf49      	itett	mi
 8008648:	085b      	lsrmi	r3, r3, #1
 800864a:	089b      	lsrpl	r3, r3, #2
 800864c:	2001      	movmi	r0, #1
 800864e:	6013      	strmi	r3, [r2, #0]
 8008650:	bf5c      	itt	pl
 8008652:	6013      	strpl	r3, [r2, #0]
 8008654:	2002      	movpl	r0, #2
 8008656:	4770      	bx	lr
 8008658:	b299      	uxth	r1, r3
 800865a:	b909      	cbnz	r1, 8008660 <__lo0bits+0x2a>
 800865c:	0c1b      	lsrs	r3, r3, #16
 800865e:	2010      	movs	r0, #16
 8008660:	b2d9      	uxtb	r1, r3
 8008662:	b909      	cbnz	r1, 8008668 <__lo0bits+0x32>
 8008664:	3008      	adds	r0, #8
 8008666:	0a1b      	lsrs	r3, r3, #8
 8008668:	0719      	lsls	r1, r3, #28
 800866a:	bf04      	itt	eq
 800866c:	091b      	lsreq	r3, r3, #4
 800866e:	3004      	addeq	r0, #4
 8008670:	0799      	lsls	r1, r3, #30
 8008672:	bf04      	itt	eq
 8008674:	089b      	lsreq	r3, r3, #2
 8008676:	3002      	addeq	r0, #2
 8008678:	07d9      	lsls	r1, r3, #31
 800867a:	d403      	bmi.n	8008684 <__lo0bits+0x4e>
 800867c:	085b      	lsrs	r3, r3, #1
 800867e:	f100 0001 	add.w	r0, r0, #1
 8008682:	d003      	beq.n	800868c <__lo0bits+0x56>
 8008684:	6013      	str	r3, [r2, #0]
 8008686:	4770      	bx	lr
 8008688:	2000      	movs	r0, #0
 800868a:	4770      	bx	lr
 800868c:	2020      	movs	r0, #32
 800868e:	4770      	bx	lr

08008690 <__i2b>:
 8008690:	b510      	push	{r4, lr}
 8008692:	460c      	mov	r4, r1
 8008694:	2101      	movs	r1, #1
 8008696:	f7ff ff07 	bl	80084a8 <_Balloc>
 800869a:	4602      	mov	r2, r0
 800869c:	b928      	cbnz	r0, 80086aa <__i2b+0x1a>
 800869e:	4b05      	ldr	r3, [pc, #20]	@ (80086b4 <__i2b+0x24>)
 80086a0:	4805      	ldr	r0, [pc, #20]	@ (80086b8 <__i2b+0x28>)
 80086a2:	f240 1145 	movw	r1, #325	@ 0x145
 80086a6:	f000 fcbd 	bl	8009024 <__assert_func>
 80086aa:	2301      	movs	r3, #1
 80086ac:	6144      	str	r4, [r0, #20]
 80086ae:	6103      	str	r3, [r0, #16]
 80086b0:	bd10      	pop	{r4, pc}
 80086b2:	bf00      	nop
 80086b4:	08009890 	.word	0x08009890
 80086b8:	080098a1 	.word	0x080098a1

080086bc <__multiply>:
 80086bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086c0:	4614      	mov	r4, r2
 80086c2:	690a      	ldr	r2, [r1, #16]
 80086c4:	6923      	ldr	r3, [r4, #16]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	bfa8      	it	ge
 80086ca:	4623      	movge	r3, r4
 80086cc:	460f      	mov	r7, r1
 80086ce:	bfa4      	itt	ge
 80086d0:	460c      	movge	r4, r1
 80086d2:	461f      	movge	r7, r3
 80086d4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80086d8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80086dc:	68a3      	ldr	r3, [r4, #8]
 80086de:	6861      	ldr	r1, [r4, #4]
 80086e0:	eb0a 0609 	add.w	r6, sl, r9
 80086e4:	42b3      	cmp	r3, r6
 80086e6:	b085      	sub	sp, #20
 80086e8:	bfb8      	it	lt
 80086ea:	3101      	addlt	r1, #1
 80086ec:	f7ff fedc 	bl	80084a8 <_Balloc>
 80086f0:	b930      	cbnz	r0, 8008700 <__multiply+0x44>
 80086f2:	4602      	mov	r2, r0
 80086f4:	4b44      	ldr	r3, [pc, #272]	@ (8008808 <__multiply+0x14c>)
 80086f6:	4845      	ldr	r0, [pc, #276]	@ (800880c <__multiply+0x150>)
 80086f8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80086fc:	f000 fc92 	bl	8009024 <__assert_func>
 8008700:	f100 0514 	add.w	r5, r0, #20
 8008704:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008708:	462b      	mov	r3, r5
 800870a:	2200      	movs	r2, #0
 800870c:	4543      	cmp	r3, r8
 800870e:	d321      	bcc.n	8008754 <__multiply+0x98>
 8008710:	f107 0114 	add.w	r1, r7, #20
 8008714:	f104 0214 	add.w	r2, r4, #20
 8008718:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800871c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008720:	9302      	str	r3, [sp, #8]
 8008722:	1b13      	subs	r3, r2, r4
 8008724:	3b15      	subs	r3, #21
 8008726:	f023 0303 	bic.w	r3, r3, #3
 800872a:	3304      	adds	r3, #4
 800872c:	f104 0715 	add.w	r7, r4, #21
 8008730:	42ba      	cmp	r2, r7
 8008732:	bf38      	it	cc
 8008734:	2304      	movcc	r3, #4
 8008736:	9301      	str	r3, [sp, #4]
 8008738:	9b02      	ldr	r3, [sp, #8]
 800873a:	9103      	str	r1, [sp, #12]
 800873c:	428b      	cmp	r3, r1
 800873e:	d80c      	bhi.n	800875a <__multiply+0x9e>
 8008740:	2e00      	cmp	r6, #0
 8008742:	dd03      	ble.n	800874c <__multiply+0x90>
 8008744:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008748:	2b00      	cmp	r3, #0
 800874a:	d05b      	beq.n	8008804 <__multiply+0x148>
 800874c:	6106      	str	r6, [r0, #16]
 800874e:	b005      	add	sp, #20
 8008750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008754:	f843 2b04 	str.w	r2, [r3], #4
 8008758:	e7d8      	b.n	800870c <__multiply+0x50>
 800875a:	f8b1 a000 	ldrh.w	sl, [r1]
 800875e:	f1ba 0f00 	cmp.w	sl, #0
 8008762:	d024      	beq.n	80087ae <__multiply+0xf2>
 8008764:	f104 0e14 	add.w	lr, r4, #20
 8008768:	46a9      	mov	r9, r5
 800876a:	f04f 0c00 	mov.w	ip, #0
 800876e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008772:	f8d9 3000 	ldr.w	r3, [r9]
 8008776:	fa1f fb87 	uxth.w	fp, r7
 800877a:	b29b      	uxth	r3, r3
 800877c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008780:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008784:	f8d9 7000 	ldr.w	r7, [r9]
 8008788:	4463      	add	r3, ip
 800878a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800878e:	fb0a c70b 	mla	r7, sl, fp, ip
 8008792:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008796:	b29b      	uxth	r3, r3
 8008798:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800879c:	4572      	cmp	r2, lr
 800879e:	f849 3b04 	str.w	r3, [r9], #4
 80087a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80087a6:	d8e2      	bhi.n	800876e <__multiply+0xb2>
 80087a8:	9b01      	ldr	r3, [sp, #4]
 80087aa:	f845 c003 	str.w	ip, [r5, r3]
 80087ae:	9b03      	ldr	r3, [sp, #12]
 80087b0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80087b4:	3104      	adds	r1, #4
 80087b6:	f1b9 0f00 	cmp.w	r9, #0
 80087ba:	d021      	beq.n	8008800 <__multiply+0x144>
 80087bc:	682b      	ldr	r3, [r5, #0]
 80087be:	f104 0c14 	add.w	ip, r4, #20
 80087c2:	46ae      	mov	lr, r5
 80087c4:	f04f 0a00 	mov.w	sl, #0
 80087c8:	f8bc b000 	ldrh.w	fp, [ip]
 80087cc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80087d0:	fb09 770b 	mla	r7, r9, fp, r7
 80087d4:	4457      	add	r7, sl
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80087dc:	f84e 3b04 	str.w	r3, [lr], #4
 80087e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80087e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80087e8:	f8be 3000 	ldrh.w	r3, [lr]
 80087ec:	fb09 330a 	mla	r3, r9, sl, r3
 80087f0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80087f4:	4562      	cmp	r2, ip
 80087f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80087fa:	d8e5      	bhi.n	80087c8 <__multiply+0x10c>
 80087fc:	9f01      	ldr	r7, [sp, #4]
 80087fe:	51eb      	str	r3, [r5, r7]
 8008800:	3504      	adds	r5, #4
 8008802:	e799      	b.n	8008738 <__multiply+0x7c>
 8008804:	3e01      	subs	r6, #1
 8008806:	e79b      	b.n	8008740 <__multiply+0x84>
 8008808:	08009890 	.word	0x08009890
 800880c:	080098a1 	.word	0x080098a1

08008810 <__pow5mult>:
 8008810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008814:	4615      	mov	r5, r2
 8008816:	f012 0203 	ands.w	r2, r2, #3
 800881a:	4607      	mov	r7, r0
 800881c:	460e      	mov	r6, r1
 800881e:	d007      	beq.n	8008830 <__pow5mult+0x20>
 8008820:	4c25      	ldr	r4, [pc, #148]	@ (80088b8 <__pow5mult+0xa8>)
 8008822:	3a01      	subs	r2, #1
 8008824:	2300      	movs	r3, #0
 8008826:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800882a:	f7ff fe9f 	bl	800856c <__multadd>
 800882e:	4606      	mov	r6, r0
 8008830:	10ad      	asrs	r5, r5, #2
 8008832:	d03d      	beq.n	80088b0 <__pow5mult+0xa0>
 8008834:	69fc      	ldr	r4, [r7, #28]
 8008836:	b97c      	cbnz	r4, 8008858 <__pow5mult+0x48>
 8008838:	2010      	movs	r0, #16
 800883a:	f7ff fd7f 	bl	800833c <malloc>
 800883e:	4602      	mov	r2, r0
 8008840:	61f8      	str	r0, [r7, #28]
 8008842:	b928      	cbnz	r0, 8008850 <__pow5mult+0x40>
 8008844:	4b1d      	ldr	r3, [pc, #116]	@ (80088bc <__pow5mult+0xac>)
 8008846:	481e      	ldr	r0, [pc, #120]	@ (80088c0 <__pow5mult+0xb0>)
 8008848:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800884c:	f000 fbea 	bl	8009024 <__assert_func>
 8008850:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008854:	6004      	str	r4, [r0, #0]
 8008856:	60c4      	str	r4, [r0, #12]
 8008858:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800885c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008860:	b94c      	cbnz	r4, 8008876 <__pow5mult+0x66>
 8008862:	f240 2171 	movw	r1, #625	@ 0x271
 8008866:	4638      	mov	r0, r7
 8008868:	f7ff ff12 	bl	8008690 <__i2b>
 800886c:	2300      	movs	r3, #0
 800886e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008872:	4604      	mov	r4, r0
 8008874:	6003      	str	r3, [r0, #0]
 8008876:	f04f 0900 	mov.w	r9, #0
 800887a:	07eb      	lsls	r3, r5, #31
 800887c:	d50a      	bpl.n	8008894 <__pow5mult+0x84>
 800887e:	4631      	mov	r1, r6
 8008880:	4622      	mov	r2, r4
 8008882:	4638      	mov	r0, r7
 8008884:	f7ff ff1a 	bl	80086bc <__multiply>
 8008888:	4631      	mov	r1, r6
 800888a:	4680      	mov	r8, r0
 800888c:	4638      	mov	r0, r7
 800888e:	f7ff fe4b 	bl	8008528 <_Bfree>
 8008892:	4646      	mov	r6, r8
 8008894:	106d      	asrs	r5, r5, #1
 8008896:	d00b      	beq.n	80088b0 <__pow5mult+0xa0>
 8008898:	6820      	ldr	r0, [r4, #0]
 800889a:	b938      	cbnz	r0, 80088ac <__pow5mult+0x9c>
 800889c:	4622      	mov	r2, r4
 800889e:	4621      	mov	r1, r4
 80088a0:	4638      	mov	r0, r7
 80088a2:	f7ff ff0b 	bl	80086bc <__multiply>
 80088a6:	6020      	str	r0, [r4, #0]
 80088a8:	f8c0 9000 	str.w	r9, [r0]
 80088ac:	4604      	mov	r4, r0
 80088ae:	e7e4      	b.n	800887a <__pow5mult+0x6a>
 80088b0:	4630      	mov	r0, r6
 80088b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088b6:	bf00      	nop
 80088b8:	080098fc 	.word	0x080098fc
 80088bc:	08009821 	.word	0x08009821
 80088c0:	080098a1 	.word	0x080098a1

080088c4 <__lshift>:
 80088c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088c8:	460c      	mov	r4, r1
 80088ca:	6849      	ldr	r1, [r1, #4]
 80088cc:	6923      	ldr	r3, [r4, #16]
 80088ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80088d2:	68a3      	ldr	r3, [r4, #8]
 80088d4:	4607      	mov	r7, r0
 80088d6:	4691      	mov	r9, r2
 80088d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80088dc:	f108 0601 	add.w	r6, r8, #1
 80088e0:	42b3      	cmp	r3, r6
 80088e2:	db0b      	blt.n	80088fc <__lshift+0x38>
 80088e4:	4638      	mov	r0, r7
 80088e6:	f7ff fddf 	bl	80084a8 <_Balloc>
 80088ea:	4605      	mov	r5, r0
 80088ec:	b948      	cbnz	r0, 8008902 <__lshift+0x3e>
 80088ee:	4602      	mov	r2, r0
 80088f0:	4b28      	ldr	r3, [pc, #160]	@ (8008994 <__lshift+0xd0>)
 80088f2:	4829      	ldr	r0, [pc, #164]	@ (8008998 <__lshift+0xd4>)
 80088f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80088f8:	f000 fb94 	bl	8009024 <__assert_func>
 80088fc:	3101      	adds	r1, #1
 80088fe:	005b      	lsls	r3, r3, #1
 8008900:	e7ee      	b.n	80088e0 <__lshift+0x1c>
 8008902:	2300      	movs	r3, #0
 8008904:	f100 0114 	add.w	r1, r0, #20
 8008908:	f100 0210 	add.w	r2, r0, #16
 800890c:	4618      	mov	r0, r3
 800890e:	4553      	cmp	r3, sl
 8008910:	db33      	blt.n	800897a <__lshift+0xb6>
 8008912:	6920      	ldr	r0, [r4, #16]
 8008914:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008918:	f104 0314 	add.w	r3, r4, #20
 800891c:	f019 091f 	ands.w	r9, r9, #31
 8008920:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008924:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008928:	d02b      	beq.n	8008982 <__lshift+0xbe>
 800892a:	f1c9 0e20 	rsb	lr, r9, #32
 800892e:	468a      	mov	sl, r1
 8008930:	2200      	movs	r2, #0
 8008932:	6818      	ldr	r0, [r3, #0]
 8008934:	fa00 f009 	lsl.w	r0, r0, r9
 8008938:	4310      	orrs	r0, r2
 800893a:	f84a 0b04 	str.w	r0, [sl], #4
 800893e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008942:	459c      	cmp	ip, r3
 8008944:	fa22 f20e 	lsr.w	r2, r2, lr
 8008948:	d8f3      	bhi.n	8008932 <__lshift+0x6e>
 800894a:	ebac 0304 	sub.w	r3, ip, r4
 800894e:	3b15      	subs	r3, #21
 8008950:	f023 0303 	bic.w	r3, r3, #3
 8008954:	3304      	adds	r3, #4
 8008956:	f104 0015 	add.w	r0, r4, #21
 800895a:	4584      	cmp	ip, r0
 800895c:	bf38      	it	cc
 800895e:	2304      	movcc	r3, #4
 8008960:	50ca      	str	r2, [r1, r3]
 8008962:	b10a      	cbz	r2, 8008968 <__lshift+0xa4>
 8008964:	f108 0602 	add.w	r6, r8, #2
 8008968:	3e01      	subs	r6, #1
 800896a:	4638      	mov	r0, r7
 800896c:	612e      	str	r6, [r5, #16]
 800896e:	4621      	mov	r1, r4
 8008970:	f7ff fdda 	bl	8008528 <_Bfree>
 8008974:	4628      	mov	r0, r5
 8008976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800897a:	f842 0f04 	str.w	r0, [r2, #4]!
 800897e:	3301      	adds	r3, #1
 8008980:	e7c5      	b.n	800890e <__lshift+0x4a>
 8008982:	3904      	subs	r1, #4
 8008984:	f853 2b04 	ldr.w	r2, [r3], #4
 8008988:	f841 2f04 	str.w	r2, [r1, #4]!
 800898c:	459c      	cmp	ip, r3
 800898e:	d8f9      	bhi.n	8008984 <__lshift+0xc0>
 8008990:	e7ea      	b.n	8008968 <__lshift+0xa4>
 8008992:	bf00      	nop
 8008994:	08009890 	.word	0x08009890
 8008998:	080098a1 	.word	0x080098a1

0800899c <__mcmp>:
 800899c:	690a      	ldr	r2, [r1, #16]
 800899e:	4603      	mov	r3, r0
 80089a0:	6900      	ldr	r0, [r0, #16]
 80089a2:	1a80      	subs	r0, r0, r2
 80089a4:	b530      	push	{r4, r5, lr}
 80089a6:	d10e      	bne.n	80089c6 <__mcmp+0x2a>
 80089a8:	3314      	adds	r3, #20
 80089aa:	3114      	adds	r1, #20
 80089ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80089b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80089b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80089b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80089bc:	4295      	cmp	r5, r2
 80089be:	d003      	beq.n	80089c8 <__mcmp+0x2c>
 80089c0:	d205      	bcs.n	80089ce <__mcmp+0x32>
 80089c2:	f04f 30ff 	mov.w	r0, #4294967295
 80089c6:	bd30      	pop	{r4, r5, pc}
 80089c8:	42a3      	cmp	r3, r4
 80089ca:	d3f3      	bcc.n	80089b4 <__mcmp+0x18>
 80089cc:	e7fb      	b.n	80089c6 <__mcmp+0x2a>
 80089ce:	2001      	movs	r0, #1
 80089d0:	e7f9      	b.n	80089c6 <__mcmp+0x2a>
	...

080089d4 <__mdiff>:
 80089d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d8:	4689      	mov	r9, r1
 80089da:	4606      	mov	r6, r0
 80089dc:	4611      	mov	r1, r2
 80089de:	4648      	mov	r0, r9
 80089e0:	4614      	mov	r4, r2
 80089e2:	f7ff ffdb 	bl	800899c <__mcmp>
 80089e6:	1e05      	subs	r5, r0, #0
 80089e8:	d112      	bne.n	8008a10 <__mdiff+0x3c>
 80089ea:	4629      	mov	r1, r5
 80089ec:	4630      	mov	r0, r6
 80089ee:	f7ff fd5b 	bl	80084a8 <_Balloc>
 80089f2:	4602      	mov	r2, r0
 80089f4:	b928      	cbnz	r0, 8008a02 <__mdiff+0x2e>
 80089f6:	4b3f      	ldr	r3, [pc, #252]	@ (8008af4 <__mdiff+0x120>)
 80089f8:	f240 2137 	movw	r1, #567	@ 0x237
 80089fc:	483e      	ldr	r0, [pc, #248]	@ (8008af8 <__mdiff+0x124>)
 80089fe:	f000 fb11 	bl	8009024 <__assert_func>
 8008a02:	2301      	movs	r3, #1
 8008a04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a08:	4610      	mov	r0, r2
 8008a0a:	b003      	add	sp, #12
 8008a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a10:	bfbc      	itt	lt
 8008a12:	464b      	movlt	r3, r9
 8008a14:	46a1      	movlt	r9, r4
 8008a16:	4630      	mov	r0, r6
 8008a18:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008a1c:	bfba      	itte	lt
 8008a1e:	461c      	movlt	r4, r3
 8008a20:	2501      	movlt	r5, #1
 8008a22:	2500      	movge	r5, #0
 8008a24:	f7ff fd40 	bl	80084a8 <_Balloc>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	b918      	cbnz	r0, 8008a34 <__mdiff+0x60>
 8008a2c:	4b31      	ldr	r3, [pc, #196]	@ (8008af4 <__mdiff+0x120>)
 8008a2e:	f240 2145 	movw	r1, #581	@ 0x245
 8008a32:	e7e3      	b.n	80089fc <__mdiff+0x28>
 8008a34:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008a38:	6926      	ldr	r6, [r4, #16]
 8008a3a:	60c5      	str	r5, [r0, #12]
 8008a3c:	f109 0310 	add.w	r3, r9, #16
 8008a40:	f109 0514 	add.w	r5, r9, #20
 8008a44:	f104 0e14 	add.w	lr, r4, #20
 8008a48:	f100 0b14 	add.w	fp, r0, #20
 8008a4c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008a50:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008a54:	9301      	str	r3, [sp, #4]
 8008a56:	46d9      	mov	r9, fp
 8008a58:	f04f 0c00 	mov.w	ip, #0
 8008a5c:	9b01      	ldr	r3, [sp, #4]
 8008a5e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008a62:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008a66:	9301      	str	r3, [sp, #4]
 8008a68:	fa1f f38a 	uxth.w	r3, sl
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	b283      	uxth	r3, r0
 8008a70:	1acb      	subs	r3, r1, r3
 8008a72:	0c00      	lsrs	r0, r0, #16
 8008a74:	4463      	add	r3, ip
 8008a76:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008a7a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008a84:	4576      	cmp	r6, lr
 8008a86:	f849 3b04 	str.w	r3, [r9], #4
 8008a8a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008a8e:	d8e5      	bhi.n	8008a5c <__mdiff+0x88>
 8008a90:	1b33      	subs	r3, r6, r4
 8008a92:	3b15      	subs	r3, #21
 8008a94:	f023 0303 	bic.w	r3, r3, #3
 8008a98:	3415      	adds	r4, #21
 8008a9a:	3304      	adds	r3, #4
 8008a9c:	42a6      	cmp	r6, r4
 8008a9e:	bf38      	it	cc
 8008aa0:	2304      	movcc	r3, #4
 8008aa2:	441d      	add	r5, r3
 8008aa4:	445b      	add	r3, fp
 8008aa6:	461e      	mov	r6, r3
 8008aa8:	462c      	mov	r4, r5
 8008aaa:	4544      	cmp	r4, r8
 8008aac:	d30e      	bcc.n	8008acc <__mdiff+0xf8>
 8008aae:	f108 0103 	add.w	r1, r8, #3
 8008ab2:	1b49      	subs	r1, r1, r5
 8008ab4:	f021 0103 	bic.w	r1, r1, #3
 8008ab8:	3d03      	subs	r5, #3
 8008aba:	45a8      	cmp	r8, r5
 8008abc:	bf38      	it	cc
 8008abe:	2100      	movcc	r1, #0
 8008ac0:	440b      	add	r3, r1
 8008ac2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ac6:	b191      	cbz	r1, 8008aee <__mdiff+0x11a>
 8008ac8:	6117      	str	r7, [r2, #16]
 8008aca:	e79d      	b.n	8008a08 <__mdiff+0x34>
 8008acc:	f854 1b04 	ldr.w	r1, [r4], #4
 8008ad0:	46e6      	mov	lr, ip
 8008ad2:	0c08      	lsrs	r0, r1, #16
 8008ad4:	fa1c fc81 	uxtah	ip, ip, r1
 8008ad8:	4471      	add	r1, lr
 8008ada:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008ade:	b289      	uxth	r1, r1
 8008ae0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008ae4:	f846 1b04 	str.w	r1, [r6], #4
 8008ae8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008aec:	e7dd      	b.n	8008aaa <__mdiff+0xd6>
 8008aee:	3f01      	subs	r7, #1
 8008af0:	e7e7      	b.n	8008ac2 <__mdiff+0xee>
 8008af2:	bf00      	nop
 8008af4:	08009890 	.word	0x08009890
 8008af8:	080098a1 	.word	0x080098a1

08008afc <__d2b>:
 8008afc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008b00:	460f      	mov	r7, r1
 8008b02:	2101      	movs	r1, #1
 8008b04:	ec59 8b10 	vmov	r8, r9, d0
 8008b08:	4616      	mov	r6, r2
 8008b0a:	f7ff fccd 	bl	80084a8 <_Balloc>
 8008b0e:	4604      	mov	r4, r0
 8008b10:	b930      	cbnz	r0, 8008b20 <__d2b+0x24>
 8008b12:	4602      	mov	r2, r0
 8008b14:	4b23      	ldr	r3, [pc, #140]	@ (8008ba4 <__d2b+0xa8>)
 8008b16:	4824      	ldr	r0, [pc, #144]	@ (8008ba8 <__d2b+0xac>)
 8008b18:	f240 310f 	movw	r1, #783	@ 0x30f
 8008b1c:	f000 fa82 	bl	8009024 <__assert_func>
 8008b20:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008b24:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b28:	b10d      	cbz	r5, 8008b2e <__d2b+0x32>
 8008b2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b2e:	9301      	str	r3, [sp, #4]
 8008b30:	f1b8 0300 	subs.w	r3, r8, #0
 8008b34:	d023      	beq.n	8008b7e <__d2b+0x82>
 8008b36:	4668      	mov	r0, sp
 8008b38:	9300      	str	r3, [sp, #0]
 8008b3a:	f7ff fd7c 	bl	8008636 <__lo0bits>
 8008b3e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008b42:	b1d0      	cbz	r0, 8008b7a <__d2b+0x7e>
 8008b44:	f1c0 0320 	rsb	r3, r0, #32
 8008b48:	fa02 f303 	lsl.w	r3, r2, r3
 8008b4c:	430b      	orrs	r3, r1
 8008b4e:	40c2      	lsrs	r2, r0
 8008b50:	6163      	str	r3, [r4, #20]
 8008b52:	9201      	str	r2, [sp, #4]
 8008b54:	9b01      	ldr	r3, [sp, #4]
 8008b56:	61a3      	str	r3, [r4, #24]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	bf0c      	ite	eq
 8008b5c:	2201      	moveq	r2, #1
 8008b5e:	2202      	movne	r2, #2
 8008b60:	6122      	str	r2, [r4, #16]
 8008b62:	b1a5      	cbz	r5, 8008b8e <__d2b+0x92>
 8008b64:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008b68:	4405      	add	r5, r0
 8008b6a:	603d      	str	r5, [r7, #0]
 8008b6c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008b70:	6030      	str	r0, [r6, #0]
 8008b72:	4620      	mov	r0, r4
 8008b74:	b003      	add	sp, #12
 8008b76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b7a:	6161      	str	r1, [r4, #20]
 8008b7c:	e7ea      	b.n	8008b54 <__d2b+0x58>
 8008b7e:	a801      	add	r0, sp, #4
 8008b80:	f7ff fd59 	bl	8008636 <__lo0bits>
 8008b84:	9b01      	ldr	r3, [sp, #4]
 8008b86:	6163      	str	r3, [r4, #20]
 8008b88:	3020      	adds	r0, #32
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	e7e8      	b.n	8008b60 <__d2b+0x64>
 8008b8e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008b92:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008b96:	6038      	str	r0, [r7, #0]
 8008b98:	6918      	ldr	r0, [r3, #16]
 8008b9a:	f7ff fd2d 	bl	80085f8 <__hi0bits>
 8008b9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008ba2:	e7e5      	b.n	8008b70 <__d2b+0x74>
 8008ba4:	08009890 	.word	0x08009890
 8008ba8:	080098a1 	.word	0x080098a1

08008bac <__ssputs_r>:
 8008bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bb0:	688e      	ldr	r6, [r1, #8]
 8008bb2:	461f      	mov	r7, r3
 8008bb4:	42be      	cmp	r6, r7
 8008bb6:	680b      	ldr	r3, [r1, #0]
 8008bb8:	4682      	mov	sl, r0
 8008bba:	460c      	mov	r4, r1
 8008bbc:	4690      	mov	r8, r2
 8008bbe:	d82d      	bhi.n	8008c1c <__ssputs_r+0x70>
 8008bc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008bc4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008bc8:	d026      	beq.n	8008c18 <__ssputs_r+0x6c>
 8008bca:	6965      	ldr	r5, [r4, #20]
 8008bcc:	6909      	ldr	r1, [r1, #16]
 8008bce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008bd2:	eba3 0901 	sub.w	r9, r3, r1
 8008bd6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008bda:	1c7b      	adds	r3, r7, #1
 8008bdc:	444b      	add	r3, r9
 8008bde:	106d      	asrs	r5, r5, #1
 8008be0:	429d      	cmp	r5, r3
 8008be2:	bf38      	it	cc
 8008be4:	461d      	movcc	r5, r3
 8008be6:	0553      	lsls	r3, r2, #21
 8008be8:	d527      	bpl.n	8008c3a <__ssputs_r+0x8e>
 8008bea:	4629      	mov	r1, r5
 8008bec:	f7ff fbd0 	bl	8008390 <_malloc_r>
 8008bf0:	4606      	mov	r6, r0
 8008bf2:	b360      	cbz	r0, 8008c4e <__ssputs_r+0xa2>
 8008bf4:	6921      	ldr	r1, [r4, #16]
 8008bf6:	464a      	mov	r2, r9
 8008bf8:	f000 fa06 	bl	8009008 <memcpy>
 8008bfc:	89a3      	ldrh	r3, [r4, #12]
 8008bfe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008c02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c06:	81a3      	strh	r3, [r4, #12]
 8008c08:	6126      	str	r6, [r4, #16]
 8008c0a:	6165      	str	r5, [r4, #20]
 8008c0c:	444e      	add	r6, r9
 8008c0e:	eba5 0509 	sub.w	r5, r5, r9
 8008c12:	6026      	str	r6, [r4, #0]
 8008c14:	60a5      	str	r5, [r4, #8]
 8008c16:	463e      	mov	r6, r7
 8008c18:	42be      	cmp	r6, r7
 8008c1a:	d900      	bls.n	8008c1e <__ssputs_r+0x72>
 8008c1c:	463e      	mov	r6, r7
 8008c1e:	6820      	ldr	r0, [r4, #0]
 8008c20:	4632      	mov	r2, r6
 8008c22:	4641      	mov	r1, r8
 8008c24:	f000 f9c6 	bl	8008fb4 <memmove>
 8008c28:	68a3      	ldr	r3, [r4, #8]
 8008c2a:	1b9b      	subs	r3, r3, r6
 8008c2c:	60a3      	str	r3, [r4, #8]
 8008c2e:	6823      	ldr	r3, [r4, #0]
 8008c30:	4433      	add	r3, r6
 8008c32:	6023      	str	r3, [r4, #0]
 8008c34:	2000      	movs	r0, #0
 8008c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c3a:	462a      	mov	r2, r5
 8008c3c:	f000 fa36 	bl	80090ac <_realloc_r>
 8008c40:	4606      	mov	r6, r0
 8008c42:	2800      	cmp	r0, #0
 8008c44:	d1e0      	bne.n	8008c08 <__ssputs_r+0x5c>
 8008c46:	6921      	ldr	r1, [r4, #16]
 8008c48:	4650      	mov	r0, sl
 8008c4a:	f7ff fb2d 	bl	80082a8 <_free_r>
 8008c4e:	230c      	movs	r3, #12
 8008c50:	f8ca 3000 	str.w	r3, [sl]
 8008c54:	89a3      	ldrh	r3, [r4, #12]
 8008c56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c5a:	81a3      	strh	r3, [r4, #12]
 8008c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c60:	e7e9      	b.n	8008c36 <__ssputs_r+0x8a>
	...

08008c64 <_svfiprintf_r>:
 8008c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c68:	4698      	mov	r8, r3
 8008c6a:	898b      	ldrh	r3, [r1, #12]
 8008c6c:	061b      	lsls	r3, r3, #24
 8008c6e:	b09d      	sub	sp, #116	@ 0x74
 8008c70:	4607      	mov	r7, r0
 8008c72:	460d      	mov	r5, r1
 8008c74:	4614      	mov	r4, r2
 8008c76:	d510      	bpl.n	8008c9a <_svfiprintf_r+0x36>
 8008c78:	690b      	ldr	r3, [r1, #16]
 8008c7a:	b973      	cbnz	r3, 8008c9a <_svfiprintf_r+0x36>
 8008c7c:	2140      	movs	r1, #64	@ 0x40
 8008c7e:	f7ff fb87 	bl	8008390 <_malloc_r>
 8008c82:	6028      	str	r0, [r5, #0]
 8008c84:	6128      	str	r0, [r5, #16]
 8008c86:	b930      	cbnz	r0, 8008c96 <_svfiprintf_r+0x32>
 8008c88:	230c      	movs	r3, #12
 8008c8a:	603b      	str	r3, [r7, #0]
 8008c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c90:	b01d      	add	sp, #116	@ 0x74
 8008c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c96:	2340      	movs	r3, #64	@ 0x40
 8008c98:	616b      	str	r3, [r5, #20]
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c9e:	2320      	movs	r3, #32
 8008ca0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ca4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ca8:	2330      	movs	r3, #48	@ 0x30
 8008caa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008e48 <_svfiprintf_r+0x1e4>
 8008cae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008cb2:	f04f 0901 	mov.w	r9, #1
 8008cb6:	4623      	mov	r3, r4
 8008cb8:	469a      	mov	sl, r3
 8008cba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cbe:	b10a      	cbz	r2, 8008cc4 <_svfiprintf_r+0x60>
 8008cc0:	2a25      	cmp	r2, #37	@ 0x25
 8008cc2:	d1f9      	bne.n	8008cb8 <_svfiprintf_r+0x54>
 8008cc4:	ebba 0b04 	subs.w	fp, sl, r4
 8008cc8:	d00b      	beq.n	8008ce2 <_svfiprintf_r+0x7e>
 8008cca:	465b      	mov	r3, fp
 8008ccc:	4622      	mov	r2, r4
 8008cce:	4629      	mov	r1, r5
 8008cd0:	4638      	mov	r0, r7
 8008cd2:	f7ff ff6b 	bl	8008bac <__ssputs_r>
 8008cd6:	3001      	adds	r0, #1
 8008cd8:	f000 80a7 	beq.w	8008e2a <_svfiprintf_r+0x1c6>
 8008cdc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008cde:	445a      	add	r2, fp
 8008ce0:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ce2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	f000 809f 	beq.w	8008e2a <_svfiprintf_r+0x1c6>
 8008cec:	2300      	movs	r3, #0
 8008cee:	f04f 32ff 	mov.w	r2, #4294967295
 8008cf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cf6:	f10a 0a01 	add.w	sl, sl, #1
 8008cfa:	9304      	str	r3, [sp, #16]
 8008cfc:	9307      	str	r3, [sp, #28]
 8008cfe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d02:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d04:	4654      	mov	r4, sl
 8008d06:	2205      	movs	r2, #5
 8008d08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d0c:	484e      	ldr	r0, [pc, #312]	@ (8008e48 <_svfiprintf_r+0x1e4>)
 8008d0e:	f7f7 fa5f 	bl	80001d0 <memchr>
 8008d12:	9a04      	ldr	r2, [sp, #16]
 8008d14:	b9d8      	cbnz	r0, 8008d4e <_svfiprintf_r+0xea>
 8008d16:	06d0      	lsls	r0, r2, #27
 8008d18:	bf44      	itt	mi
 8008d1a:	2320      	movmi	r3, #32
 8008d1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d20:	0711      	lsls	r1, r2, #28
 8008d22:	bf44      	itt	mi
 8008d24:	232b      	movmi	r3, #43	@ 0x2b
 8008d26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d2a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d30:	d015      	beq.n	8008d5e <_svfiprintf_r+0xfa>
 8008d32:	9a07      	ldr	r2, [sp, #28]
 8008d34:	4654      	mov	r4, sl
 8008d36:	2000      	movs	r0, #0
 8008d38:	f04f 0c0a 	mov.w	ip, #10
 8008d3c:	4621      	mov	r1, r4
 8008d3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d42:	3b30      	subs	r3, #48	@ 0x30
 8008d44:	2b09      	cmp	r3, #9
 8008d46:	d94b      	bls.n	8008de0 <_svfiprintf_r+0x17c>
 8008d48:	b1b0      	cbz	r0, 8008d78 <_svfiprintf_r+0x114>
 8008d4a:	9207      	str	r2, [sp, #28]
 8008d4c:	e014      	b.n	8008d78 <_svfiprintf_r+0x114>
 8008d4e:	eba0 0308 	sub.w	r3, r0, r8
 8008d52:	fa09 f303 	lsl.w	r3, r9, r3
 8008d56:	4313      	orrs	r3, r2
 8008d58:	9304      	str	r3, [sp, #16]
 8008d5a:	46a2      	mov	sl, r4
 8008d5c:	e7d2      	b.n	8008d04 <_svfiprintf_r+0xa0>
 8008d5e:	9b03      	ldr	r3, [sp, #12]
 8008d60:	1d19      	adds	r1, r3, #4
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	9103      	str	r1, [sp, #12]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	bfbb      	ittet	lt
 8008d6a:	425b      	neglt	r3, r3
 8008d6c:	f042 0202 	orrlt.w	r2, r2, #2
 8008d70:	9307      	strge	r3, [sp, #28]
 8008d72:	9307      	strlt	r3, [sp, #28]
 8008d74:	bfb8      	it	lt
 8008d76:	9204      	strlt	r2, [sp, #16]
 8008d78:	7823      	ldrb	r3, [r4, #0]
 8008d7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d7c:	d10a      	bne.n	8008d94 <_svfiprintf_r+0x130>
 8008d7e:	7863      	ldrb	r3, [r4, #1]
 8008d80:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d82:	d132      	bne.n	8008dea <_svfiprintf_r+0x186>
 8008d84:	9b03      	ldr	r3, [sp, #12]
 8008d86:	1d1a      	adds	r2, r3, #4
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	9203      	str	r2, [sp, #12]
 8008d8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008d90:	3402      	adds	r4, #2
 8008d92:	9305      	str	r3, [sp, #20]
 8008d94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008e58 <_svfiprintf_r+0x1f4>
 8008d98:	7821      	ldrb	r1, [r4, #0]
 8008d9a:	2203      	movs	r2, #3
 8008d9c:	4650      	mov	r0, sl
 8008d9e:	f7f7 fa17 	bl	80001d0 <memchr>
 8008da2:	b138      	cbz	r0, 8008db4 <_svfiprintf_r+0x150>
 8008da4:	9b04      	ldr	r3, [sp, #16]
 8008da6:	eba0 000a 	sub.w	r0, r0, sl
 8008daa:	2240      	movs	r2, #64	@ 0x40
 8008dac:	4082      	lsls	r2, r0
 8008dae:	4313      	orrs	r3, r2
 8008db0:	3401      	adds	r4, #1
 8008db2:	9304      	str	r3, [sp, #16]
 8008db4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008db8:	4824      	ldr	r0, [pc, #144]	@ (8008e4c <_svfiprintf_r+0x1e8>)
 8008dba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008dbe:	2206      	movs	r2, #6
 8008dc0:	f7f7 fa06 	bl	80001d0 <memchr>
 8008dc4:	2800      	cmp	r0, #0
 8008dc6:	d036      	beq.n	8008e36 <_svfiprintf_r+0x1d2>
 8008dc8:	4b21      	ldr	r3, [pc, #132]	@ (8008e50 <_svfiprintf_r+0x1ec>)
 8008dca:	bb1b      	cbnz	r3, 8008e14 <_svfiprintf_r+0x1b0>
 8008dcc:	9b03      	ldr	r3, [sp, #12]
 8008dce:	3307      	adds	r3, #7
 8008dd0:	f023 0307 	bic.w	r3, r3, #7
 8008dd4:	3308      	adds	r3, #8
 8008dd6:	9303      	str	r3, [sp, #12]
 8008dd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dda:	4433      	add	r3, r6
 8008ddc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dde:	e76a      	b.n	8008cb6 <_svfiprintf_r+0x52>
 8008de0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008de4:	460c      	mov	r4, r1
 8008de6:	2001      	movs	r0, #1
 8008de8:	e7a8      	b.n	8008d3c <_svfiprintf_r+0xd8>
 8008dea:	2300      	movs	r3, #0
 8008dec:	3401      	adds	r4, #1
 8008dee:	9305      	str	r3, [sp, #20]
 8008df0:	4619      	mov	r1, r3
 8008df2:	f04f 0c0a 	mov.w	ip, #10
 8008df6:	4620      	mov	r0, r4
 8008df8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008dfc:	3a30      	subs	r2, #48	@ 0x30
 8008dfe:	2a09      	cmp	r2, #9
 8008e00:	d903      	bls.n	8008e0a <_svfiprintf_r+0x1a6>
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d0c6      	beq.n	8008d94 <_svfiprintf_r+0x130>
 8008e06:	9105      	str	r1, [sp, #20]
 8008e08:	e7c4      	b.n	8008d94 <_svfiprintf_r+0x130>
 8008e0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e0e:	4604      	mov	r4, r0
 8008e10:	2301      	movs	r3, #1
 8008e12:	e7f0      	b.n	8008df6 <_svfiprintf_r+0x192>
 8008e14:	ab03      	add	r3, sp, #12
 8008e16:	9300      	str	r3, [sp, #0]
 8008e18:	462a      	mov	r2, r5
 8008e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8008e54 <_svfiprintf_r+0x1f0>)
 8008e1c:	a904      	add	r1, sp, #16
 8008e1e:	4638      	mov	r0, r7
 8008e20:	f7fd fe64 	bl	8006aec <_printf_float>
 8008e24:	1c42      	adds	r2, r0, #1
 8008e26:	4606      	mov	r6, r0
 8008e28:	d1d6      	bne.n	8008dd8 <_svfiprintf_r+0x174>
 8008e2a:	89ab      	ldrh	r3, [r5, #12]
 8008e2c:	065b      	lsls	r3, r3, #25
 8008e2e:	f53f af2d 	bmi.w	8008c8c <_svfiprintf_r+0x28>
 8008e32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e34:	e72c      	b.n	8008c90 <_svfiprintf_r+0x2c>
 8008e36:	ab03      	add	r3, sp, #12
 8008e38:	9300      	str	r3, [sp, #0]
 8008e3a:	462a      	mov	r2, r5
 8008e3c:	4b05      	ldr	r3, [pc, #20]	@ (8008e54 <_svfiprintf_r+0x1f0>)
 8008e3e:	a904      	add	r1, sp, #16
 8008e40:	4638      	mov	r0, r7
 8008e42:	f7fe f8eb 	bl	800701c <_printf_i>
 8008e46:	e7ed      	b.n	8008e24 <_svfiprintf_r+0x1c0>
 8008e48:	080099f8 	.word	0x080099f8
 8008e4c:	08009a02 	.word	0x08009a02
 8008e50:	08006aed 	.word	0x08006aed
 8008e54:	08008bad 	.word	0x08008bad
 8008e58:	080099fe 	.word	0x080099fe

08008e5c <__sflush_r>:
 8008e5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e64:	0716      	lsls	r6, r2, #28
 8008e66:	4605      	mov	r5, r0
 8008e68:	460c      	mov	r4, r1
 8008e6a:	d454      	bmi.n	8008f16 <__sflush_r+0xba>
 8008e6c:	684b      	ldr	r3, [r1, #4]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	dc02      	bgt.n	8008e78 <__sflush_r+0x1c>
 8008e72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	dd48      	ble.n	8008f0a <__sflush_r+0xae>
 8008e78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e7a:	2e00      	cmp	r6, #0
 8008e7c:	d045      	beq.n	8008f0a <__sflush_r+0xae>
 8008e7e:	2300      	movs	r3, #0
 8008e80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008e84:	682f      	ldr	r7, [r5, #0]
 8008e86:	6a21      	ldr	r1, [r4, #32]
 8008e88:	602b      	str	r3, [r5, #0]
 8008e8a:	d030      	beq.n	8008eee <__sflush_r+0x92>
 8008e8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008e8e:	89a3      	ldrh	r3, [r4, #12]
 8008e90:	0759      	lsls	r1, r3, #29
 8008e92:	d505      	bpl.n	8008ea0 <__sflush_r+0x44>
 8008e94:	6863      	ldr	r3, [r4, #4]
 8008e96:	1ad2      	subs	r2, r2, r3
 8008e98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008e9a:	b10b      	cbz	r3, 8008ea0 <__sflush_r+0x44>
 8008e9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008e9e:	1ad2      	subs	r2, r2, r3
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008ea4:	6a21      	ldr	r1, [r4, #32]
 8008ea6:	4628      	mov	r0, r5
 8008ea8:	47b0      	blx	r6
 8008eaa:	1c43      	adds	r3, r0, #1
 8008eac:	89a3      	ldrh	r3, [r4, #12]
 8008eae:	d106      	bne.n	8008ebe <__sflush_r+0x62>
 8008eb0:	6829      	ldr	r1, [r5, #0]
 8008eb2:	291d      	cmp	r1, #29
 8008eb4:	d82b      	bhi.n	8008f0e <__sflush_r+0xb2>
 8008eb6:	4a2a      	ldr	r2, [pc, #168]	@ (8008f60 <__sflush_r+0x104>)
 8008eb8:	410a      	asrs	r2, r1
 8008eba:	07d6      	lsls	r6, r2, #31
 8008ebc:	d427      	bmi.n	8008f0e <__sflush_r+0xb2>
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	6062      	str	r2, [r4, #4]
 8008ec2:	04d9      	lsls	r1, r3, #19
 8008ec4:	6922      	ldr	r2, [r4, #16]
 8008ec6:	6022      	str	r2, [r4, #0]
 8008ec8:	d504      	bpl.n	8008ed4 <__sflush_r+0x78>
 8008eca:	1c42      	adds	r2, r0, #1
 8008ecc:	d101      	bne.n	8008ed2 <__sflush_r+0x76>
 8008ece:	682b      	ldr	r3, [r5, #0]
 8008ed0:	b903      	cbnz	r3, 8008ed4 <__sflush_r+0x78>
 8008ed2:	6560      	str	r0, [r4, #84]	@ 0x54
 8008ed4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ed6:	602f      	str	r7, [r5, #0]
 8008ed8:	b1b9      	cbz	r1, 8008f0a <__sflush_r+0xae>
 8008eda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ede:	4299      	cmp	r1, r3
 8008ee0:	d002      	beq.n	8008ee8 <__sflush_r+0x8c>
 8008ee2:	4628      	mov	r0, r5
 8008ee4:	f7ff f9e0 	bl	80082a8 <_free_r>
 8008ee8:	2300      	movs	r3, #0
 8008eea:	6363      	str	r3, [r4, #52]	@ 0x34
 8008eec:	e00d      	b.n	8008f0a <__sflush_r+0xae>
 8008eee:	2301      	movs	r3, #1
 8008ef0:	4628      	mov	r0, r5
 8008ef2:	47b0      	blx	r6
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	1c50      	adds	r0, r2, #1
 8008ef8:	d1c9      	bne.n	8008e8e <__sflush_r+0x32>
 8008efa:	682b      	ldr	r3, [r5, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d0c6      	beq.n	8008e8e <__sflush_r+0x32>
 8008f00:	2b1d      	cmp	r3, #29
 8008f02:	d001      	beq.n	8008f08 <__sflush_r+0xac>
 8008f04:	2b16      	cmp	r3, #22
 8008f06:	d11e      	bne.n	8008f46 <__sflush_r+0xea>
 8008f08:	602f      	str	r7, [r5, #0]
 8008f0a:	2000      	movs	r0, #0
 8008f0c:	e022      	b.n	8008f54 <__sflush_r+0xf8>
 8008f0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f12:	b21b      	sxth	r3, r3
 8008f14:	e01b      	b.n	8008f4e <__sflush_r+0xf2>
 8008f16:	690f      	ldr	r7, [r1, #16]
 8008f18:	2f00      	cmp	r7, #0
 8008f1a:	d0f6      	beq.n	8008f0a <__sflush_r+0xae>
 8008f1c:	0793      	lsls	r3, r2, #30
 8008f1e:	680e      	ldr	r6, [r1, #0]
 8008f20:	bf08      	it	eq
 8008f22:	694b      	ldreq	r3, [r1, #20]
 8008f24:	600f      	str	r7, [r1, #0]
 8008f26:	bf18      	it	ne
 8008f28:	2300      	movne	r3, #0
 8008f2a:	eba6 0807 	sub.w	r8, r6, r7
 8008f2e:	608b      	str	r3, [r1, #8]
 8008f30:	f1b8 0f00 	cmp.w	r8, #0
 8008f34:	dde9      	ble.n	8008f0a <__sflush_r+0xae>
 8008f36:	6a21      	ldr	r1, [r4, #32]
 8008f38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008f3a:	4643      	mov	r3, r8
 8008f3c:	463a      	mov	r2, r7
 8008f3e:	4628      	mov	r0, r5
 8008f40:	47b0      	blx	r6
 8008f42:	2800      	cmp	r0, #0
 8008f44:	dc08      	bgt.n	8008f58 <__sflush_r+0xfc>
 8008f46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f4e:	81a3      	strh	r3, [r4, #12]
 8008f50:	f04f 30ff 	mov.w	r0, #4294967295
 8008f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f58:	4407      	add	r7, r0
 8008f5a:	eba8 0800 	sub.w	r8, r8, r0
 8008f5e:	e7e7      	b.n	8008f30 <__sflush_r+0xd4>
 8008f60:	dfbffffe 	.word	0xdfbffffe

08008f64 <_fflush_r>:
 8008f64:	b538      	push	{r3, r4, r5, lr}
 8008f66:	690b      	ldr	r3, [r1, #16]
 8008f68:	4605      	mov	r5, r0
 8008f6a:	460c      	mov	r4, r1
 8008f6c:	b913      	cbnz	r3, 8008f74 <_fflush_r+0x10>
 8008f6e:	2500      	movs	r5, #0
 8008f70:	4628      	mov	r0, r5
 8008f72:	bd38      	pop	{r3, r4, r5, pc}
 8008f74:	b118      	cbz	r0, 8008f7e <_fflush_r+0x1a>
 8008f76:	6a03      	ldr	r3, [r0, #32]
 8008f78:	b90b      	cbnz	r3, 8008f7e <_fflush_r+0x1a>
 8008f7a:	f7fe f9fb 	bl	8007374 <__sinit>
 8008f7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d0f3      	beq.n	8008f6e <_fflush_r+0xa>
 8008f86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008f88:	07d0      	lsls	r0, r2, #31
 8008f8a:	d404      	bmi.n	8008f96 <_fflush_r+0x32>
 8008f8c:	0599      	lsls	r1, r3, #22
 8008f8e:	d402      	bmi.n	8008f96 <_fflush_r+0x32>
 8008f90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f92:	f7fe fb3a 	bl	800760a <__retarget_lock_acquire_recursive>
 8008f96:	4628      	mov	r0, r5
 8008f98:	4621      	mov	r1, r4
 8008f9a:	f7ff ff5f 	bl	8008e5c <__sflush_r>
 8008f9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008fa0:	07da      	lsls	r2, r3, #31
 8008fa2:	4605      	mov	r5, r0
 8008fa4:	d4e4      	bmi.n	8008f70 <_fflush_r+0xc>
 8008fa6:	89a3      	ldrh	r3, [r4, #12]
 8008fa8:	059b      	lsls	r3, r3, #22
 8008faa:	d4e1      	bmi.n	8008f70 <_fflush_r+0xc>
 8008fac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008fae:	f7fe fb2d 	bl	800760c <__retarget_lock_release_recursive>
 8008fb2:	e7dd      	b.n	8008f70 <_fflush_r+0xc>

08008fb4 <memmove>:
 8008fb4:	4288      	cmp	r0, r1
 8008fb6:	b510      	push	{r4, lr}
 8008fb8:	eb01 0402 	add.w	r4, r1, r2
 8008fbc:	d902      	bls.n	8008fc4 <memmove+0x10>
 8008fbe:	4284      	cmp	r4, r0
 8008fc0:	4623      	mov	r3, r4
 8008fc2:	d807      	bhi.n	8008fd4 <memmove+0x20>
 8008fc4:	1e43      	subs	r3, r0, #1
 8008fc6:	42a1      	cmp	r1, r4
 8008fc8:	d008      	beq.n	8008fdc <memmove+0x28>
 8008fca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008fce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008fd2:	e7f8      	b.n	8008fc6 <memmove+0x12>
 8008fd4:	4402      	add	r2, r0
 8008fd6:	4601      	mov	r1, r0
 8008fd8:	428a      	cmp	r2, r1
 8008fda:	d100      	bne.n	8008fde <memmove+0x2a>
 8008fdc:	bd10      	pop	{r4, pc}
 8008fde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fe2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008fe6:	e7f7      	b.n	8008fd8 <memmove+0x24>

08008fe8 <_sbrk_r>:
 8008fe8:	b538      	push	{r3, r4, r5, lr}
 8008fea:	4d06      	ldr	r5, [pc, #24]	@ (8009004 <_sbrk_r+0x1c>)
 8008fec:	2300      	movs	r3, #0
 8008fee:	4604      	mov	r4, r0
 8008ff0:	4608      	mov	r0, r1
 8008ff2:	602b      	str	r3, [r5, #0]
 8008ff4:	f7f9 fe22 	bl	8002c3c <_sbrk>
 8008ff8:	1c43      	adds	r3, r0, #1
 8008ffa:	d102      	bne.n	8009002 <_sbrk_r+0x1a>
 8008ffc:	682b      	ldr	r3, [r5, #0]
 8008ffe:	b103      	cbz	r3, 8009002 <_sbrk_r+0x1a>
 8009000:	6023      	str	r3, [r4, #0]
 8009002:	bd38      	pop	{r3, r4, r5, pc}
 8009004:	200005d4 	.word	0x200005d4

08009008 <memcpy>:
 8009008:	440a      	add	r2, r1
 800900a:	4291      	cmp	r1, r2
 800900c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009010:	d100      	bne.n	8009014 <memcpy+0xc>
 8009012:	4770      	bx	lr
 8009014:	b510      	push	{r4, lr}
 8009016:	f811 4b01 	ldrb.w	r4, [r1], #1
 800901a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800901e:	4291      	cmp	r1, r2
 8009020:	d1f9      	bne.n	8009016 <memcpy+0xe>
 8009022:	bd10      	pop	{r4, pc}

08009024 <__assert_func>:
 8009024:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009026:	4614      	mov	r4, r2
 8009028:	461a      	mov	r2, r3
 800902a:	4b09      	ldr	r3, [pc, #36]	@ (8009050 <__assert_func+0x2c>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4605      	mov	r5, r0
 8009030:	68d8      	ldr	r0, [r3, #12]
 8009032:	b954      	cbnz	r4, 800904a <__assert_func+0x26>
 8009034:	4b07      	ldr	r3, [pc, #28]	@ (8009054 <__assert_func+0x30>)
 8009036:	461c      	mov	r4, r3
 8009038:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800903c:	9100      	str	r1, [sp, #0]
 800903e:	462b      	mov	r3, r5
 8009040:	4905      	ldr	r1, [pc, #20]	@ (8009058 <__assert_func+0x34>)
 8009042:	f000 f86f 	bl	8009124 <fiprintf>
 8009046:	f000 f87f 	bl	8009148 <abort>
 800904a:	4b04      	ldr	r3, [pc, #16]	@ (800905c <__assert_func+0x38>)
 800904c:	e7f4      	b.n	8009038 <__assert_func+0x14>
 800904e:	bf00      	nop
 8009050:	2000002c 	.word	0x2000002c
 8009054:	08009a4e 	.word	0x08009a4e
 8009058:	08009a20 	.word	0x08009a20
 800905c:	08009a13 	.word	0x08009a13

08009060 <_calloc_r>:
 8009060:	b570      	push	{r4, r5, r6, lr}
 8009062:	fba1 5402 	umull	r5, r4, r1, r2
 8009066:	b93c      	cbnz	r4, 8009078 <_calloc_r+0x18>
 8009068:	4629      	mov	r1, r5
 800906a:	f7ff f991 	bl	8008390 <_malloc_r>
 800906e:	4606      	mov	r6, r0
 8009070:	b928      	cbnz	r0, 800907e <_calloc_r+0x1e>
 8009072:	2600      	movs	r6, #0
 8009074:	4630      	mov	r0, r6
 8009076:	bd70      	pop	{r4, r5, r6, pc}
 8009078:	220c      	movs	r2, #12
 800907a:	6002      	str	r2, [r0, #0]
 800907c:	e7f9      	b.n	8009072 <_calloc_r+0x12>
 800907e:	462a      	mov	r2, r5
 8009080:	4621      	mov	r1, r4
 8009082:	f7fe fa44 	bl	800750e <memset>
 8009086:	e7f5      	b.n	8009074 <_calloc_r+0x14>

08009088 <__ascii_mbtowc>:
 8009088:	b082      	sub	sp, #8
 800908a:	b901      	cbnz	r1, 800908e <__ascii_mbtowc+0x6>
 800908c:	a901      	add	r1, sp, #4
 800908e:	b142      	cbz	r2, 80090a2 <__ascii_mbtowc+0x1a>
 8009090:	b14b      	cbz	r3, 80090a6 <__ascii_mbtowc+0x1e>
 8009092:	7813      	ldrb	r3, [r2, #0]
 8009094:	600b      	str	r3, [r1, #0]
 8009096:	7812      	ldrb	r2, [r2, #0]
 8009098:	1e10      	subs	r0, r2, #0
 800909a:	bf18      	it	ne
 800909c:	2001      	movne	r0, #1
 800909e:	b002      	add	sp, #8
 80090a0:	4770      	bx	lr
 80090a2:	4610      	mov	r0, r2
 80090a4:	e7fb      	b.n	800909e <__ascii_mbtowc+0x16>
 80090a6:	f06f 0001 	mvn.w	r0, #1
 80090aa:	e7f8      	b.n	800909e <__ascii_mbtowc+0x16>

080090ac <_realloc_r>:
 80090ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090b0:	4680      	mov	r8, r0
 80090b2:	4615      	mov	r5, r2
 80090b4:	460c      	mov	r4, r1
 80090b6:	b921      	cbnz	r1, 80090c2 <_realloc_r+0x16>
 80090b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090bc:	4611      	mov	r1, r2
 80090be:	f7ff b967 	b.w	8008390 <_malloc_r>
 80090c2:	b92a      	cbnz	r2, 80090d0 <_realloc_r+0x24>
 80090c4:	f7ff f8f0 	bl	80082a8 <_free_r>
 80090c8:	2400      	movs	r4, #0
 80090ca:	4620      	mov	r0, r4
 80090cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090d0:	f000 f841 	bl	8009156 <_malloc_usable_size_r>
 80090d4:	4285      	cmp	r5, r0
 80090d6:	4606      	mov	r6, r0
 80090d8:	d802      	bhi.n	80090e0 <_realloc_r+0x34>
 80090da:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80090de:	d8f4      	bhi.n	80090ca <_realloc_r+0x1e>
 80090e0:	4629      	mov	r1, r5
 80090e2:	4640      	mov	r0, r8
 80090e4:	f7ff f954 	bl	8008390 <_malloc_r>
 80090e8:	4607      	mov	r7, r0
 80090ea:	2800      	cmp	r0, #0
 80090ec:	d0ec      	beq.n	80090c8 <_realloc_r+0x1c>
 80090ee:	42b5      	cmp	r5, r6
 80090f0:	462a      	mov	r2, r5
 80090f2:	4621      	mov	r1, r4
 80090f4:	bf28      	it	cs
 80090f6:	4632      	movcs	r2, r6
 80090f8:	f7ff ff86 	bl	8009008 <memcpy>
 80090fc:	4621      	mov	r1, r4
 80090fe:	4640      	mov	r0, r8
 8009100:	f7ff f8d2 	bl	80082a8 <_free_r>
 8009104:	463c      	mov	r4, r7
 8009106:	e7e0      	b.n	80090ca <_realloc_r+0x1e>

08009108 <__ascii_wctomb>:
 8009108:	4603      	mov	r3, r0
 800910a:	4608      	mov	r0, r1
 800910c:	b141      	cbz	r1, 8009120 <__ascii_wctomb+0x18>
 800910e:	2aff      	cmp	r2, #255	@ 0xff
 8009110:	d904      	bls.n	800911c <__ascii_wctomb+0x14>
 8009112:	228a      	movs	r2, #138	@ 0x8a
 8009114:	601a      	str	r2, [r3, #0]
 8009116:	f04f 30ff 	mov.w	r0, #4294967295
 800911a:	4770      	bx	lr
 800911c:	700a      	strb	r2, [r1, #0]
 800911e:	2001      	movs	r0, #1
 8009120:	4770      	bx	lr
	...

08009124 <fiprintf>:
 8009124:	b40e      	push	{r1, r2, r3}
 8009126:	b503      	push	{r0, r1, lr}
 8009128:	4601      	mov	r1, r0
 800912a:	ab03      	add	r3, sp, #12
 800912c:	4805      	ldr	r0, [pc, #20]	@ (8009144 <fiprintf+0x20>)
 800912e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009132:	6800      	ldr	r0, [r0, #0]
 8009134:	9301      	str	r3, [sp, #4]
 8009136:	f000 f83f 	bl	80091b8 <_vfiprintf_r>
 800913a:	b002      	add	sp, #8
 800913c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009140:	b003      	add	sp, #12
 8009142:	4770      	bx	lr
 8009144:	2000002c 	.word	0x2000002c

08009148 <abort>:
 8009148:	b508      	push	{r3, lr}
 800914a:	2006      	movs	r0, #6
 800914c:	f000 fa08 	bl	8009560 <raise>
 8009150:	2001      	movs	r0, #1
 8009152:	f7f9 fcfb 	bl	8002b4c <_exit>

08009156 <_malloc_usable_size_r>:
 8009156:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800915a:	1f18      	subs	r0, r3, #4
 800915c:	2b00      	cmp	r3, #0
 800915e:	bfbc      	itt	lt
 8009160:	580b      	ldrlt	r3, [r1, r0]
 8009162:	18c0      	addlt	r0, r0, r3
 8009164:	4770      	bx	lr

08009166 <__sfputc_r>:
 8009166:	6893      	ldr	r3, [r2, #8]
 8009168:	3b01      	subs	r3, #1
 800916a:	2b00      	cmp	r3, #0
 800916c:	b410      	push	{r4}
 800916e:	6093      	str	r3, [r2, #8]
 8009170:	da08      	bge.n	8009184 <__sfputc_r+0x1e>
 8009172:	6994      	ldr	r4, [r2, #24]
 8009174:	42a3      	cmp	r3, r4
 8009176:	db01      	blt.n	800917c <__sfputc_r+0x16>
 8009178:	290a      	cmp	r1, #10
 800917a:	d103      	bne.n	8009184 <__sfputc_r+0x1e>
 800917c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009180:	f000 b932 	b.w	80093e8 <__swbuf_r>
 8009184:	6813      	ldr	r3, [r2, #0]
 8009186:	1c58      	adds	r0, r3, #1
 8009188:	6010      	str	r0, [r2, #0]
 800918a:	7019      	strb	r1, [r3, #0]
 800918c:	4608      	mov	r0, r1
 800918e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009192:	4770      	bx	lr

08009194 <__sfputs_r>:
 8009194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009196:	4606      	mov	r6, r0
 8009198:	460f      	mov	r7, r1
 800919a:	4614      	mov	r4, r2
 800919c:	18d5      	adds	r5, r2, r3
 800919e:	42ac      	cmp	r4, r5
 80091a0:	d101      	bne.n	80091a6 <__sfputs_r+0x12>
 80091a2:	2000      	movs	r0, #0
 80091a4:	e007      	b.n	80091b6 <__sfputs_r+0x22>
 80091a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091aa:	463a      	mov	r2, r7
 80091ac:	4630      	mov	r0, r6
 80091ae:	f7ff ffda 	bl	8009166 <__sfputc_r>
 80091b2:	1c43      	adds	r3, r0, #1
 80091b4:	d1f3      	bne.n	800919e <__sfputs_r+0xa>
 80091b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080091b8 <_vfiprintf_r>:
 80091b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091bc:	460d      	mov	r5, r1
 80091be:	b09d      	sub	sp, #116	@ 0x74
 80091c0:	4614      	mov	r4, r2
 80091c2:	4698      	mov	r8, r3
 80091c4:	4606      	mov	r6, r0
 80091c6:	b118      	cbz	r0, 80091d0 <_vfiprintf_r+0x18>
 80091c8:	6a03      	ldr	r3, [r0, #32]
 80091ca:	b90b      	cbnz	r3, 80091d0 <_vfiprintf_r+0x18>
 80091cc:	f7fe f8d2 	bl	8007374 <__sinit>
 80091d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091d2:	07d9      	lsls	r1, r3, #31
 80091d4:	d405      	bmi.n	80091e2 <_vfiprintf_r+0x2a>
 80091d6:	89ab      	ldrh	r3, [r5, #12]
 80091d8:	059a      	lsls	r2, r3, #22
 80091da:	d402      	bmi.n	80091e2 <_vfiprintf_r+0x2a>
 80091dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091de:	f7fe fa14 	bl	800760a <__retarget_lock_acquire_recursive>
 80091e2:	89ab      	ldrh	r3, [r5, #12]
 80091e4:	071b      	lsls	r3, r3, #28
 80091e6:	d501      	bpl.n	80091ec <_vfiprintf_r+0x34>
 80091e8:	692b      	ldr	r3, [r5, #16]
 80091ea:	b99b      	cbnz	r3, 8009214 <_vfiprintf_r+0x5c>
 80091ec:	4629      	mov	r1, r5
 80091ee:	4630      	mov	r0, r6
 80091f0:	f000 f938 	bl	8009464 <__swsetup_r>
 80091f4:	b170      	cbz	r0, 8009214 <_vfiprintf_r+0x5c>
 80091f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091f8:	07dc      	lsls	r4, r3, #31
 80091fa:	d504      	bpl.n	8009206 <_vfiprintf_r+0x4e>
 80091fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009200:	b01d      	add	sp, #116	@ 0x74
 8009202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009206:	89ab      	ldrh	r3, [r5, #12]
 8009208:	0598      	lsls	r0, r3, #22
 800920a:	d4f7      	bmi.n	80091fc <_vfiprintf_r+0x44>
 800920c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800920e:	f7fe f9fd 	bl	800760c <__retarget_lock_release_recursive>
 8009212:	e7f3      	b.n	80091fc <_vfiprintf_r+0x44>
 8009214:	2300      	movs	r3, #0
 8009216:	9309      	str	r3, [sp, #36]	@ 0x24
 8009218:	2320      	movs	r3, #32
 800921a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800921e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009222:	2330      	movs	r3, #48	@ 0x30
 8009224:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80093d4 <_vfiprintf_r+0x21c>
 8009228:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800922c:	f04f 0901 	mov.w	r9, #1
 8009230:	4623      	mov	r3, r4
 8009232:	469a      	mov	sl, r3
 8009234:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009238:	b10a      	cbz	r2, 800923e <_vfiprintf_r+0x86>
 800923a:	2a25      	cmp	r2, #37	@ 0x25
 800923c:	d1f9      	bne.n	8009232 <_vfiprintf_r+0x7a>
 800923e:	ebba 0b04 	subs.w	fp, sl, r4
 8009242:	d00b      	beq.n	800925c <_vfiprintf_r+0xa4>
 8009244:	465b      	mov	r3, fp
 8009246:	4622      	mov	r2, r4
 8009248:	4629      	mov	r1, r5
 800924a:	4630      	mov	r0, r6
 800924c:	f7ff ffa2 	bl	8009194 <__sfputs_r>
 8009250:	3001      	adds	r0, #1
 8009252:	f000 80a7 	beq.w	80093a4 <_vfiprintf_r+0x1ec>
 8009256:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009258:	445a      	add	r2, fp
 800925a:	9209      	str	r2, [sp, #36]	@ 0x24
 800925c:	f89a 3000 	ldrb.w	r3, [sl]
 8009260:	2b00      	cmp	r3, #0
 8009262:	f000 809f 	beq.w	80093a4 <_vfiprintf_r+0x1ec>
 8009266:	2300      	movs	r3, #0
 8009268:	f04f 32ff 	mov.w	r2, #4294967295
 800926c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009270:	f10a 0a01 	add.w	sl, sl, #1
 8009274:	9304      	str	r3, [sp, #16]
 8009276:	9307      	str	r3, [sp, #28]
 8009278:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800927c:	931a      	str	r3, [sp, #104]	@ 0x68
 800927e:	4654      	mov	r4, sl
 8009280:	2205      	movs	r2, #5
 8009282:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009286:	4853      	ldr	r0, [pc, #332]	@ (80093d4 <_vfiprintf_r+0x21c>)
 8009288:	f7f6 ffa2 	bl	80001d0 <memchr>
 800928c:	9a04      	ldr	r2, [sp, #16]
 800928e:	b9d8      	cbnz	r0, 80092c8 <_vfiprintf_r+0x110>
 8009290:	06d1      	lsls	r1, r2, #27
 8009292:	bf44      	itt	mi
 8009294:	2320      	movmi	r3, #32
 8009296:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800929a:	0713      	lsls	r3, r2, #28
 800929c:	bf44      	itt	mi
 800929e:	232b      	movmi	r3, #43	@ 0x2b
 80092a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092a4:	f89a 3000 	ldrb.w	r3, [sl]
 80092a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80092aa:	d015      	beq.n	80092d8 <_vfiprintf_r+0x120>
 80092ac:	9a07      	ldr	r2, [sp, #28]
 80092ae:	4654      	mov	r4, sl
 80092b0:	2000      	movs	r0, #0
 80092b2:	f04f 0c0a 	mov.w	ip, #10
 80092b6:	4621      	mov	r1, r4
 80092b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092bc:	3b30      	subs	r3, #48	@ 0x30
 80092be:	2b09      	cmp	r3, #9
 80092c0:	d94b      	bls.n	800935a <_vfiprintf_r+0x1a2>
 80092c2:	b1b0      	cbz	r0, 80092f2 <_vfiprintf_r+0x13a>
 80092c4:	9207      	str	r2, [sp, #28]
 80092c6:	e014      	b.n	80092f2 <_vfiprintf_r+0x13a>
 80092c8:	eba0 0308 	sub.w	r3, r0, r8
 80092cc:	fa09 f303 	lsl.w	r3, r9, r3
 80092d0:	4313      	orrs	r3, r2
 80092d2:	9304      	str	r3, [sp, #16]
 80092d4:	46a2      	mov	sl, r4
 80092d6:	e7d2      	b.n	800927e <_vfiprintf_r+0xc6>
 80092d8:	9b03      	ldr	r3, [sp, #12]
 80092da:	1d19      	adds	r1, r3, #4
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	9103      	str	r1, [sp, #12]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	bfbb      	ittet	lt
 80092e4:	425b      	neglt	r3, r3
 80092e6:	f042 0202 	orrlt.w	r2, r2, #2
 80092ea:	9307      	strge	r3, [sp, #28]
 80092ec:	9307      	strlt	r3, [sp, #28]
 80092ee:	bfb8      	it	lt
 80092f0:	9204      	strlt	r2, [sp, #16]
 80092f2:	7823      	ldrb	r3, [r4, #0]
 80092f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80092f6:	d10a      	bne.n	800930e <_vfiprintf_r+0x156>
 80092f8:	7863      	ldrb	r3, [r4, #1]
 80092fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80092fc:	d132      	bne.n	8009364 <_vfiprintf_r+0x1ac>
 80092fe:	9b03      	ldr	r3, [sp, #12]
 8009300:	1d1a      	adds	r2, r3, #4
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	9203      	str	r2, [sp, #12]
 8009306:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800930a:	3402      	adds	r4, #2
 800930c:	9305      	str	r3, [sp, #20]
 800930e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80093e4 <_vfiprintf_r+0x22c>
 8009312:	7821      	ldrb	r1, [r4, #0]
 8009314:	2203      	movs	r2, #3
 8009316:	4650      	mov	r0, sl
 8009318:	f7f6 ff5a 	bl	80001d0 <memchr>
 800931c:	b138      	cbz	r0, 800932e <_vfiprintf_r+0x176>
 800931e:	9b04      	ldr	r3, [sp, #16]
 8009320:	eba0 000a 	sub.w	r0, r0, sl
 8009324:	2240      	movs	r2, #64	@ 0x40
 8009326:	4082      	lsls	r2, r0
 8009328:	4313      	orrs	r3, r2
 800932a:	3401      	adds	r4, #1
 800932c:	9304      	str	r3, [sp, #16]
 800932e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009332:	4829      	ldr	r0, [pc, #164]	@ (80093d8 <_vfiprintf_r+0x220>)
 8009334:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009338:	2206      	movs	r2, #6
 800933a:	f7f6 ff49 	bl	80001d0 <memchr>
 800933e:	2800      	cmp	r0, #0
 8009340:	d03f      	beq.n	80093c2 <_vfiprintf_r+0x20a>
 8009342:	4b26      	ldr	r3, [pc, #152]	@ (80093dc <_vfiprintf_r+0x224>)
 8009344:	bb1b      	cbnz	r3, 800938e <_vfiprintf_r+0x1d6>
 8009346:	9b03      	ldr	r3, [sp, #12]
 8009348:	3307      	adds	r3, #7
 800934a:	f023 0307 	bic.w	r3, r3, #7
 800934e:	3308      	adds	r3, #8
 8009350:	9303      	str	r3, [sp, #12]
 8009352:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009354:	443b      	add	r3, r7
 8009356:	9309      	str	r3, [sp, #36]	@ 0x24
 8009358:	e76a      	b.n	8009230 <_vfiprintf_r+0x78>
 800935a:	fb0c 3202 	mla	r2, ip, r2, r3
 800935e:	460c      	mov	r4, r1
 8009360:	2001      	movs	r0, #1
 8009362:	e7a8      	b.n	80092b6 <_vfiprintf_r+0xfe>
 8009364:	2300      	movs	r3, #0
 8009366:	3401      	adds	r4, #1
 8009368:	9305      	str	r3, [sp, #20]
 800936a:	4619      	mov	r1, r3
 800936c:	f04f 0c0a 	mov.w	ip, #10
 8009370:	4620      	mov	r0, r4
 8009372:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009376:	3a30      	subs	r2, #48	@ 0x30
 8009378:	2a09      	cmp	r2, #9
 800937a:	d903      	bls.n	8009384 <_vfiprintf_r+0x1cc>
 800937c:	2b00      	cmp	r3, #0
 800937e:	d0c6      	beq.n	800930e <_vfiprintf_r+0x156>
 8009380:	9105      	str	r1, [sp, #20]
 8009382:	e7c4      	b.n	800930e <_vfiprintf_r+0x156>
 8009384:	fb0c 2101 	mla	r1, ip, r1, r2
 8009388:	4604      	mov	r4, r0
 800938a:	2301      	movs	r3, #1
 800938c:	e7f0      	b.n	8009370 <_vfiprintf_r+0x1b8>
 800938e:	ab03      	add	r3, sp, #12
 8009390:	9300      	str	r3, [sp, #0]
 8009392:	462a      	mov	r2, r5
 8009394:	4b12      	ldr	r3, [pc, #72]	@ (80093e0 <_vfiprintf_r+0x228>)
 8009396:	a904      	add	r1, sp, #16
 8009398:	4630      	mov	r0, r6
 800939a:	f7fd fba7 	bl	8006aec <_printf_float>
 800939e:	4607      	mov	r7, r0
 80093a0:	1c78      	adds	r0, r7, #1
 80093a2:	d1d6      	bne.n	8009352 <_vfiprintf_r+0x19a>
 80093a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80093a6:	07d9      	lsls	r1, r3, #31
 80093a8:	d405      	bmi.n	80093b6 <_vfiprintf_r+0x1fe>
 80093aa:	89ab      	ldrh	r3, [r5, #12]
 80093ac:	059a      	lsls	r2, r3, #22
 80093ae:	d402      	bmi.n	80093b6 <_vfiprintf_r+0x1fe>
 80093b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80093b2:	f7fe f92b 	bl	800760c <__retarget_lock_release_recursive>
 80093b6:	89ab      	ldrh	r3, [r5, #12]
 80093b8:	065b      	lsls	r3, r3, #25
 80093ba:	f53f af1f 	bmi.w	80091fc <_vfiprintf_r+0x44>
 80093be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80093c0:	e71e      	b.n	8009200 <_vfiprintf_r+0x48>
 80093c2:	ab03      	add	r3, sp, #12
 80093c4:	9300      	str	r3, [sp, #0]
 80093c6:	462a      	mov	r2, r5
 80093c8:	4b05      	ldr	r3, [pc, #20]	@ (80093e0 <_vfiprintf_r+0x228>)
 80093ca:	a904      	add	r1, sp, #16
 80093cc:	4630      	mov	r0, r6
 80093ce:	f7fd fe25 	bl	800701c <_printf_i>
 80093d2:	e7e4      	b.n	800939e <_vfiprintf_r+0x1e6>
 80093d4:	080099f8 	.word	0x080099f8
 80093d8:	08009a02 	.word	0x08009a02
 80093dc:	08006aed 	.word	0x08006aed
 80093e0:	08009195 	.word	0x08009195
 80093e4:	080099fe 	.word	0x080099fe

080093e8 <__swbuf_r>:
 80093e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ea:	460e      	mov	r6, r1
 80093ec:	4614      	mov	r4, r2
 80093ee:	4605      	mov	r5, r0
 80093f0:	b118      	cbz	r0, 80093fa <__swbuf_r+0x12>
 80093f2:	6a03      	ldr	r3, [r0, #32]
 80093f4:	b90b      	cbnz	r3, 80093fa <__swbuf_r+0x12>
 80093f6:	f7fd ffbd 	bl	8007374 <__sinit>
 80093fa:	69a3      	ldr	r3, [r4, #24]
 80093fc:	60a3      	str	r3, [r4, #8]
 80093fe:	89a3      	ldrh	r3, [r4, #12]
 8009400:	071a      	lsls	r2, r3, #28
 8009402:	d501      	bpl.n	8009408 <__swbuf_r+0x20>
 8009404:	6923      	ldr	r3, [r4, #16]
 8009406:	b943      	cbnz	r3, 800941a <__swbuf_r+0x32>
 8009408:	4621      	mov	r1, r4
 800940a:	4628      	mov	r0, r5
 800940c:	f000 f82a 	bl	8009464 <__swsetup_r>
 8009410:	b118      	cbz	r0, 800941a <__swbuf_r+0x32>
 8009412:	f04f 37ff 	mov.w	r7, #4294967295
 8009416:	4638      	mov	r0, r7
 8009418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800941a:	6823      	ldr	r3, [r4, #0]
 800941c:	6922      	ldr	r2, [r4, #16]
 800941e:	1a98      	subs	r0, r3, r2
 8009420:	6963      	ldr	r3, [r4, #20]
 8009422:	b2f6      	uxtb	r6, r6
 8009424:	4283      	cmp	r3, r0
 8009426:	4637      	mov	r7, r6
 8009428:	dc05      	bgt.n	8009436 <__swbuf_r+0x4e>
 800942a:	4621      	mov	r1, r4
 800942c:	4628      	mov	r0, r5
 800942e:	f7ff fd99 	bl	8008f64 <_fflush_r>
 8009432:	2800      	cmp	r0, #0
 8009434:	d1ed      	bne.n	8009412 <__swbuf_r+0x2a>
 8009436:	68a3      	ldr	r3, [r4, #8]
 8009438:	3b01      	subs	r3, #1
 800943a:	60a3      	str	r3, [r4, #8]
 800943c:	6823      	ldr	r3, [r4, #0]
 800943e:	1c5a      	adds	r2, r3, #1
 8009440:	6022      	str	r2, [r4, #0]
 8009442:	701e      	strb	r6, [r3, #0]
 8009444:	6962      	ldr	r2, [r4, #20]
 8009446:	1c43      	adds	r3, r0, #1
 8009448:	429a      	cmp	r2, r3
 800944a:	d004      	beq.n	8009456 <__swbuf_r+0x6e>
 800944c:	89a3      	ldrh	r3, [r4, #12]
 800944e:	07db      	lsls	r3, r3, #31
 8009450:	d5e1      	bpl.n	8009416 <__swbuf_r+0x2e>
 8009452:	2e0a      	cmp	r6, #10
 8009454:	d1df      	bne.n	8009416 <__swbuf_r+0x2e>
 8009456:	4621      	mov	r1, r4
 8009458:	4628      	mov	r0, r5
 800945a:	f7ff fd83 	bl	8008f64 <_fflush_r>
 800945e:	2800      	cmp	r0, #0
 8009460:	d0d9      	beq.n	8009416 <__swbuf_r+0x2e>
 8009462:	e7d6      	b.n	8009412 <__swbuf_r+0x2a>

08009464 <__swsetup_r>:
 8009464:	b538      	push	{r3, r4, r5, lr}
 8009466:	4b29      	ldr	r3, [pc, #164]	@ (800950c <__swsetup_r+0xa8>)
 8009468:	4605      	mov	r5, r0
 800946a:	6818      	ldr	r0, [r3, #0]
 800946c:	460c      	mov	r4, r1
 800946e:	b118      	cbz	r0, 8009478 <__swsetup_r+0x14>
 8009470:	6a03      	ldr	r3, [r0, #32]
 8009472:	b90b      	cbnz	r3, 8009478 <__swsetup_r+0x14>
 8009474:	f7fd ff7e 	bl	8007374 <__sinit>
 8009478:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800947c:	0719      	lsls	r1, r3, #28
 800947e:	d422      	bmi.n	80094c6 <__swsetup_r+0x62>
 8009480:	06da      	lsls	r2, r3, #27
 8009482:	d407      	bmi.n	8009494 <__swsetup_r+0x30>
 8009484:	2209      	movs	r2, #9
 8009486:	602a      	str	r2, [r5, #0]
 8009488:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800948c:	81a3      	strh	r3, [r4, #12]
 800948e:	f04f 30ff 	mov.w	r0, #4294967295
 8009492:	e033      	b.n	80094fc <__swsetup_r+0x98>
 8009494:	0758      	lsls	r0, r3, #29
 8009496:	d512      	bpl.n	80094be <__swsetup_r+0x5a>
 8009498:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800949a:	b141      	cbz	r1, 80094ae <__swsetup_r+0x4a>
 800949c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80094a0:	4299      	cmp	r1, r3
 80094a2:	d002      	beq.n	80094aa <__swsetup_r+0x46>
 80094a4:	4628      	mov	r0, r5
 80094a6:	f7fe feff 	bl	80082a8 <_free_r>
 80094aa:	2300      	movs	r3, #0
 80094ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80094ae:	89a3      	ldrh	r3, [r4, #12]
 80094b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80094b4:	81a3      	strh	r3, [r4, #12]
 80094b6:	2300      	movs	r3, #0
 80094b8:	6063      	str	r3, [r4, #4]
 80094ba:	6923      	ldr	r3, [r4, #16]
 80094bc:	6023      	str	r3, [r4, #0]
 80094be:	89a3      	ldrh	r3, [r4, #12]
 80094c0:	f043 0308 	orr.w	r3, r3, #8
 80094c4:	81a3      	strh	r3, [r4, #12]
 80094c6:	6923      	ldr	r3, [r4, #16]
 80094c8:	b94b      	cbnz	r3, 80094de <__swsetup_r+0x7a>
 80094ca:	89a3      	ldrh	r3, [r4, #12]
 80094cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80094d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094d4:	d003      	beq.n	80094de <__swsetup_r+0x7a>
 80094d6:	4621      	mov	r1, r4
 80094d8:	4628      	mov	r0, r5
 80094da:	f000 f883 	bl	80095e4 <__smakebuf_r>
 80094de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094e2:	f013 0201 	ands.w	r2, r3, #1
 80094e6:	d00a      	beq.n	80094fe <__swsetup_r+0x9a>
 80094e8:	2200      	movs	r2, #0
 80094ea:	60a2      	str	r2, [r4, #8]
 80094ec:	6962      	ldr	r2, [r4, #20]
 80094ee:	4252      	negs	r2, r2
 80094f0:	61a2      	str	r2, [r4, #24]
 80094f2:	6922      	ldr	r2, [r4, #16]
 80094f4:	b942      	cbnz	r2, 8009508 <__swsetup_r+0xa4>
 80094f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80094fa:	d1c5      	bne.n	8009488 <__swsetup_r+0x24>
 80094fc:	bd38      	pop	{r3, r4, r5, pc}
 80094fe:	0799      	lsls	r1, r3, #30
 8009500:	bf58      	it	pl
 8009502:	6962      	ldrpl	r2, [r4, #20]
 8009504:	60a2      	str	r2, [r4, #8]
 8009506:	e7f4      	b.n	80094f2 <__swsetup_r+0x8e>
 8009508:	2000      	movs	r0, #0
 800950a:	e7f7      	b.n	80094fc <__swsetup_r+0x98>
 800950c:	2000002c 	.word	0x2000002c

08009510 <_raise_r>:
 8009510:	291f      	cmp	r1, #31
 8009512:	b538      	push	{r3, r4, r5, lr}
 8009514:	4605      	mov	r5, r0
 8009516:	460c      	mov	r4, r1
 8009518:	d904      	bls.n	8009524 <_raise_r+0x14>
 800951a:	2316      	movs	r3, #22
 800951c:	6003      	str	r3, [r0, #0]
 800951e:	f04f 30ff 	mov.w	r0, #4294967295
 8009522:	bd38      	pop	{r3, r4, r5, pc}
 8009524:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009526:	b112      	cbz	r2, 800952e <_raise_r+0x1e>
 8009528:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800952c:	b94b      	cbnz	r3, 8009542 <_raise_r+0x32>
 800952e:	4628      	mov	r0, r5
 8009530:	f000 f830 	bl	8009594 <_getpid_r>
 8009534:	4622      	mov	r2, r4
 8009536:	4601      	mov	r1, r0
 8009538:	4628      	mov	r0, r5
 800953a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800953e:	f000 b817 	b.w	8009570 <_kill_r>
 8009542:	2b01      	cmp	r3, #1
 8009544:	d00a      	beq.n	800955c <_raise_r+0x4c>
 8009546:	1c59      	adds	r1, r3, #1
 8009548:	d103      	bne.n	8009552 <_raise_r+0x42>
 800954a:	2316      	movs	r3, #22
 800954c:	6003      	str	r3, [r0, #0]
 800954e:	2001      	movs	r0, #1
 8009550:	e7e7      	b.n	8009522 <_raise_r+0x12>
 8009552:	2100      	movs	r1, #0
 8009554:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009558:	4620      	mov	r0, r4
 800955a:	4798      	blx	r3
 800955c:	2000      	movs	r0, #0
 800955e:	e7e0      	b.n	8009522 <_raise_r+0x12>

08009560 <raise>:
 8009560:	4b02      	ldr	r3, [pc, #8]	@ (800956c <raise+0xc>)
 8009562:	4601      	mov	r1, r0
 8009564:	6818      	ldr	r0, [r3, #0]
 8009566:	f7ff bfd3 	b.w	8009510 <_raise_r>
 800956a:	bf00      	nop
 800956c:	2000002c 	.word	0x2000002c

08009570 <_kill_r>:
 8009570:	b538      	push	{r3, r4, r5, lr}
 8009572:	4d07      	ldr	r5, [pc, #28]	@ (8009590 <_kill_r+0x20>)
 8009574:	2300      	movs	r3, #0
 8009576:	4604      	mov	r4, r0
 8009578:	4608      	mov	r0, r1
 800957a:	4611      	mov	r1, r2
 800957c:	602b      	str	r3, [r5, #0]
 800957e:	f7f9 fad5 	bl	8002b2c <_kill>
 8009582:	1c43      	adds	r3, r0, #1
 8009584:	d102      	bne.n	800958c <_kill_r+0x1c>
 8009586:	682b      	ldr	r3, [r5, #0]
 8009588:	b103      	cbz	r3, 800958c <_kill_r+0x1c>
 800958a:	6023      	str	r3, [r4, #0]
 800958c:	bd38      	pop	{r3, r4, r5, pc}
 800958e:	bf00      	nop
 8009590:	200005d4 	.word	0x200005d4

08009594 <_getpid_r>:
 8009594:	f7f9 bac2 	b.w	8002b1c <_getpid>

08009598 <__swhatbuf_r>:
 8009598:	b570      	push	{r4, r5, r6, lr}
 800959a:	460c      	mov	r4, r1
 800959c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095a0:	2900      	cmp	r1, #0
 80095a2:	b096      	sub	sp, #88	@ 0x58
 80095a4:	4615      	mov	r5, r2
 80095a6:	461e      	mov	r6, r3
 80095a8:	da0d      	bge.n	80095c6 <__swhatbuf_r+0x2e>
 80095aa:	89a3      	ldrh	r3, [r4, #12]
 80095ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80095b0:	f04f 0100 	mov.w	r1, #0
 80095b4:	bf14      	ite	ne
 80095b6:	2340      	movne	r3, #64	@ 0x40
 80095b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80095bc:	2000      	movs	r0, #0
 80095be:	6031      	str	r1, [r6, #0]
 80095c0:	602b      	str	r3, [r5, #0]
 80095c2:	b016      	add	sp, #88	@ 0x58
 80095c4:	bd70      	pop	{r4, r5, r6, pc}
 80095c6:	466a      	mov	r2, sp
 80095c8:	f000 f848 	bl	800965c <_fstat_r>
 80095cc:	2800      	cmp	r0, #0
 80095ce:	dbec      	blt.n	80095aa <__swhatbuf_r+0x12>
 80095d0:	9901      	ldr	r1, [sp, #4]
 80095d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80095d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80095da:	4259      	negs	r1, r3
 80095dc:	4159      	adcs	r1, r3
 80095de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80095e2:	e7eb      	b.n	80095bc <__swhatbuf_r+0x24>

080095e4 <__smakebuf_r>:
 80095e4:	898b      	ldrh	r3, [r1, #12]
 80095e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095e8:	079d      	lsls	r5, r3, #30
 80095ea:	4606      	mov	r6, r0
 80095ec:	460c      	mov	r4, r1
 80095ee:	d507      	bpl.n	8009600 <__smakebuf_r+0x1c>
 80095f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80095f4:	6023      	str	r3, [r4, #0]
 80095f6:	6123      	str	r3, [r4, #16]
 80095f8:	2301      	movs	r3, #1
 80095fa:	6163      	str	r3, [r4, #20]
 80095fc:	b003      	add	sp, #12
 80095fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009600:	ab01      	add	r3, sp, #4
 8009602:	466a      	mov	r2, sp
 8009604:	f7ff ffc8 	bl	8009598 <__swhatbuf_r>
 8009608:	9f00      	ldr	r7, [sp, #0]
 800960a:	4605      	mov	r5, r0
 800960c:	4639      	mov	r1, r7
 800960e:	4630      	mov	r0, r6
 8009610:	f7fe febe 	bl	8008390 <_malloc_r>
 8009614:	b948      	cbnz	r0, 800962a <__smakebuf_r+0x46>
 8009616:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800961a:	059a      	lsls	r2, r3, #22
 800961c:	d4ee      	bmi.n	80095fc <__smakebuf_r+0x18>
 800961e:	f023 0303 	bic.w	r3, r3, #3
 8009622:	f043 0302 	orr.w	r3, r3, #2
 8009626:	81a3      	strh	r3, [r4, #12]
 8009628:	e7e2      	b.n	80095f0 <__smakebuf_r+0xc>
 800962a:	89a3      	ldrh	r3, [r4, #12]
 800962c:	6020      	str	r0, [r4, #0]
 800962e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009632:	81a3      	strh	r3, [r4, #12]
 8009634:	9b01      	ldr	r3, [sp, #4]
 8009636:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800963a:	b15b      	cbz	r3, 8009654 <__smakebuf_r+0x70>
 800963c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009640:	4630      	mov	r0, r6
 8009642:	f000 f81d 	bl	8009680 <_isatty_r>
 8009646:	b128      	cbz	r0, 8009654 <__smakebuf_r+0x70>
 8009648:	89a3      	ldrh	r3, [r4, #12]
 800964a:	f023 0303 	bic.w	r3, r3, #3
 800964e:	f043 0301 	orr.w	r3, r3, #1
 8009652:	81a3      	strh	r3, [r4, #12]
 8009654:	89a3      	ldrh	r3, [r4, #12]
 8009656:	431d      	orrs	r5, r3
 8009658:	81a5      	strh	r5, [r4, #12]
 800965a:	e7cf      	b.n	80095fc <__smakebuf_r+0x18>

0800965c <_fstat_r>:
 800965c:	b538      	push	{r3, r4, r5, lr}
 800965e:	4d07      	ldr	r5, [pc, #28]	@ (800967c <_fstat_r+0x20>)
 8009660:	2300      	movs	r3, #0
 8009662:	4604      	mov	r4, r0
 8009664:	4608      	mov	r0, r1
 8009666:	4611      	mov	r1, r2
 8009668:	602b      	str	r3, [r5, #0]
 800966a:	f7f9 fabf 	bl	8002bec <_fstat>
 800966e:	1c43      	adds	r3, r0, #1
 8009670:	d102      	bne.n	8009678 <_fstat_r+0x1c>
 8009672:	682b      	ldr	r3, [r5, #0]
 8009674:	b103      	cbz	r3, 8009678 <_fstat_r+0x1c>
 8009676:	6023      	str	r3, [r4, #0]
 8009678:	bd38      	pop	{r3, r4, r5, pc}
 800967a:	bf00      	nop
 800967c:	200005d4 	.word	0x200005d4

08009680 <_isatty_r>:
 8009680:	b538      	push	{r3, r4, r5, lr}
 8009682:	4d06      	ldr	r5, [pc, #24]	@ (800969c <_isatty_r+0x1c>)
 8009684:	2300      	movs	r3, #0
 8009686:	4604      	mov	r4, r0
 8009688:	4608      	mov	r0, r1
 800968a:	602b      	str	r3, [r5, #0]
 800968c:	f7f9 fabe 	bl	8002c0c <_isatty>
 8009690:	1c43      	adds	r3, r0, #1
 8009692:	d102      	bne.n	800969a <_isatty_r+0x1a>
 8009694:	682b      	ldr	r3, [r5, #0]
 8009696:	b103      	cbz	r3, 800969a <_isatty_r+0x1a>
 8009698:	6023      	str	r3, [r4, #0]
 800969a:	bd38      	pop	{r3, r4, r5, pc}
 800969c:	200005d4 	.word	0x200005d4

080096a0 <_init>:
 80096a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096a2:	bf00      	nop
 80096a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096a6:	bc08      	pop	{r3}
 80096a8:	469e      	mov	lr, r3
 80096aa:	4770      	bx	lr

080096ac <_fini>:
 80096ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ae:	bf00      	nop
 80096b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096b2:	bc08      	pop	{r3}
 80096b4:	469e      	mov	lr, r3
 80096b6:	4770      	bx	lr
