
TrabajoSEDV3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fac  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800413c  0800413c  0000513c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041e0  080041e0  00006070  2**0
                  CONTENTS
  4 .ARM          00000008  080041e0  080041e0  000051e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041e8  080041e8  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041e8  080041e8  000051e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080041ec  080041ec  000051ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080041f0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006070  2**0
                  CONTENTS
 10 .bss          00000218  20000070  20000070  00006070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000288  20000288  00006070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008aee  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001906  00000000  00000000  0000eb8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000918  00000000  00000000  00010498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006f1  00000000  00000000  00010db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020f3e  00000000  00000000  000114a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b29a  00000000  00000000  000323df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cde75  00000000  00000000  0003d679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010b4ee  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ac4  00000000  00000000  0010b534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0010dff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004124 	.word	0x08004124

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004124 	.word	0x08004124

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	@ 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2uiz>:
 800083c:	004a      	lsls	r2, r1, #1
 800083e:	d211      	bcs.n	8000864 <__aeabi_d2uiz+0x28>
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000844:	d211      	bcs.n	800086a <__aeabi_d2uiz+0x2e>
 8000846:	d50d      	bpl.n	8000864 <__aeabi_d2uiz+0x28>
 8000848:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d40e      	bmi.n	8000870 <__aeabi_d2uiz+0x34>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	fa23 f002 	lsr.w	r0, r3, r2
 8000862:	4770      	bx	lr
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	4770      	bx	lr
 800086a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800086e:	d102      	bne.n	8000876 <__aeabi_d2uiz+0x3a>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	4770      	bx	lr
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	4770      	bx	lr

0800087c <__aeabi_uldivmod>:
 800087c:	b953      	cbnz	r3, 8000894 <__aeabi_uldivmod+0x18>
 800087e:	b94a      	cbnz	r2, 8000894 <__aeabi_uldivmod+0x18>
 8000880:	2900      	cmp	r1, #0
 8000882:	bf08      	it	eq
 8000884:	2800      	cmpeq	r0, #0
 8000886:	bf1c      	itt	ne
 8000888:	f04f 31ff 	movne.w	r1, #4294967295
 800088c:	f04f 30ff 	movne.w	r0, #4294967295
 8000890:	f000 b96a 	b.w	8000b68 <__aeabi_idiv0>
 8000894:	f1ad 0c08 	sub.w	ip, sp, #8
 8000898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800089c:	f000 f806 	bl	80008ac <__udivmoddi4>
 80008a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a8:	b004      	add	sp, #16
 80008aa:	4770      	bx	lr

080008ac <__udivmoddi4>:
 80008ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b0:	9d08      	ldr	r5, [sp, #32]
 80008b2:	460c      	mov	r4, r1
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d14e      	bne.n	8000956 <__udivmoddi4+0xaa>
 80008b8:	4694      	mov	ip, r2
 80008ba:	458c      	cmp	ip, r1
 80008bc:	4686      	mov	lr, r0
 80008be:	fab2 f282 	clz	r2, r2
 80008c2:	d962      	bls.n	800098a <__udivmoddi4+0xde>
 80008c4:	b14a      	cbz	r2, 80008da <__udivmoddi4+0x2e>
 80008c6:	f1c2 0320 	rsb	r3, r2, #32
 80008ca:	4091      	lsls	r1, r2
 80008cc:	fa20 f303 	lsr.w	r3, r0, r3
 80008d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008d4:	4319      	orrs	r1, r3
 80008d6:	fa00 fe02 	lsl.w	lr, r0, r2
 80008da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008de:	fa1f f68c 	uxth.w	r6, ip
 80008e2:	fbb1 f4f7 	udiv	r4, r1, r7
 80008e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008ea:	fb07 1114 	mls	r1, r7, r4, r1
 80008ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008f2:	fb04 f106 	mul.w	r1, r4, r6
 80008f6:	4299      	cmp	r1, r3
 80008f8:	d90a      	bls.n	8000910 <__udivmoddi4+0x64>
 80008fa:	eb1c 0303 	adds.w	r3, ip, r3
 80008fe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000902:	f080 8112 	bcs.w	8000b2a <__udivmoddi4+0x27e>
 8000906:	4299      	cmp	r1, r3
 8000908:	f240 810f 	bls.w	8000b2a <__udivmoddi4+0x27e>
 800090c:	3c02      	subs	r4, #2
 800090e:	4463      	add	r3, ip
 8000910:	1a59      	subs	r1, r3, r1
 8000912:	fa1f f38e 	uxth.w	r3, lr
 8000916:	fbb1 f0f7 	udiv	r0, r1, r7
 800091a:	fb07 1110 	mls	r1, r7, r0, r1
 800091e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000922:	fb00 f606 	mul.w	r6, r0, r6
 8000926:	429e      	cmp	r6, r3
 8000928:	d90a      	bls.n	8000940 <__udivmoddi4+0x94>
 800092a:	eb1c 0303 	adds.w	r3, ip, r3
 800092e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000932:	f080 80fc 	bcs.w	8000b2e <__udivmoddi4+0x282>
 8000936:	429e      	cmp	r6, r3
 8000938:	f240 80f9 	bls.w	8000b2e <__udivmoddi4+0x282>
 800093c:	4463      	add	r3, ip
 800093e:	3802      	subs	r0, #2
 8000940:	1b9b      	subs	r3, r3, r6
 8000942:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000946:	2100      	movs	r1, #0
 8000948:	b11d      	cbz	r5, 8000952 <__udivmoddi4+0xa6>
 800094a:	40d3      	lsrs	r3, r2
 800094c:	2200      	movs	r2, #0
 800094e:	e9c5 3200 	strd	r3, r2, [r5]
 8000952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000956:	428b      	cmp	r3, r1
 8000958:	d905      	bls.n	8000966 <__udivmoddi4+0xba>
 800095a:	b10d      	cbz	r5, 8000960 <__udivmoddi4+0xb4>
 800095c:	e9c5 0100 	strd	r0, r1, [r5]
 8000960:	2100      	movs	r1, #0
 8000962:	4608      	mov	r0, r1
 8000964:	e7f5      	b.n	8000952 <__udivmoddi4+0xa6>
 8000966:	fab3 f183 	clz	r1, r3
 800096a:	2900      	cmp	r1, #0
 800096c:	d146      	bne.n	80009fc <__udivmoddi4+0x150>
 800096e:	42a3      	cmp	r3, r4
 8000970:	d302      	bcc.n	8000978 <__udivmoddi4+0xcc>
 8000972:	4290      	cmp	r0, r2
 8000974:	f0c0 80f0 	bcc.w	8000b58 <__udivmoddi4+0x2ac>
 8000978:	1a86      	subs	r6, r0, r2
 800097a:	eb64 0303 	sbc.w	r3, r4, r3
 800097e:	2001      	movs	r0, #1
 8000980:	2d00      	cmp	r5, #0
 8000982:	d0e6      	beq.n	8000952 <__udivmoddi4+0xa6>
 8000984:	e9c5 6300 	strd	r6, r3, [r5]
 8000988:	e7e3      	b.n	8000952 <__udivmoddi4+0xa6>
 800098a:	2a00      	cmp	r2, #0
 800098c:	f040 8090 	bne.w	8000ab0 <__udivmoddi4+0x204>
 8000990:	eba1 040c 	sub.w	r4, r1, ip
 8000994:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000998:	fa1f f78c 	uxth.w	r7, ip
 800099c:	2101      	movs	r1, #1
 800099e:	fbb4 f6f8 	udiv	r6, r4, r8
 80009a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009a6:	fb08 4416 	mls	r4, r8, r6, r4
 80009aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009ae:	fb07 f006 	mul.w	r0, r7, r6
 80009b2:	4298      	cmp	r0, r3
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x11c>
 80009b6:	eb1c 0303 	adds.w	r3, ip, r3
 80009ba:	f106 34ff 	add.w	r4, r6, #4294967295
 80009be:	d202      	bcs.n	80009c6 <__udivmoddi4+0x11a>
 80009c0:	4298      	cmp	r0, r3
 80009c2:	f200 80cd 	bhi.w	8000b60 <__udivmoddi4+0x2b4>
 80009c6:	4626      	mov	r6, r4
 80009c8:	1a1c      	subs	r4, r3, r0
 80009ca:	fa1f f38e 	uxth.w	r3, lr
 80009ce:	fbb4 f0f8 	udiv	r0, r4, r8
 80009d2:	fb08 4410 	mls	r4, r8, r0, r4
 80009d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009da:	fb00 f707 	mul.w	r7, r0, r7
 80009de:	429f      	cmp	r7, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x148>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 34ff 	add.w	r4, r0, #4294967295
 80009ea:	d202      	bcs.n	80009f2 <__udivmoddi4+0x146>
 80009ec:	429f      	cmp	r7, r3
 80009ee:	f200 80b0 	bhi.w	8000b52 <__udivmoddi4+0x2a6>
 80009f2:	4620      	mov	r0, r4
 80009f4:	1bdb      	subs	r3, r3, r7
 80009f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009fa:	e7a5      	b.n	8000948 <__udivmoddi4+0x9c>
 80009fc:	f1c1 0620 	rsb	r6, r1, #32
 8000a00:	408b      	lsls	r3, r1
 8000a02:	fa22 f706 	lsr.w	r7, r2, r6
 8000a06:	431f      	orrs	r7, r3
 8000a08:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a0c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a10:	ea43 030c 	orr.w	r3, r3, ip
 8000a14:	40f4      	lsrs	r4, r6
 8000a16:	fa00 f801 	lsl.w	r8, r0, r1
 8000a1a:	0c38      	lsrs	r0, r7, #16
 8000a1c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a20:	fbb4 fef0 	udiv	lr, r4, r0
 8000a24:	fa1f fc87 	uxth.w	ip, r7
 8000a28:	fb00 441e 	mls	r4, r0, lr, r4
 8000a2c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a30:	fb0e f90c 	mul.w	r9, lr, ip
 8000a34:	45a1      	cmp	r9, r4
 8000a36:	fa02 f201 	lsl.w	r2, r2, r1
 8000a3a:	d90a      	bls.n	8000a52 <__udivmoddi4+0x1a6>
 8000a3c:	193c      	adds	r4, r7, r4
 8000a3e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a42:	f080 8084 	bcs.w	8000b4e <__udivmoddi4+0x2a2>
 8000a46:	45a1      	cmp	r9, r4
 8000a48:	f240 8081 	bls.w	8000b4e <__udivmoddi4+0x2a2>
 8000a4c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a50:	443c      	add	r4, r7
 8000a52:	eba4 0409 	sub.w	r4, r4, r9
 8000a56:	fa1f f983 	uxth.w	r9, r3
 8000a5a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a5e:	fb00 4413 	mls	r4, r0, r3, r4
 8000a62:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a66:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a6a:	45a4      	cmp	ip, r4
 8000a6c:	d907      	bls.n	8000a7e <__udivmoddi4+0x1d2>
 8000a6e:	193c      	adds	r4, r7, r4
 8000a70:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a74:	d267      	bcs.n	8000b46 <__udivmoddi4+0x29a>
 8000a76:	45a4      	cmp	ip, r4
 8000a78:	d965      	bls.n	8000b46 <__udivmoddi4+0x29a>
 8000a7a:	3b02      	subs	r3, #2
 8000a7c:	443c      	add	r4, r7
 8000a7e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a82:	fba0 9302 	umull	r9, r3, r0, r2
 8000a86:	eba4 040c 	sub.w	r4, r4, ip
 8000a8a:	429c      	cmp	r4, r3
 8000a8c:	46ce      	mov	lr, r9
 8000a8e:	469c      	mov	ip, r3
 8000a90:	d351      	bcc.n	8000b36 <__udivmoddi4+0x28a>
 8000a92:	d04e      	beq.n	8000b32 <__udivmoddi4+0x286>
 8000a94:	b155      	cbz	r5, 8000aac <__udivmoddi4+0x200>
 8000a96:	ebb8 030e 	subs.w	r3, r8, lr
 8000a9a:	eb64 040c 	sbc.w	r4, r4, ip
 8000a9e:	fa04 f606 	lsl.w	r6, r4, r6
 8000aa2:	40cb      	lsrs	r3, r1
 8000aa4:	431e      	orrs	r6, r3
 8000aa6:	40cc      	lsrs	r4, r1
 8000aa8:	e9c5 6400 	strd	r6, r4, [r5]
 8000aac:	2100      	movs	r1, #0
 8000aae:	e750      	b.n	8000952 <__udivmoddi4+0xa6>
 8000ab0:	f1c2 0320 	rsb	r3, r2, #32
 8000ab4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ab8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000abc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ac0:	4094      	lsls	r4, r2
 8000ac2:	430c      	orrs	r4, r1
 8000ac4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000acc:	fa1f f78c 	uxth.w	r7, ip
 8000ad0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ad4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ad8:	0c23      	lsrs	r3, r4, #16
 8000ada:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ade:	fb00 f107 	mul.w	r1, r0, r7
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	d908      	bls.n	8000af8 <__udivmoddi4+0x24c>
 8000ae6:	eb1c 0303 	adds.w	r3, ip, r3
 8000aea:	f100 36ff 	add.w	r6, r0, #4294967295
 8000aee:	d22c      	bcs.n	8000b4a <__udivmoddi4+0x29e>
 8000af0:	4299      	cmp	r1, r3
 8000af2:	d92a      	bls.n	8000b4a <__udivmoddi4+0x29e>
 8000af4:	3802      	subs	r0, #2
 8000af6:	4463      	add	r3, ip
 8000af8:	1a5b      	subs	r3, r3, r1
 8000afa:	b2a4      	uxth	r4, r4
 8000afc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b00:	fb08 3311 	mls	r3, r8, r1, r3
 8000b04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b08:	fb01 f307 	mul.w	r3, r1, r7
 8000b0c:	42a3      	cmp	r3, r4
 8000b0e:	d908      	bls.n	8000b22 <__udivmoddi4+0x276>
 8000b10:	eb1c 0404 	adds.w	r4, ip, r4
 8000b14:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b18:	d213      	bcs.n	8000b42 <__udivmoddi4+0x296>
 8000b1a:	42a3      	cmp	r3, r4
 8000b1c:	d911      	bls.n	8000b42 <__udivmoddi4+0x296>
 8000b1e:	3902      	subs	r1, #2
 8000b20:	4464      	add	r4, ip
 8000b22:	1ae4      	subs	r4, r4, r3
 8000b24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b28:	e739      	b.n	800099e <__udivmoddi4+0xf2>
 8000b2a:	4604      	mov	r4, r0
 8000b2c:	e6f0      	b.n	8000910 <__udivmoddi4+0x64>
 8000b2e:	4608      	mov	r0, r1
 8000b30:	e706      	b.n	8000940 <__udivmoddi4+0x94>
 8000b32:	45c8      	cmp	r8, r9
 8000b34:	d2ae      	bcs.n	8000a94 <__udivmoddi4+0x1e8>
 8000b36:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b3a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b3e:	3801      	subs	r0, #1
 8000b40:	e7a8      	b.n	8000a94 <__udivmoddi4+0x1e8>
 8000b42:	4631      	mov	r1, r6
 8000b44:	e7ed      	b.n	8000b22 <__udivmoddi4+0x276>
 8000b46:	4603      	mov	r3, r0
 8000b48:	e799      	b.n	8000a7e <__udivmoddi4+0x1d2>
 8000b4a:	4630      	mov	r0, r6
 8000b4c:	e7d4      	b.n	8000af8 <__udivmoddi4+0x24c>
 8000b4e:	46d6      	mov	lr, sl
 8000b50:	e77f      	b.n	8000a52 <__udivmoddi4+0x1a6>
 8000b52:	4463      	add	r3, ip
 8000b54:	3802      	subs	r0, #2
 8000b56:	e74d      	b.n	80009f4 <__udivmoddi4+0x148>
 8000b58:	4606      	mov	r6, r0
 8000b5a:	4623      	mov	r3, r4
 8000b5c:	4608      	mov	r0, r1
 8000b5e:	e70f      	b.n	8000980 <__udivmoddi4+0xd4>
 8000b60:	3e02      	subs	r6, #2
 8000b62:	4463      	add	r3, ip
 8000b64:	e730      	b.n	80009c8 <__udivmoddi4+0x11c>
 8000b66:	bf00      	nop

08000b68 <__aeabi_idiv0>:
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000b76:	4a38      	ldr	r2, [pc, #224]	@ (8000c58 <HD44780_Init+0xec>)
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000b7c:	4b37      	ldr	r3, [pc, #220]	@ (8000c5c <HD44780_Init+0xf0>)
 8000b7e:	2208      	movs	r2, #8
 8000b80:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000b82:	4b37      	ldr	r3, [pc, #220]	@ (8000c60 <HD44780_Init+0xf4>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000b88:	4b33      	ldr	r3, [pc, #204]	@ (8000c58 <HD44780_Init+0xec>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d907      	bls.n	8000ba0 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000b90:	4b33      	ldr	r3, [pc, #204]	@ (8000c60 <HD44780_Init+0xf4>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	f043 0308 	orr.w	r3, r3, #8
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4b31      	ldr	r3, [pc, #196]	@ (8000c60 <HD44780_Init+0xf4>)
 8000b9c:	701a      	strb	r2, [r3, #0]
 8000b9e:	e006      	b.n	8000bae <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000ba0:	4b2f      	ldr	r3, [pc, #188]	@ (8000c60 <HD44780_Init+0xf4>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	f043 0304 	orr.w	r3, r3, #4
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	4b2d      	ldr	r3, [pc, #180]	@ (8000c60 <HD44780_Init+0xf4>)
 8000bac:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000bae:	f000 f985 	bl	8000ebc <DelayInit>
  HAL_Delay(50);
 8000bb2:	2032      	movs	r0, #50	@ 0x32
 8000bb4:	f000 fddc 	bl	8001770 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000bb8:	4b28      	ldr	r3, [pc, #160]	@ (8000c5c <HD44780_Init+0xf0>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f000 f943 	bl	8000e48 <ExpanderWrite>
  HAL_Delay(1000);
 8000bc2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bc6:	f000 fdd3 	bl	8001770 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000bca:	2030      	movs	r0, #48	@ 0x30
 8000bcc:	f000 f92b 	bl	8000e26 <Write4Bits>
  DelayUS(4500);
 8000bd0:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000bd4:	f000 f99c 	bl	8000f10 <DelayUS>

  Write4Bits(0x03 << 4);
 8000bd8:	2030      	movs	r0, #48	@ 0x30
 8000bda:	f000 f924 	bl	8000e26 <Write4Bits>
  DelayUS(4500);
 8000bde:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000be2:	f000 f995 	bl	8000f10 <DelayUS>

  Write4Bits(0x03 << 4);
 8000be6:	2030      	movs	r0, #48	@ 0x30
 8000be8:	f000 f91d 	bl	8000e26 <Write4Bits>
  DelayUS(4500);
 8000bec:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000bf0:	f000 f98e 	bl	8000f10 <DelayUS>

  Write4Bits(0x02 << 4);
 8000bf4:	2020      	movs	r0, #32
 8000bf6:	f000 f916 	bl	8000e26 <Write4Bits>
  DelayUS(100);
 8000bfa:	2064      	movs	r0, #100	@ 0x64
 8000bfc:	f000 f988 	bl	8000f10 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000c00:	4b17      	ldr	r3, [pc, #92]	@ (8000c60 <HD44780_Init+0xf4>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	f043 0320 	orr.w	r3, r3, #32
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 f8ce 	bl	8000dac <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000c10:	4b14      	ldr	r3, [pc, #80]	@ (8000c64 <HD44780_Init+0xf8>)
 8000c12:	2204      	movs	r2, #4
 8000c14:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000c16:	f000 f875 	bl	8000d04 <HD44780_Display>
  HD44780_Clear();
 8000c1a:	f000 f82b 	bl	8000c74 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000c1e:	4b12      	ldr	r3, [pc, #72]	@ (8000c68 <HD44780_Init+0xfc>)
 8000c20:	2202      	movs	r2, #2
 8000c22:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000c24:	4b10      	ldr	r3, [pc, #64]	@ (8000c68 <HD44780_Init+0xfc>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	f043 0304 	orr.w	r3, r3, #4
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 f8bc 	bl	8000dac <SendCommand>
  DelayUS(4500);
 8000c34:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000c38:	f000 f96a 	bl	8000f10 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000c3c:	490b      	ldr	r1, [pc, #44]	@ (8000c6c <HD44780_Init+0x100>)
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f000 f876 	bl	8000d30 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000c44:	490a      	ldr	r1, [pc, #40]	@ (8000c70 <HD44780_Init+0x104>)
 8000c46:	2001      	movs	r0, #1
 8000c48:	f000 f872 	bl	8000d30 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000c4c:	f000 f81d 	bl	8000c8a <HD44780_Home>
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	2000008f 	.word	0x2000008f
 8000c5c:	20000090 	.word	0x20000090
 8000c60:	2000008c 	.word	0x2000008c
 8000c64:	2000008d 	.word	0x2000008d
 8000c68:	2000008e 	.word	0x2000008e
 8000c6c:	20000000 	.word	0x20000000
 8000c70:	20000008 	.word	0x20000008

08000c74 <HD44780_Clear>:

void HD44780_Clear()
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f000 f897 	bl	8000dac <SendCommand>
  DelayUS(2000);
 8000c7e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c82:	f000 f945 	bl	8000f10 <DelayUS>
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HD44780_Home>:

void HD44780_Home()
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000c8e:	2002      	movs	r0, #2
 8000c90:	f000 f88c 	bl	8000dac <SendCommand>
  DelayUS(2000);
 8000c94:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c98:	f000 f93a 	bl	8000f10 <DelayUS>
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000ca0:	b590      	push	{r4, r7, lr}
 8000ca2:	b087      	sub	sp, #28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	460a      	mov	r2, r1
 8000caa:	71fb      	strb	r3, [r7, #7]
 8000cac:	4613      	mov	r3, r2
 8000cae:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000cb0:	4b12      	ldr	r3, [pc, #72]	@ (8000cfc <HD44780_SetCursor+0x5c>)
 8000cb2:	f107 0408 	add.w	r4, r7, #8
 8000cb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000cbc:	4b10      	ldr	r3, [pc, #64]	@ (8000d00 <HD44780_SetCursor+0x60>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	79ba      	ldrb	r2, [r7, #6]
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d303      	bcc.n	8000cce <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d00 <HD44780_SetCursor+0x60>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000cce:	79bb      	ldrb	r3, [r7, #6]
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	3318      	adds	r3, #24
 8000cd4:	443b      	add	r3, r7
 8000cd6:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	4413      	add	r3, r2
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	b25b      	sxtb	r3, r3
 8000ce4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ce8:	b25b      	sxtb	r3, r3
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	4618      	mov	r0, r3
 8000cee:	f000 f85d 	bl	8000dac <SendCommand>
}
 8000cf2:	bf00      	nop
 8000cf4:	371c      	adds	r7, #28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd90      	pop	{r4, r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	0800413c 	.word	0x0800413c
 8000d00:	2000008f 	.word	0x2000008f

08000d04 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000d08:	4b08      	ldr	r3, [pc, #32]	@ (8000d2c <HD44780_Display+0x28>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	f043 0304 	orr.w	r3, r3, #4
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	4b06      	ldr	r3, [pc, #24]	@ (8000d2c <HD44780_Display+0x28>)
 8000d14:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000d16:	4b05      	ldr	r3, [pc, #20]	@ (8000d2c <HD44780_Display+0x28>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	f043 0308 	orr.w	r3, r3, #8
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	4618      	mov	r0, r3
 8000d22:	f000 f843 	bl	8000dac <SendCommand>
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	2000008d 	.word	0x2000008d

08000d30 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	6039      	str	r1, [r7, #0]
 8000d3a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	b25b      	sxtb	r3, r3
 8000d4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d4e:	b25b      	sxtb	r3, r3
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 f82a 	bl	8000dac <SendCommand>
  for (int i=0; i<8; i++)
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	e009      	b.n	8000d72 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	683a      	ldr	r2, [r7, #0]
 8000d62:	4413      	add	r3, r2
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 f82e 	bl	8000dc8 <SendChar>
  for (int i=0; i<8; i++)
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	2b07      	cmp	r3, #7
 8000d76:	ddf2      	ble.n	8000d5e <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000d78:	bf00      	nop
 8000d7a:	bf00      	nop
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000d8a:	e006      	b.n	8000d9a <HD44780_PrintStr+0x18>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	1c5a      	adds	r2, r3, #1
 8000d90:	607a      	str	r2, [r7, #4]
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f000 f817 	bl	8000dc8 <SendChar>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d1f4      	bne.n	8000d8c <HD44780_PrintStr+0xa>
}
 8000da2:	bf00      	nop
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	2100      	movs	r1, #0
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 f812 	bl	8000de4 <Send>
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 f804 	bl	8000de4 <Send>
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	460a      	mov	r2, r1
 8000dee:	71fb      	strb	r3, [r7, #7]
 8000df0:	4613      	mov	r3, r2
 8000df2:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	f023 030f 	bic.w	r3, r3, #15
 8000dfa:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	011b      	lsls	r3, r3, #4
 8000e00:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000e02:	7bfa      	ldrb	r2, [r7, #15]
 8000e04:	79bb      	ldrb	r3, [r7, #6]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 f80b 	bl	8000e26 <Write4Bits>
  Write4Bits((lownib)|mode);
 8000e10:	7bba      	ldrb	r2, [r7, #14]
 8000e12:	79bb      	ldrb	r3, [r7, #6]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 f804 	bl	8000e26 <Write4Bits>
}
 8000e1e:	bf00      	nop
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 f808 	bl	8000e48 <ExpanderWrite>
  PulseEnable(value);
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 f820 	bl	8000e80 <PulseEnable>
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af02      	add	r7, sp, #8
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000e52:	4b09      	ldr	r3, [pc, #36]	@ (8000e78 <ExpanderWrite+0x30>)
 8000e54:	781a      	ldrb	r2, [r3, #0]
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000e5e:	f107 020f 	add.w	r2, r7, #15
 8000e62:	230a      	movs	r3, #10
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	2301      	movs	r3, #1
 8000e68:	214e      	movs	r1, #78	@ 0x4e
 8000e6a:	4804      	ldr	r0, [pc, #16]	@ (8000e7c <ExpanderWrite+0x34>)
 8000e6c:	f001 fcc8 	bl	8002800 <HAL_I2C_Master_Transmit>
}
 8000e70:	bf00      	nop
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000090 	.word	0x20000090
 8000e7c:	200000dc 	.word	0x200000dc

08000e80 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	f043 0304 	orr.w	r3, r3, #4
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff ffd8 	bl	8000e48 <ExpanderWrite>
  DelayUS(20);
 8000e98:	2014      	movs	r0, #20
 8000e9a:	f000 f839 	bl	8000f10 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	f023 0304 	bic.w	r3, r3, #4
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff ffce 	bl	8000e48 <ExpanderWrite>
  DelayUS(20);
 8000eac:	2014      	movs	r0, #20
 8000eae:	f000 f82f 	bl	8000f10 <DelayUS>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <DelayInit>:

static void DelayInit(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000ec0:	4b11      	ldr	r3, [pc, #68]	@ (8000f08 <DelayInit+0x4c>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	4a10      	ldr	r2, [pc, #64]	@ (8000f08 <DelayInit+0x4c>)
 8000ec6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000eca:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8000f08 <DelayInit+0x4c>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	4a0d      	ldr	r2, [pc, #52]	@ (8000f08 <DelayInit+0x4c>)
 8000ed2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000ed6:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f0c <DelayInit+0x50>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0b      	ldr	r2, [pc, #44]	@ (8000f0c <DelayInit+0x50>)
 8000ede:	f023 0301 	bic.w	r3, r3, #1
 8000ee2:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000ee4:	4b09      	ldr	r3, [pc, #36]	@ (8000f0c <DelayInit+0x50>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a08      	ldr	r2, [pc, #32]	@ (8000f0c <DelayInit+0x50>)
 8000eea:	f043 0301 	orr.w	r3, r3, #1
 8000eee:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <DelayInit+0x50>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000ef6:	bf00      	nop
  __ASM volatile ("NOP");
 8000ef8:	bf00      	nop
  __ASM volatile ("NOP");
 8000efa:	bf00      	nop
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000edf0 	.word	0xe000edf0
 8000f0c:	e0001000 	.word	0xe0001000

08000f10 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000f10:	b480      	push	{r7}
 8000f12:	b087      	sub	sp, #28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000f18:	4b0e      	ldr	r3, [pc, #56]	@ (8000f54 <DelayUS+0x44>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a0e      	ldr	r2, [pc, #56]	@ (8000f58 <DelayUS+0x48>)
 8000f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f22:	0c9a      	lsrs	r2, r3, #18
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	fb02 f303 	mul.w	r3, r2, r3
 8000f2a:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f5c <DelayUS+0x4c>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000f32:	4b0a      	ldr	r3, [pc, #40]	@ (8000f5c <DelayUS+0x4c>)
 8000f34:	685a      	ldr	r2, [r3, #4]
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	697a      	ldr	r2, [r7, #20]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d8f6      	bhi.n	8000f32 <DelayUS+0x22>
}
 8000f44:	bf00      	nop
 8000f46:	bf00      	nop
 8000f48:	371c      	adds	r7, #28
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20000014 	.word	0x20000014
 8000f58:	431bde83 	.word	0x431bde83
 8000f5c:	e0001000 	.word	0xe0001000

08000f60 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_8) { // Interrupción del botón
 8000f6a:	88fb      	ldrh	r3, [r7, #6]
 8000f6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f70:	d10d      	bne.n	8000f8e <HAL_GPIO_EXTI_Callback+0x2e>
        button_state = !button_state; // Alterna el estado del botón
 8000f72:	4b0a      	ldr	r3, [pc, #40]	@ (8000f9c <HAL_GPIO_EXTI_Callback+0x3c>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	bf0c      	ite	eq
 8000f7a:	2301      	moveq	r3, #1
 8000f7c:	2300      	movne	r3, #0
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b06      	ldr	r3, [pc, #24]	@ (8000f9c <HAL_GPIO_EXTI_Callback+0x3c>)
 8000f84:	701a      	strb	r2, [r3, #0]
        pump_state = button_state;   // Actualiza el estado de la bomba manualmente
 8000f86:	4b05      	ldr	r3, [pc, #20]	@ (8000f9c <HAL_GPIO_EXTI_Callback+0x3c>)
 8000f88:	781a      	ldrb	r2, [r3, #0]
 8000f8a:	4b05      	ldr	r3, [pc, #20]	@ (8000fa0 <HAL_GPIO_EXTI_Callback+0x40>)
 8000f8c:	701a      	strb	r2, [r3, #0]
        //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_9); // Prueba: Alterna un LED
    }
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	20000130 	.word	0x20000130
 8000fa0:	20000131 	.word	0x20000131

08000fa4 <check_humidity_and_control_pump>:

void check_humidity_and_control_pump() {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
    // Leer el valor del ADC
    HAL_ADC_Start(&hadc1);
 8000fa8:	481d      	ldr	r0, [pc, #116]	@ (8001020 <check_humidity_and_control_pump+0x7c>)
 8000faa:	f000 fc49 	bl	8001840 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8000fae:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb2:	481b      	ldr	r0, [pc, #108]	@ (8001020 <check_humidity_and_control_pump+0x7c>)
 8000fb4:	f000 fd49 	bl	8001a4a <HAL_ADC_PollForConversion>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d105      	bne.n	8000fca <check_humidity_and_control_pump+0x26>
        sensor_value = HAL_ADC_GetValue(&hadc1);
 8000fbe:	4818      	ldr	r0, [pc, #96]	@ (8001020 <check_humidity_and_control_pump+0x7c>)
 8000fc0:	f000 fdce 	bl	8001b60 <HAL_ADC_GetValue>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	4a17      	ldr	r2, [pc, #92]	@ (8001024 <check_humidity_and_control_pump+0x80>)
 8000fc8:	6013      	str	r3, [r2, #0]
    }
    HAL_ADC_Stop(&hadc1);
 8000fca:	4815      	ldr	r0, [pc, #84]	@ (8001020 <check_humidity_and_control_pump+0x7c>)
 8000fcc:	f000 fd0a 	bl	80019e4 <HAL_ADC_Stop>

    // Comparar con el umbral y actualizar el estado de la bomba
    if (sensor_value > humidity_threshold || button_state == 1) { // Si la humedad es baja
 8000fd0:	4b14      	ldr	r3, [pc, #80]	@ (8001024 <check_humidity_and_control_pump+0x80>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4b14      	ldr	r3, [pc, #80]	@ (8001028 <check_humidity_and_control_pump+0x84>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d803      	bhi.n	8000fe4 <check_humidity_and_control_pump+0x40>
 8000fdc:	4b13      	ldr	r3, [pc, #76]	@ (800102c <check_humidity_and_control_pump+0x88>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d103      	bne.n	8000fec <check_humidity_and_control_pump+0x48>
        pump_state = 1; // Activar la bomba
 8000fe4:	4b12      	ldr	r3, [pc, #72]	@ (8001030 <check_humidity_and_control_pump+0x8c>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	701a      	strb	r2, [r3, #0]
 8000fea:	e006      	b.n	8000ffa <check_humidity_and_control_pump+0x56>
    } else if (!button_state) { // Si el botón no está activo
 8000fec:	4b0f      	ldr	r3, [pc, #60]	@ (800102c <check_humidity_and_control_pump+0x88>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d102      	bne.n	8000ffa <check_humidity_and_control_pump+0x56>
        pump_state = 0; // Desactivar la bomba
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <check_humidity_and_control_pump+0x8c>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
    }

    // Controlar el relé según el estado de la bomba
    if (pump_state) {
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8001030 <check_humidity_and_control_pump+0x8c>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d006      	beq.n	8001010 <check_humidity_and_control_pump+0x6c>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); // Activar relé (lógica inversa)
 8001002:	2200      	movs	r2, #0
 8001004:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001008:	480a      	ldr	r0, [pc, #40]	@ (8001034 <check_humidity_and_control_pump+0x90>)
 800100a:	f001 fa83 	bl	8002514 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET); // Desactivar relé
    }
}
 800100e:	e005      	b.n	800101c <check_humidity_and_control_pump+0x78>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET); // Desactivar relé
 8001010:	2201      	movs	r2, #1
 8001012:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001016:	4807      	ldr	r0, [pc, #28]	@ (8001034 <check_humidity_and_control_pump+0x90>)
 8001018:	f001 fa7c 	bl	8002514 <HAL_GPIO_WritePin>
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000094 	.word	0x20000094
 8001024:	20000134 	.word	0x20000134
 8001028:	20000010 	.word	0x20000010
 800102c:	20000130 	.word	0x20000130
 8001030:	20000131 	.word	0x20000131
 8001034:	40020400 	.word	0x40020400

08001038 <update_lcd>:

void update_lcd() {
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	@ 0x28
 800103c:	af00      	add	r7, sp, #0
    char line1[16]; // Línea 1 del LCD
    char line2[16]; // Línea 2 del LCD
    uint32_t sensor_percent = 162.2587- 0.0415*sensor_value;
 800103e:	4b28      	ldr	r3, [pc, #160]	@ (80010e0 <update_lcd+0xa8>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fb80 	bl	8000748 <__aeabi_ui2d>
 8001048:	a321      	add	r3, pc, #132	@ (adr r3, 80010d0 <update_lcd+0x98>)
 800104a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104e:	f7ff f90f 	bl	8000270 <__aeabi_dmul>
 8001052:	4602      	mov	r2, r0
 8001054:	460b      	mov	r3, r1
 8001056:	a120      	add	r1, pc, #128	@ (adr r1, 80010d8 <update_lcd+0xa0>)
 8001058:	e9d1 0100 	ldrd	r0, r1, [r1]
 800105c:	f7ff fa36 	bl	80004cc <__aeabi_dsub>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	4610      	mov	r0, r2
 8001066:	4619      	mov	r1, r3
 8001068:	f7ff fbe8 	bl	800083c <__aeabi_d2uiz>
 800106c:	4603      	mov	r3, r0
 800106e:	627b      	str	r3, [r7, #36]	@ 0x24
    // Mostrar estado de la bomba
    if (pump_state) {
 8001070:	4b1c      	ldr	r3, [pc, #112]	@ (80010e4 <update_lcd+0xac>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d007      	beq.n	8001088 <update_lcd+0x50>
        snprintf(line1, sizeof(line1), "Bomba: Activada");
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4a1a      	ldr	r2, [pc, #104]	@ (80010e8 <update_lcd+0xb0>)
 800107e:	2110      	movs	r1, #16
 8001080:	4618      	mov	r0, r3
 8001082:	f002 fb9b 	bl	80037bc <sniprintf>
 8001086:	e006      	b.n	8001096 <update_lcd+0x5e>
    	//line1[]="Bomba: Activada";
    } else {
        snprintf(line1, sizeof(line1), "Bomba: Desactivada");
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	4a17      	ldr	r2, [pc, #92]	@ (80010ec <update_lcd+0xb4>)
 800108e:	2110      	movs	r1, #16
 8001090:	4618      	mov	r0, r3
 8001092:	f002 fb93 	bl	80037bc <sniprintf>
    	//line1[]="Bomba: Desactivada";
    }

    // Mostrar valor del sensor de humedad
   snprintf(line2, sizeof(line2), "Humedad: %lu %", sensor_percent);
 8001096:	1d38      	adds	r0, r7, #4
 8001098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800109a:	4a15      	ldr	r2, [pc, #84]	@ (80010f0 <update_lcd+0xb8>)
 800109c:	2110      	movs	r1, #16
 800109e:	f002 fb8d 	bl	80037bc <sniprintf>

    // Actualizar el LCD
    HD44780_Clear(); // Limpia el LCD
 80010a2:	f7ff fde7 	bl	8000c74 <HD44780_Clear>
    HD44780_SetCursor(0, 0); // Línea 1
 80010a6:	2100      	movs	r1, #0
 80010a8:	2000      	movs	r0, #0
 80010aa:	f7ff fdf9 	bl	8000ca0 <HD44780_SetCursor>
    HD44780_PrintStr(line1);
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fe65 	bl	8000d82 <HD44780_PrintStr>
    HD44780_SetCursor(0, 1); // Línea 2
 80010b8:	2101      	movs	r1, #1
 80010ba:	2000      	movs	r0, #0
 80010bc:	f7ff fdf0 	bl	8000ca0 <HD44780_SetCursor>
    HD44780_PrintStr(line2);
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fe5d 	bl	8000d82 <HD44780_PrintStr>
}
 80010c8:	bf00      	nop
 80010ca:	3728      	adds	r7, #40	@ 0x28
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	ed916873 	.word	0xed916873
 80010d4:	3fa53f7c 	.word	0x3fa53f7c
 80010d8:	4538ef35 	.word	0x4538ef35
 80010dc:	40644847 	.word	0x40644847
 80010e0:	20000134 	.word	0x20000134
 80010e4:	20000131 	.word	0x20000131
 80010e8:	0800414c 	.word	0x0800414c
 80010ec:	0800415c 	.word	0x0800415c
 80010f0:	08004170 	.word	0x08004170

080010f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f8:	f000 fac8 	bl	800168c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010fc:	f000 f81e 	bl	800113c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001100:	f000 f906 	bl	8001310 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001104:	f000 f884 	bl	8001210 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001108:	f000 f8d4 	bl	80012b4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(2); // Inicializa el LCD con 2 líneas
 800110c:	2002      	movs	r0, #2
 800110e:	f7ff fd2d 	bl	8000b6c <HD44780_Init>
  HD44780_Clear(); // Limpia el LCD
 8001112:	f7ff fdaf 	bl	8000c74 <HD44780_Clear>
  HD44780_SetCursor(0, 0);   // Coloca el cursor en la primera línea
 8001116:	2100      	movs	r1, #0
 8001118:	2000      	movs	r0, #0
 800111a:	f7ff fdc1 	bl	8000ca0 <HD44780_SetCursor>
  HD44780_PrintStr("Sistema Iniciado"); // Mensaje inicial
 800111e:	4806      	ldr	r0, [pc, #24]	@ (8001138 <main+0x44>)
 8001120:	f7ff fe2f 	bl	8000d82 <HD44780_PrintStr>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  check_humidity_and_control_pump(); // Controla la bomba
 8001124:	f7ff ff3e 	bl	8000fa4 <check_humidity_and_control_pump>
	  update_lcd(); // Actualiza el LCD
 8001128:	f7ff ff86 	bl	8001038 <update_lcd>
	  HAL_Delay(500); // Pausa para evitar actualizaciones muy rápidas
 800112c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001130:	f000 fb1e 	bl	8001770 <HAL_Delay>
	  check_humidity_and_control_pump(); // Controla la bomba
 8001134:	bf00      	nop
 8001136:	e7f5      	b.n	8001124 <main+0x30>
 8001138:	08004180 	.word	0x08004180

0800113c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b094      	sub	sp, #80	@ 0x50
 8001140:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001142:	f107 0320 	add.w	r3, r7, #32
 8001146:	2230      	movs	r2, #48	@ 0x30
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f002 fb6a 	bl	8003824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001160:	2300      	movs	r3, #0
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	4b28      	ldr	r3, [pc, #160]	@ (8001208 <SystemClock_Config+0xcc>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001168:	4a27      	ldr	r2, [pc, #156]	@ (8001208 <SystemClock_Config+0xcc>)
 800116a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800116e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001170:	4b25      	ldr	r3, [pc, #148]	@ (8001208 <SystemClock_Config+0xcc>)
 8001172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001174:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800117c:	2300      	movs	r3, #0
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	4b22      	ldr	r3, [pc, #136]	@ (800120c <SystemClock_Config+0xd0>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a21      	ldr	r2, [pc, #132]	@ (800120c <SystemClock_Config+0xd0>)
 8001186:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800118a:	6013      	str	r3, [r2, #0]
 800118c:	4b1f      	ldr	r3, [pc, #124]	@ (800120c <SystemClock_Config+0xd0>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001198:	2302      	movs	r3, #2
 800119a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800119c:	2301      	movs	r3, #1
 800119e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011a0:	2310      	movs	r3, #16
 80011a2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a4:	2302      	movs	r3, #2
 80011a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011a8:	2300      	movs	r3, #0
 80011aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011ac:	2308      	movs	r3, #8
 80011ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80011b0:	2332      	movs	r3, #50	@ 0x32
 80011b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011b4:	2302      	movs	r3, #2
 80011b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011b8:	2307      	movs	r3, #7
 80011ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011bc:	f107 0320 	add.w	r3, r7, #32
 80011c0:	4618      	mov	r0, r3
 80011c2:	f001 fe77 	bl	8002eb4 <HAL_RCC_OscConfig>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011cc:	f000 f8fa 	bl	80013c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d0:	230f      	movs	r3, #15
 80011d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d4:	2302      	movs	r3, #2
 80011d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011dc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80011e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	2101      	movs	r1, #1
 80011ee:	4618      	mov	r0, r3
 80011f0:	f002 f8d8 	bl	80033a4 <HAL_RCC_ClockConfig>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011fa:	f000 f8e3 	bl	80013c4 <Error_Handler>
  }
}
 80011fe:	bf00      	nop
 8001200:	3750      	adds	r7, #80	@ 0x50
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800
 800120c:	40007000 	.word	0x40007000

08001210 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001216:	463b      	mov	r3, r7
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001222:	4b21      	ldr	r3, [pc, #132]	@ (80012a8 <MX_ADC1_Init+0x98>)
 8001224:	4a21      	ldr	r2, [pc, #132]	@ (80012ac <MX_ADC1_Init+0x9c>)
 8001226:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001228:	4b1f      	ldr	r3, [pc, #124]	@ (80012a8 <MX_ADC1_Init+0x98>)
 800122a:	2200      	movs	r2, #0
 800122c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800122e:	4b1e      	ldr	r3, [pc, #120]	@ (80012a8 <MX_ADC1_Init+0x98>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001234:	4b1c      	ldr	r3, [pc, #112]	@ (80012a8 <MX_ADC1_Init+0x98>)
 8001236:	2200      	movs	r2, #0
 8001238:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800123a:	4b1b      	ldr	r3, [pc, #108]	@ (80012a8 <MX_ADC1_Init+0x98>)
 800123c:	2204      	movs	r2, #4
 800123e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001240:	4b19      	ldr	r3, [pc, #100]	@ (80012a8 <MX_ADC1_Init+0x98>)
 8001242:	2200      	movs	r2, #0
 8001244:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001248:	4b17      	ldr	r3, [pc, #92]	@ (80012a8 <MX_ADC1_Init+0x98>)
 800124a:	2200      	movs	r2, #0
 800124c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800124e:	4b16      	ldr	r3, [pc, #88]	@ (80012a8 <MX_ADC1_Init+0x98>)
 8001250:	4a17      	ldr	r2, [pc, #92]	@ (80012b0 <MX_ADC1_Init+0xa0>)
 8001252:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001254:	4b14      	ldr	r3, [pc, #80]	@ (80012a8 <MX_ADC1_Init+0x98>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800125a:	4b13      	ldr	r3, [pc, #76]	@ (80012a8 <MX_ADC1_Init+0x98>)
 800125c:	2201      	movs	r2, #1
 800125e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001260:	4b11      	ldr	r3, [pc, #68]	@ (80012a8 <MX_ADC1_Init+0x98>)
 8001262:	2200      	movs	r2, #0
 8001264:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001268:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <MX_ADC1_Init+0x98>)
 800126a:	2201      	movs	r2, #1
 800126c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800126e:	480e      	ldr	r0, [pc, #56]	@ (80012a8 <MX_ADC1_Init+0x98>)
 8001270:	f000 faa2 	bl	80017b8 <HAL_ADC_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800127a:	f000 f8a3 	bl	80013c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800127e:	2300      	movs	r3, #0
 8001280:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001282:	2301      	movs	r3, #1
 8001284:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001286:	2300      	movs	r3, #0
 8001288:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800128a:	463b      	mov	r3, r7
 800128c:	4619      	mov	r1, r3
 800128e:	4806      	ldr	r0, [pc, #24]	@ (80012a8 <MX_ADC1_Init+0x98>)
 8001290:	f000 fc74 	bl	8001b7c <HAL_ADC_ConfigChannel>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800129a:	f000 f893 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000094 	.word	0x20000094
 80012ac:	40012000 	.word	0x40012000
 80012b0:	0f000001 	.word	0x0f000001

080012b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012b8:	4b12      	ldr	r3, [pc, #72]	@ (8001304 <MX_I2C1_Init+0x50>)
 80012ba:	4a13      	ldr	r2, [pc, #76]	@ (8001308 <MX_I2C1_Init+0x54>)
 80012bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012be:	4b11      	ldr	r3, [pc, #68]	@ (8001304 <MX_I2C1_Init+0x50>)
 80012c0:	4a12      	ldr	r2, [pc, #72]	@ (800130c <MX_I2C1_Init+0x58>)
 80012c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001304 <MX_I2C1_Init+0x50>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001304 <MX_I2C1_Init+0x50>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001304 <MX_I2C1_Init+0x50>)
 80012d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001304 <MX_I2C1_Init+0x50>)
 80012da:	2200      	movs	r2, #0
 80012dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012de:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <MX_I2C1_Init+0x50>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012e4:	4b07      	ldr	r3, [pc, #28]	@ (8001304 <MX_I2C1_Init+0x50>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ea:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <MX_I2C1_Init+0x50>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012f0:	4804      	ldr	r0, [pc, #16]	@ (8001304 <MX_I2C1_Init+0x50>)
 80012f2:	f001 f941 	bl	8002578 <HAL_I2C_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012fc:	f000 f862 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	200000dc 	.word	0x200000dc
 8001308:	40005400 	.word	0x40005400
 800130c:	000186a0 	.word	0x000186a0

08001310 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001316:	f107 030c 	add.w	r3, r7, #12
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
 8001324:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	4b24      	ldr	r3, [pc, #144]	@ (80013bc <MX_GPIO_Init+0xac>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132e:	4a23      	ldr	r2, [pc, #140]	@ (80013bc <MX_GPIO_Init+0xac>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6313      	str	r3, [r2, #48]	@ 0x30
 8001336:	4b21      	ldr	r3, [pc, #132]	@ (80013bc <MX_GPIO_Init+0xac>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	4b1d      	ldr	r3, [pc, #116]	@ (80013bc <MX_GPIO_Init+0xac>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	4a1c      	ldr	r2, [pc, #112]	@ (80013bc <MX_GPIO_Init+0xac>)
 800134c:	f043 0302 	orr.w	r3, r3, #2
 8001350:	6313      	str	r3, [r2, #48]	@ 0x30
 8001352:	4b1a      	ldr	r3, [pc, #104]	@ (80013bc <MX_GPIO_Init+0xac>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELE_GPIO_GPIO_Port, RELE_GPIO_Pin, GPIO_PIN_RESET);
 800135e:	2200      	movs	r2, #0
 8001360:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001364:	4816      	ldr	r0, [pc, #88]	@ (80013c0 <MX_GPIO_Init+0xb0>)
 8001366:	f001 f8d5 	bl	8002514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BOTON_BOMBA_EXTI8_Pin */
  GPIO_InitStruct.Pin = BOTON_BOMBA_EXTI8_Pin;
 800136a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800136e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001370:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001374:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001376:	2301      	movs	r3, #1
 8001378:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BOTON_BOMBA_EXTI8_GPIO_Port, &GPIO_InitStruct);
 800137a:	f107 030c 	add.w	r3, r7, #12
 800137e:	4619      	mov	r1, r3
 8001380:	480f      	ldr	r0, [pc, #60]	@ (80013c0 <MX_GPIO_Init+0xb0>)
 8001382:	f000 ff2b 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pin : RELE_GPIO_Pin */
  GPIO_InitStruct.Pin = RELE_GPIO_Pin;
 8001386:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800138a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138c:	2301      	movs	r3, #1
 800138e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2300      	movs	r3, #0
 8001396:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RELE_GPIO_GPIO_Port, &GPIO_InitStruct);
 8001398:	f107 030c 	add.w	r3, r7, #12
 800139c:	4619      	mov	r1, r3
 800139e:	4808      	ldr	r0, [pc, #32]	@ (80013c0 <MX_GPIO_Init+0xb0>)
 80013a0:	f000 ff1c 	bl	80021dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80013a4:	2200      	movs	r2, #0
 80013a6:	2100      	movs	r1, #0
 80013a8:	2017      	movs	r0, #23
 80013aa:	f000 fee0 	bl	800216e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80013ae:	2017      	movs	r0, #23
 80013b0:	f000 fef9 	bl	80021a6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013b4:	bf00      	nop
 80013b6:	3720      	adds	r7, #32
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40020400 	.word	0x40020400

080013c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c8:	b672      	cpsid	i
}
 80013ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013cc:	bf00      	nop
 80013ce:	e7fd      	b.n	80013cc <Error_Handler+0x8>

080013d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	4b10      	ldr	r3, [pc, #64]	@ (800141c <HAL_MspInit+0x4c>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013de:	4a0f      	ldr	r2, [pc, #60]	@ (800141c <HAL_MspInit+0x4c>)
 80013e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80013e6:	4b0d      	ldr	r3, [pc, #52]	@ (800141c <HAL_MspInit+0x4c>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	603b      	str	r3, [r7, #0]
 80013f6:	4b09      	ldr	r3, [pc, #36]	@ (800141c <HAL_MspInit+0x4c>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fa:	4a08      	ldr	r2, [pc, #32]	@ (800141c <HAL_MspInit+0x4c>)
 80013fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001400:	6413      	str	r3, [r2, #64]	@ 0x40
 8001402:	4b06      	ldr	r3, [pc, #24]	@ (800141c <HAL_MspInit+0x4c>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001406:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800140e:	2007      	movs	r0, #7
 8001410:	f000 fea2 	bl	8002158 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40023800 	.word	0x40023800

08001420 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	@ 0x28
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a17      	ldr	r2, [pc, #92]	@ (800149c <HAL_ADC_MspInit+0x7c>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d127      	bne.n	8001492 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	4b16      	ldr	r3, [pc, #88]	@ (80014a0 <HAL_ADC_MspInit+0x80>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144a:	4a15      	ldr	r2, [pc, #84]	@ (80014a0 <HAL_ADC_MspInit+0x80>)
 800144c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001450:	6453      	str	r3, [r2, #68]	@ 0x44
 8001452:	4b13      	ldr	r3, [pc, #76]	@ (80014a0 <HAL_ADC_MspInit+0x80>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001456:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	4b0f      	ldr	r3, [pc, #60]	@ (80014a0 <HAL_ADC_MspInit+0x80>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	4a0e      	ldr	r2, [pc, #56]	@ (80014a0 <HAL_ADC_MspInit+0x80>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6313      	str	r3, [r2, #48]	@ 0x30
 800146e:	4b0c      	ldr	r3, [pc, #48]	@ (80014a0 <HAL_ADC_MspInit+0x80>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = Sensor_capacitivo_adc1_Pin;
 800147a:	2301      	movs	r3, #1
 800147c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800147e:	2303      	movs	r3, #3
 8001480:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Sensor_capacitivo_adc1_GPIO_Port, &GPIO_InitStruct);
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	4619      	mov	r1, r3
 800148c:	4805      	ldr	r0, [pc, #20]	@ (80014a4 <HAL_ADC_MspInit+0x84>)
 800148e:	f000 fea5 	bl	80021dc <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001492:	bf00      	nop
 8001494:	3728      	adds	r7, #40	@ 0x28
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40012000 	.word	0x40012000
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40020000 	.word	0x40020000

080014a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08a      	sub	sp, #40	@ 0x28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a19      	ldr	r2, [pc, #100]	@ (800152c <HAL_I2C_MspInit+0x84>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d12b      	bne.n	8001522 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	4b18      	ldr	r3, [pc, #96]	@ (8001530 <HAL_I2C_MspInit+0x88>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	4a17      	ldr	r2, [pc, #92]	@ (8001530 <HAL_I2C_MspInit+0x88>)
 80014d4:	f043 0302 	orr.w	r3, r3, #2
 80014d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014da:	4b15      	ldr	r3, [pc, #84]	@ (8001530 <HAL_I2C_MspInit+0x88>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_I2C1_Pin|LCD_SDA_I2C1_Pin;
 80014e6:	23c0      	movs	r3, #192	@ 0xc0
 80014e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ea:	2312      	movs	r3, #18
 80014ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f2:	2303      	movs	r3, #3
 80014f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014f6:	2304      	movs	r3, #4
 80014f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4619      	mov	r1, r3
 8001500:	480c      	ldr	r0, [pc, #48]	@ (8001534 <HAL_I2C_MspInit+0x8c>)
 8001502:	f000 fe6b 	bl	80021dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	4b09      	ldr	r3, [pc, #36]	@ (8001530 <HAL_I2C_MspInit+0x88>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150e:	4a08      	ldr	r2, [pc, #32]	@ (8001530 <HAL_I2C_MspInit+0x88>)
 8001510:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001514:	6413      	str	r3, [r2, #64]	@ 0x40
 8001516:	4b06      	ldr	r3, [pc, #24]	@ (8001530 <HAL_I2C_MspInit+0x88>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001522:	bf00      	nop
 8001524:	3728      	adds	r7, #40	@ 0x28
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40005400 	.word	0x40005400
 8001530:	40023800 	.word	0x40023800
 8001534:	40020400 	.word	0x40020400

08001538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800153c:	bf00      	nop
 800153e:	e7fd      	b.n	800153c <NMI_Handler+0x4>

08001540 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001544:	bf00      	nop
 8001546:	e7fd      	b.n	8001544 <HardFault_Handler+0x4>

08001548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800154c:	bf00      	nop
 800154e:	e7fd      	b.n	800154c <MemManage_Handler+0x4>

08001550 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001554:	bf00      	nop
 8001556:	e7fd      	b.n	8001554 <BusFault_Handler+0x4>

08001558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800155c:	bf00      	nop
 800155e:	e7fd      	b.n	800155c <UsageFault_Handler+0x4>

08001560 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800158e:	f000 f8cf 	bl	8001730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}

08001596 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOTON_BOMBA_EXTI8_Pin);
 800159a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800159e:	f000 ffd3 	bl	8002548 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015b0:	4a14      	ldr	r2, [pc, #80]	@ (8001604 <_sbrk+0x5c>)
 80015b2:	4b15      	ldr	r3, [pc, #84]	@ (8001608 <_sbrk+0x60>)
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015bc:	4b13      	ldr	r3, [pc, #76]	@ (800160c <_sbrk+0x64>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d102      	bne.n	80015ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015c4:	4b11      	ldr	r3, [pc, #68]	@ (800160c <_sbrk+0x64>)
 80015c6:	4a12      	ldr	r2, [pc, #72]	@ (8001610 <_sbrk+0x68>)
 80015c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ca:	4b10      	ldr	r3, [pc, #64]	@ (800160c <_sbrk+0x64>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d207      	bcs.n	80015e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015d8:	f002 f92c 	bl	8003834 <__errno>
 80015dc:	4603      	mov	r3, r0
 80015de:	220c      	movs	r2, #12
 80015e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015e2:	f04f 33ff 	mov.w	r3, #4294967295
 80015e6:	e009      	b.n	80015fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015e8:	4b08      	ldr	r3, [pc, #32]	@ (800160c <_sbrk+0x64>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ee:	4b07      	ldr	r3, [pc, #28]	@ (800160c <_sbrk+0x64>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4413      	add	r3, r2
 80015f6:	4a05      	ldr	r2, [pc, #20]	@ (800160c <_sbrk+0x64>)
 80015f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015fa:	68fb      	ldr	r3, [r7, #12]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20020000 	.word	0x20020000
 8001608:	00000400 	.word	0x00000400
 800160c:	20000138 	.word	0x20000138
 8001610:	20000288 	.word	0x20000288

08001614 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001618:	4b06      	ldr	r3, [pc, #24]	@ (8001634 <SystemInit+0x20>)
 800161a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800161e:	4a05      	ldr	r2, [pc, #20]	@ (8001634 <SystemInit+0x20>)
 8001620:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001624:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001638:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001670 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800163c:	f7ff ffea 	bl	8001614 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001640:	480c      	ldr	r0, [pc, #48]	@ (8001674 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001642:	490d      	ldr	r1, [pc, #52]	@ (8001678 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001644:	4a0d      	ldr	r2, [pc, #52]	@ (800167c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001648:	e002      	b.n	8001650 <LoopCopyDataInit>

0800164a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800164a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800164c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800164e:	3304      	adds	r3, #4

08001650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001654:	d3f9      	bcc.n	800164a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001656:	4a0a      	ldr	r2, [pc, #40]	@ (8001680 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001658:	4c0a      	ldr	r4, [pc, #40]	@ (8001684 <LoopFillZerobss+0x22>)
  movs r3, #0
 800165a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800165c:	e001      	b.n	8001662 <LoopFillZerobss>

0800165e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800165e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001660:	3204      	adds	r2, #4

08001662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001664:	d3fb      	bcc.n	800165e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001666:	f002 f8eb 	bl	8003840 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800166a:	f7ff fd43 	bl	80010f4 <main>
  bx  lr    
 800166e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001670:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001678:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800167c:	080041f0 	.word	0x080041f0
  ldr r2, =_sbss
 8001680:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001684:	20000288 	.word	0x20000288

08001688 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001688:	e7fe      	b.n	8001688 <ADC_IRQHandler>
	...

0800168c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001690:	4b0e      	ldr	r3, [pc, #56]	@ (80016cc <HAL_Init+0x40>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a0d      	ldr	r2, [pc, #52]	@ (80016cc <HAL_Init+0x40>)
 8001696:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800169a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800169c:	4b0b      	ldr	r3, [pc, #44]	@ (80016cc <HAL_Init+0x40>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a0a      	ldr	r2, [pc, #40]	@ (80016cc <HAL_Init+0x40>)
 80016a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016a8:	4b08      	ldr	r3, [pc, #32]	@ (80016cc <HAL_Init+0x40>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a07      	ldr	r2, [pc, #28]	@ (80016cc <HAL_Init+0x40>)
 80016ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b4:	2003      	movs	r0, #3
 80016b6:	f000 fd4f 	bl	8002158 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ba:	2000      	movs	r0, #0
 80016bc:	f000 f808 	bl	80016d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016c0:	f7ff fe86 	bl	80013d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40023c00 	.word	0x40023c00

080016d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016d8:	4b12      	ldr	r3, [pc, #72]	@ (8001724 <HAL_InitTick+0x54>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4b12      	ldr	r3, [pc, #72]	@ (8001728 <HAL_InitTick+0x58>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	4619      	mov	r1, r3
 80016e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ee:	4618      	mov	r0, r3
 80016f0:	f000 fd67 	bl	80021c2 <HAL_SYSTICK_Config>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e00e      	b.n	800171c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b0f      	cmp	r3, #15
 8001702:	d80a      	bhi.n	800171a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001704:	2200      	movs	r2, #0
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	f04f 30ff 	mov.w	r0, #4294967295
 800170c:	f000 fd2f 	bl	800216e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001710:	4a06      	ldr	r2, [pc, #24]	@ (800172c <HAL_InitTick+0x5c>)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001716:	2300      	movs	r3, #0
 8001718:	e000      	b.n	800171c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
}
 800171c:	4618      	mov	r0, r3
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000014 	.word	0x20000014
 8001728:	2000001c 	.word	0x2000001c
 800172c:	20000018 	.word	0x20000018

08001730 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001734:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <HAL_IncTick+0x20>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <HAL_IncTick+0x24>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4413      	add	r3, r2
 8001740:	4a04      	ldr	r2, [pc, #16]	@ (8001754 <HAL_IncTick+0x24>)
 8001742:	6013      	str	r3, [r2, #0]
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	2000001c 	.word	0x2000001c
 8001754:	2000013c 	.word	0x2000013c

08001758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return uwTick;
 800175c:	4b03      	ldr	r3, [pc, #12]	@ (800176c <HAL_GetTick+0x14>)
 800175e:	681b      	ldr	r3, [r3, #0]
}
 8001760:	4618      	mov	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	2000013c 	.word	0x2000013c

08001770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001778:	f7ff ffee 	bl	8001758 <HAL_GetTick>
 800177c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001788:	d005      	beq.n	8001796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800178a:	4b0a      	ldr	r3, [pc, #40]	@ (80017b4 <HAL_Delay+0x44>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	461a      	mov	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4413      	add	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001796:	bf00      	nop
 8001798:	f7ff ffde 	bl	8001758 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d8f7      	bhi.n	8001798 <HAL_Delay+0x28>
  {
  }
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	2000001c 	.word	0x2000001c

080017b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017c0:	2300      	movs	r3, #0
 80017c2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e033      	b.n	8001836 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d109      	bne.n	80017ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff fe22 	bl	8001420 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ee:	f003 0310 	and.w	r3, r3, #16
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d118      	bne.n	8001828 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80017fe:	f023 0302 	bic.w	r3, r3, #2
 8001802:	f043 0202 	orr.w	r2, r3, #2
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 fad8 	bl	8001dc0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181a:	f023 0303 	bic.w	r3, r3, #3
 800181e:	f043 0201 	orr.w	r2, r3, #1
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	641a      	str	r2, [r3, #64]	@ 0x40
 8001826:	e001      	b.n	800182c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001834:	7bfb      	ldrb	r3, [r7, #15]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001848:	2300      	movs	r3, #0
 800184a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001852:	2b01      	cmp	r3, #1
 8001854:	d101      	bne.n	800185a <HAL_ADC_Start+0x1a>
 8001856:	2302      	movs	r3, #2
 8001858:	e0b2      	b.n	80019c0 <HAL_ADC_Start+0x180>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2201      	movs	r2, #1
 800185e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	2b01      	cmp	r3, #1
 800186e:	d018      	beq.n	80018a2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f042 0201 	orr.w	r2, r2, #1
 800187e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001880:	4b52      	ldr	r3, [pc, #328]	@ (80019cc <HAL_ADC_Start+0x18c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a52      	ldr	r2, [pc, #328]	@ (80019d0 <HAL_ADC_Start+0x190>)
 8001886:	fba2 2303 	umull	r2, r3, r2, r3
 800188a:	0c9a      	lsrs	r2, r3, #18
 800188c:	4613      	mov	r3, r2
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	4413      	add	r3, r2
 8001892:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001894:	e002      	b.n	800189c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	3b01      	subs	r3, #1
 800189a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f9      	bne.n	8001896 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d17a      	bne.n	80019a6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80018b8:	f023 0301 	bic.w	r3, r3, #1
 80018bc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d007      	beq.n	80018e2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80018da:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80018ee:	d106      	bne.n	80018fe <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018f4:	f023 0206 	bic.w	r2, r3, #6
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	645a      	str	r2, [r3, #68]	@ 0x44
 80018fc:	e002      	b.n	8001904 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800190c:	4b31      	ldr	r3, [pc, #196]	@ (80019d4 <HAL_ADC_Start+0x194>)
 800190e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001918:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f003 031f 	and.w	r3, r3, #31
 8001922:	2b00      	cmp	r3, #0
 8001924:	d12a      	bne.n	800197c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a2b      	ldr	r2, [pc, #172]	@ (80019d8 <HAL_ADC_Start+0x198>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d015      	beq.n	800195c <HAL_ADC_Start+0x11c>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a29      	ldr	r2, [pc, #164]	@ (80019dc <HAL_ADC_Start+0x19c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d105      	bne.n	8001946 <HAL_ADC_Start+0x106>
 800193a:	4b26      	ldr	r3, [pc, #152]	@ (80019d4 <HAL_ADC_Start+0x194>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 031f 	and.w	r3, r3, #31
 8001942:	2b00      	cmp	r3, #0
 8001944:	d00a      	beq.n	800195c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a25      	ldr	r2, [pc, #148]	@ (80019e0 <HAL_ADC_Start+0x1a0>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d136      	bne.n	80019be <HAL_ADC_Start+0x17e>
 8001950:	4b20      	ldr	r3, [pc, #128]	@ (80019d4 <HAL_ADC_Start+0x194>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 0310 	and.w	r3, r3, #16
 8001958:	2b00      	cmp	r3, #0
 800195a:	d130      	bne.n	80019be <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d129      	bne.n	80019be <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	e020      	b.n	80019be <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a15      	ldr	r2, [pc, #84]	@ (80019d8 <HAL_ADC_Start+0x198>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d11b      	bne.n	80019be <HAL_ADC_Start+0x17e>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d114      	bne.n	80019be <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	689a      	ldr	r2, [r3, #8]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	e00b      	b.n	80019be <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019aa:	f043 0210 	orr.w	r2, r3, #16
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b6:	f043 0201 	orr.w	r2, r3, #1
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	20000014 	.word	0x20000014
 80019d0:	431bde83 	.word	0x431bde83
 80019d4:	40012300 	.word	0x40012300
 80019d8:	40012000 	.word	0x40012000
 80019dc:	40012100 	.word	0x40012100
 80019e0:	40012200 	.word	0x40012200

080019e4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d101      	bne.n	80019fa <HAL_ADC_Stop+0x16>
 80019f6:	2302      	movs	r3, #2
 80019f8:	e021      	b.n	8001a3e <HAL_ADC_Stop+0x5a>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f022 0201 	bic.w	r2, r2, #1
 8001a10:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d109      	bne.n	8001a34 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a24:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a28:	f023 0301 	bic.w	r3, r3, #1
 8001a2c:	f043 0201 	orr.w	r2, r3, #1
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b084      	sub	sp, #16
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
 8001a52:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a66:	d113      	bne.n	8001a90 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a76:	d10b      	bne.n	8001a90 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7c:	f043 0220 	orr.w	r2, r3, #32
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e063      	b.n	8001b58 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a90:	f7ff fe62 	bl	8001758 <HAL_GetTick>
 8001a94:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a96:	e021      	b.n	8001adc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a9e:	d01d      	beq.n	8001adc <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d007      	beq.n	8001ab6 <HAL_ADC_PollForConversion+0x6c>
 8001aa6:	f7ff fe57 	bl	8001758 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d212      	bcs.n	8001adc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d00b      	beq.n	8001adc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac8:	f043 0204 	orr.w	r2, r3, #4
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e03d      	b.n	8001b58 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d1d6      	bne.n	8001a98 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f06f 0212 	mvn.w	r2, #18
 8001af2:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d123      	bne.n	8001b56 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d11f      	bne.n	8001b56 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b1c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d006      	beq.n	8001b32 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d111      	bne.n	8001b56 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b36:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d105      	bne.n	8001b56 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4e:	f043 0201 	orr.w	r2, r3, #1
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
	...

08001b7c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d101      	bne.n	8001b98 <HAL_ADC_ConfigChannel+0x1c>
 8001b94:	2302      	movs	r3, #2
 8001b96:	e105      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x228>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b09      	cmp	r3, #9
 8001ba6:	d925      	bls.n	8001bf4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68d9      	ldr	r1, [r3, #12]
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	4413      	add	r3, r2
 8001bbc:	3b1e      	subs	r3, #30
 8001bbe:	2207      	movs	r2, #7
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43da      	mvns	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	400a      	ands	r2, r1
 8001bcc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68d9      	ldr	r1, [r3, #12]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	4618      	mov	r0, r3
 8001be0:	4603      	mov	r3, r0
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	4403      	add	r3, r0
 8001be6:	3b1e      	subs	r3, #30
 8001be8:	409a      	lsls	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	e022      	b.n	8001c3a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6919      	ldr	r1, [r3, #16]
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	461a      	mov	r2, r3
 8001c02:	4613      	mov	r3, r2
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	4413      	add	r3, r2
 8001c08:	2207      	movs	r2, #7
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43da      	mvns	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	400a      	ands	r2, r1
 8001c16:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6919      	ldr	r1, [r3, #16]
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	4618      	mov	r0, r3
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	4403      	add	r3, r0
 8001c30:	409a      	lsls	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	430a      	orrs	r2, r1
 8001c38:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b06      	cmp	r3, #6
 8001c40:	d824      	bhi.n	8001c8c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	3b05      	subs	r3, #5
 8001c54:	221f      	movs	r2, #31
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43da      	mvns	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	400a      	ands	r2, r1
 8001c62:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	4618      	mov	r0, r3
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685a      	ldr	r2, [r3, #4]
 8001c76:	4613      	mov	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	3b05      	subs	r3, #5
 8001c7e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c8a:	e04c      	b.n	8001d26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b0c      	cmp	r3, #12
 8001c92:	d824      	bhi.n	8001cde <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685a      	ldr	r2, [r3, #4]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3b23      	subs	r3, #35	@ 0x23
 8001ca6:	221f      	movs	r2, #31
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43da      	mvns	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	400a      	ands	r2, r1
 8001cb4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	3b23      	subs	r3, #35	@ 0x23
 8001cd0:	fa00 f203 	lsl.w	r2, r0, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cdc:	e023      	b.n	8001d26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685a      	ldr	r2, [r3, #4]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	3b41      	subs	r3, #65	@ 0x41
 8001cf0:	221f      	movs	r2, #31
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43da      	mvns	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	400a      	ands	r2, r1
 8001cfe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	4613      	mov	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	3b41      	subs	r3, #65	@ 0x41
 8001d1a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	430a      	orrs	r2, r1
 8001d24:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d26:	4b22      	ldr	r3, [pc, #136]	@ (8001db0 <HAL_ADC_ConfigChannel+0x234>)
 8001d28:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a21      	ldr	r2, [pc, #132]	@ (8001db4 <HAL_ADC_ConfigChannel+0x238>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d109      	bne.n	8001d48 <HAL_ADC_ConfigChannel+0x1cc>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b12      	cmp	r3, #18
 8001d3a:	d105      	bne.n	8001d48 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a19      	ldr	r2, [pc, #100]	@ (8001db4 <HAL_ADC_ConfigChannel+0x238>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d123      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x21e>
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2b10      	cmp	r3, #16
 8001d58:	d003      	beq.n	8001d62 <HAL_ADC_ConfigChannel+0x1e6>
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2b11      	cmp	r3, #17
 8001d60:	d11b      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2b10      	cmp	r3, #16
 8001d74:	d111      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d76:	4b10      	ldr	r3, [pc, #64]	@ (8001db8 <HAL_ADC_ConfigChannel+0x23c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a10      	ldr	r2, [pc, #64]	@ (8001dbc <HAL_ADC_ConfigChannel+0x240>)
 8001d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d80:	0c9a      	lsrs	r2, r3, #18
 8001d82:	4613      	mov	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d8c:	e002      	b.n	8001d94 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	3b01      	subs	r3, #1
 8001d92:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f9      	bne.n	8001d8e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	40012300 	.word	0x40012300
 8001db4:	40012000 	.word	0x40012000
 8001db8:	20000014 	.word	0x20000014
 8001dbc:	431bde83 	.word	0x431bde83

08001dc0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dc8:	4b79      	ldr	r3, [pc, #484]	@ (8001fb0 <ADC_Init+0x1f0>)
 8001dca:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	431a      	orrs	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001df4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6859      	ldr	r1, [r3, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	021a      	lsls	r2, r3, #8
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	430a      	orrs	r2, r1
 8001e08:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001e18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6859      	ldr	r1, [r3, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6899      	ldr	r1, [r3, #8]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68da      	ldr	r2, [r3, #12]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e52:	4a58      	ldr	r2, [pc, #352]	@ (8001fb4 <ADC_Init+0x1f4>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d022      	beq.n	8001e9e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	689a      	ldr	r2, [r3, #8]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e66:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6899      	ldr	r1, [r3, #8]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6899      	ldr	r1, [r3, #8]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	e00f      	b.n	8001ebe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001eac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ebc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 0202 	bic.w	r2, r2, #2
 8001ecc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6899      	ldr	r1, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	7e1b      	ldrb	r3, [r3, #24]
 8001ed8:	005a      	lsls	r2, r3, #1
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d01b      	beq.n	8001f24 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001efa:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001f0a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6859      	ldr	r1, [r3, #4]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f16:	3b01      	subs	r3, #1
 8001f18:	035a      	lsls	r2, r3, #13
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	e007      	b.n	8001f34 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f32:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001f42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	051a      	lsls	r2, r3, #20
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	430a      	orrs	r2, r1
 8001f58:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001f68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6899      	ldr	r1, [r3, #8]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f76:	025a      	lsls	r2, r3, #9
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689a      	ldr	r2, [r3, #8]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6899      	ldr	r1, [r3, #8]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	029a      	lsls	r2, r3, #10
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	609a      	str	r2, [r3, #8]
}
 8001fa4:	bf00      	nop
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	40012300 	.word	0x40012300
 8001fb4:	0f000001 	.word	0x0f000001

08001fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001ffc <__NVIC_SetPriorityGrouping+0x44>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fe0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fe4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fea:	4a04      	ldr	r2, [pc, #16]	@ (8001ffc <__NVIC_SetPriorityGrouping+0x44>)
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	60d3      	str	r3, [r2, #12]
}
 8001ff0:	bf00      	nop
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002004:	4b04      	ldr	r3, [pc, #16]	@ (8002018 <__NVIC_GetPriorityGrouping+0x18>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	0a1b      	lsrs	r3, r3, #8
 800200a:	f003 0307 	and.w	r3, r3, #7
}
 800200e:	4618      	mov	r0, r3
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202a:	2b00      	cmp	r3, #0
 800202c:	db0b      	blt.n	8002046 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	f003 021f 	and.w	r2, r3, #31
 8002034:	4907      	ldr	r1, [pc, #28]	@ (8002054 <__NVIC_EnableIRQ+0x38>)
 8002036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203a:	095b      	lsrs	r3, r3, #5
 800203c:	2001      	movs	r0, #1
 800203e:	fa00 f202 	lsl.w	r2, r0, r2
 8002042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	e000e100 	.word	0xe000e100

08002058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	6039      	str	r1, [r7, #0]
 8002062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002068:	2b00      	cmp	r3, #0
 800206a:	db0a      	blt.n	8002082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	b2da      	uxtb	r2, r3
 8002070:	490c      	ldr	r1, [pc, #48]	@ (80020a4 <__NVIC_SetPriority+0x4c>)
 8002072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002076:	0112      	lsls	r2, r2, #4
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	440b      	add	r3, r1
 800207c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002080:	e00a      	b.n	8002098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	b2da      	uxtb	r2, r3
 8002086:	4908      	ldr	r1, [pc, #32]	@ (80020a8 <__NVIC_SetPriority+0x50>)
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	3b04      	subs	r3, #4
 8002090:	0112      	lsls	r2, r2, #4
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	440b      	add	r3, r1
 8002096:	761a      	strb	r2, [r3, #24]
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	e000e100 	.word	0xe000e100
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b089      	sub	sp, #36	@ 0x24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f1c3 0307 	rsb	r3, r3, #7
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	bf28      	it	cs
 80020ca:	2304      	movcs	r3, #4
 80020cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	3304      	adds	r3, #4
 80020d2:	2b06      	cmp	r3, #6
 80020d4:	d902      	bls.n	80020dc <NVIC_EncodePriority+0x30>
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	3b03      	subs	r3, #3
 80020da:	e000      	b.n	80020de <NVIC_EncodePriority+0x32>
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e0:	f04f 32ff 	mov.w	r2, #4294967295
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43da      	mvns	r2, r3
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	401a      	ands	r2, r3
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020f4:	f04f 31ff 	mov.w	r1, #4294967295
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	fa01 f303 	lsl.w	r3, r1, r3
 80020fe:	43d9      	mvns	r1, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002104:	4313      	orrs	r3, r2
         );
}
 8002106:	4618      	mov	r0, r3
 8002108:	3724      	adds	r7, #36	@ 0x24
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
	...

08002114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3b01      	subs	r3, #1
 8002120:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002124:	d301      	bcc.n	800212a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002126:	2301      	movs	r3, #1
 8002128:	e00f      	b.n	800214a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800212a:	4a0a      	ldr	r2, [pc, #40]	@ (8002154 <SysTick_Config+0x40>)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3b01      	subs	r3, #1
 8002130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002132:	210f      	movs	r1, #15
 8002134:	f04f 30ff 	mov.w	r0, #4294967295
 8002138:	f7ff ff8e 	bl	8002058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800213c:	4b05      	ldr	r3, [pc, #20]	@ (8002154 <SysTick_Config+0x40>)
 800213e:	2200      	movs	r2, #0
 8002140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002142:	4b04      	ldr	r3, [pc, #16]	@ (8002154 <SysTick_Config+0x40>)
 8002144:	2207      	movs	r2, #7
 8002146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	e000e010 	.word	0xe000e010

08002158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7ff ff29 	bl	8001fb8 <__NVIC_SetPriorityGrouping>
}
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800216e:	b580      	push	{r7, lr}
 8002170:	b086      	sub	sp, #24
 8002172:	af00      	add	r7, sp, #0
 8002174:	4603      	mov	r3, r0
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
 800217a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002180:	f7ff ff3e 	bl	8002000 <__NVIC_GetPriorityGrouping>
 8002184:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	68b9      	ldr	r1, [r7, #8]
 800218a:	6978      	ldr	r0, [r7, #20]
 800218c:	f7ff ff8e 	bl	80020ac <NVIC_EncodePriority>
 8002190:	4602      	mov	r2, r0
 8002192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002196:	4611      	mov	r1, r2
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ff5d 	bl	8002058 <__NVIC_SetPriority>
}
 800219e:	bf00      	nop
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	4603      	mov	r3, r0
 80021ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ff31 	bl	800201c <__NVIC_EnableIRQ>
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b082      	sub	sp, #8
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff ffa2 	bl	8002114 <SysTick_Config>
 80021d0:	4603      	mov	r3, r0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
	...

080021dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021dc:	b480      	push	{r7}
 80021de:	b089      	sub	sp, #36	@ 0x24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
 80021f6:	e16b      	b.n	80024d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021f8:	2201      	movs	r2, #1
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	4013      	ands	r3, r2
 800220a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	429a      	cmp	r2, r3
 8002212:	f040 815a 	bne.w	80024ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 0303 	and.w	r3, r3, #3
 800221e:	2b01      	cmp	r3, #1
 8002220:	d005      	beq.n	800222e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800222a:	2b02      	cmp	r3, #2
 800222c:	d130      	bne.n	8002290 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	2203      	movs	r2, #3
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43db      	mvns	r3, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4013      	ands	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	68da      	ldr	r2, [r3, #12]
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4313      	orrs	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002264:	2201      	movs	r2, #1
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	091b      	lsrs	r3, r3, #4
 800227a:	f003 0201 	and.w	r2, r3, #1
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	2b03      	cmp	r3, #3
 800229a:	d017      	beq.n	80022cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	2203      	movs	r2, #3
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 0303 	and.w	r3, r3, #3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d123      	bne.n	8002320 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	08da      	lsrs	r2, r3, #3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3208      	adds	r2, #8
 80022e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	220f      	movs	r2, #15
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	691a      	ldr	r2, [r3, #16]
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	08da      	lsrs	r2, r3, #3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3208      	adds	r2, #8
 800231a:	69b9      	ldr	r1, [r7, #24]
 800231c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	2203      	movs	r2, #3
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 0203 	and.w	r2, r3, #3
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 80b4 	beq.w	80024ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	4b60      	ldr	r3, [pc, #384]	@ (80024e8 <HAL_GPIO_Init+0x30c>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236a:	4a5f      	ldr	r2, [pc, #380]	@ (80024e8 <HAL_GPIO_Init+0x30c>)
 800236c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002370:	6453      	str	r3, [r2, #68]	@ 0x44
 8002372:	4b5d      	ldr	r3, [pc, #372]	@ (80024e8 <HAL_GPIO_Init+0x30c>)
 8002374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002376:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800237e:	4a5b      	ldr	r2, [pc, #364]	@ (80024ec <HAL_GPIO_Init+0x310>)
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	089b      	lsrs	r3, r3, #2
 8002384:	3302      	adds	r3, #2
 8002386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800238a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	220f      	movs	r2, #15
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4013      	ands	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a52      	ldr	r2, [pc, #328]	@ (80024f0 <HAL_GPIO_Init+0x314>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d02b      	beq.n	8002402 <HAL_GPIO_Init+0x226>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a51      	ldr	r2, [pc, #324]	@ (80024f4 <HAL_GPIO_Init+0x318>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d025      	beq.n	80023fe <HAL_GPIO_Init+0x222>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a50      	ldr	r2, [pc, #320]	@ (80024f8 <HAL_GPIO_Init+0x31c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d01f      	beq.n	80023fa <HAL_GPIO_Init+0x21e>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a4f      	ldr	r2, [pc, #316]	@ (80024fc <HAL_GPIO_Init+0x320>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d019      	beq.n	80023f6 <HAL_GPIO_Init+0x21a>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a4e      	ldr	r2, [pc, #312]	@ (8002500 <HAL_GPIO_Init+0x324>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d013      	beq.n	80023f2 <HAL_GPIO_Init+0x216>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a4d      	ldr	r2, [pc, #308]	@ (8002504 <HAL_GPIO_Init+0x328>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d00d      	beq.n	80023ee <HAL_GPIO_Init+0x212>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a4c      	ldr	r2, [pc, #304]	@ (8002508 <HAL_GPIO_Init+0x32c>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d007      	beq.n	80023ea <HAL_GPIO_Init+0x20e>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a4b      	ldr	r2, [pc, #300]	@ (800250c <HAL_GPIO_Init+0x330>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d101      	bne.n	80023e6 <HAL_GPIO_Init+0x20a>
 80023e2:	2307      	movs	r3, #7
 80023e4:	e00e      	b.n	8002404 <HAL_GPIO_Init+0x228>
 80023e6:	2308      	movs	r3, #8
 80023e8:	e00c      	b.n	8002404 <HAL_GPIO_Init+0x228>
 80023ea:	2306      	movs	r3, #6
 80023ec:	e00a      	b.n	8002404 <HAL_GPIO_Init+0x228>
 80023ee:	2305      	movs	r3, #5
 80023f0:	e008      	b.n	8002404 <HAL_GPIO_Init+0x228>
 80023f2:	2304      	movs	r3, #4
 80023f4:	e006      	b.n	8002404 <HAL_GPIO_Init+0x228>
 80023f6:	2303      	movs	r3, #3
 80023f8:	e004      	b.n	8002404 <HAL_GPIO_Init+0x228>
 80023fa:	2302      	movs	r3, #2
 80023fc:	e002      	b.n	8002404 <HAL_GPIO_Init+0x228>
 80023fe:	2301      	movs	r3, #1
 8002400:	e000      	b.n	8002404 <HAL_GPIO_Init+0x228>
 8002402:	2300      	movs	r3, #0
 8002404:	69fa      	ldr	r2, [r7, #28]
 8002406:	f002 0203 	and.w	r2, r2, #3
 800240a:	0092      	lsls	r2, r2, #2
 800240c:	4093      	lsls	r3, r2
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4313      	orrs	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002414:	4935      	ldr	r1, [pc, #212]	@ (80024ec <HAL_GPIO_Init+0x310>)
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	089b      	lsrs	r3, r3, #2
 800241a:	3302      	adds	r3, #2
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002422:	4b3b      	ldr	r3, [pc, #236]	@ (8002510 <HAL_GPIO_Init+0x334>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	43db      	mvns	r3, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4013      	ands	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	4313      	orrs	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002446:	4a32      	ldr	r2, [pc, #200]	@ (8002510 <HAL_GPIO_Init+0x334>)
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800244c:	4b30      	ldr	r3, [pc, #192]	@ (8002510 <HAL_GPIO_Init+0x334>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	43db      	mvns	r3, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4013      	ands	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4313      	orrs	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002470:	4a27      	ldr	r2, [pc, #156]	@ (8002510 <HAL_GPIO_Init+0x334>)
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002476:	4b26      	ldr	r3, [pc, #152]	@ (8002510 <HAL_GPIO_Init+0x334>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	43db      	mvns	r3, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4013      	ands	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800249a:	4a1d      	ldr	r2, [pc, #116]	@ (8002510 <HAL_GPIO_Init+0x334>)
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002510 <HAL_GPIO_Init+0x334>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	43db      	mvns	r3, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4013      	ands	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024c4:	4a12      	ldr	r2, [pc, #72]	@ (8002510 <HAL_GPIO_Init+0x334>)
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	3301      	adds	r3, #1
 80024ce:	61fb      	str	r3, [r7, #28]
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	2b0f      	cmp	r3, #15
 80024d4:	f67f ae90 	bls.w	80021f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024d8:	bf00      	nop
 80024da:	bf00      	nop
 80024dc:	3724      	adds	r7, #36	@ 0x24
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	40023800 	.word	0x40023800
 80024ec:	40013800 	.word	0x40013800
 80024f0:	40020000 	.word	0x40020000
 80024f4:	40020400 	.word	0x40020400
 80024f8:	40020800 	.word	0x40020800
 80024fc:	40020c00 	.word	0x40020c00
 8002500:	40021000 	.word	0x40021000
 8002504:	40021400 	.word	0x40021400
 8002508:	40021800 	.word	0x40021800
 800250c:	40021c00 	.word	0x40021c00
 8002510:	40013c00 	.word	0x40013c00

08002514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	460b      	mov	r3, r1
 800251e:	807b      	strh	r3, [r7, #2]
 8002520:	4613      	mov	r3, r2
 8002522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002524:	787b      	ldrb	r3, [r7, #1]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800252a:	887a      	ldrh	r2, [r7, #2]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002530:	e003      	b.n	800253a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002532:	887b      	ldrh	r3, [r7, #2]
 8002534:	041a      	lsls	r2, r3, #16
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	619a      	str	r2, [r3, #24]
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
	...

08002548 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002552:	4b08      	ldr	r3, [pc, #32]	@ (8002574 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002554:	695a      	ldr	r2, [r3, #20]
 8002556:	88fb      	ldrh	r3, [r7, #6]
 8002558:	4013      	ands	r3, r2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d006      	beq.n	800256c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800255e:	4a05      	ldr	r2, [pc, #20]	@ (8002574 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002560:	88fb      	ldrh	r3, [r7, #6]
 8002562:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002564:	88fb      	ldrh	r3, [r7, #6]
 8002566:	4618      	mov	r0, r3
 8002568:	f7fe fcfa 	bl	8000f60 <HAL_GPIO_EXTI_Callback>
  }
}
 800256c:	bf00      	nop
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40013c00 	.word	0x40013c00

08002578 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e12b      	b.n	80027e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d106      	bne.n	80025a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7fe ff82 	bl	80014a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2224      	movs	r2, #36	@ 0x24
 80025a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 0201 	bic.w	r2, r2, #1
 80025ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025dc:	f001 f8da 	bl	8003794 <HAL_RCC_GetPCLK1Freq>
 80025e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	4a81      	ldr	r2, [pc, #516]	@ (80027ec <HAL_I2C_Init+0x274>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d807      	bhi.n	80025fc <HAL_I2C_Init+0x84>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	4a80      	ldr	r2, [pc, #512]	@ (80027f0 <HAL_I2C_Init+0x278>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	bf94      	ite	ls
 80025f4:	2301      	movls	r3, #1
 80025f6:	2300      	movhi	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	e006      	b.n	800260a <HAL_I2C_Init+0x92>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	4a7d      	ldr	r2, [pc, #500]	@ (80027f4 <HAL_I2C_Init+0x27c>)
 8002600:	4293      	cmp	r3, r2
 8002602:	bf94      	ite	ls
 8002604:	2301      	movls	r3, #1
 8002606:	2300      	movhi	r3, #0
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e0e7      	b.n	80027e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	4a78      	ldr	r2, [pc, #480]	@ (80027f8 <HAL_I2C_Init+0x280>)
 8002616:	fba2 2303 	umull	r2, r3, r2, r3
 800261a:	0c9b      	lsrs	r3, r3, #18
 800261c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	430a      	orrs	r2, r1
 8002630:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	4a6a      	ldr	r2, [pc, #424]	@ (80027ec <HAL_I2C_Init+0x274>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d802      	bhi.n	800264c <HAL_I2C_Init+0xd4>
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	3301      	adds	r3, #1
 800264a:	e009      	b.n	8002660 <HAL_I2C_Init+0xe8>
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002652:	fb02 f303 	mul.w	r3, r2, r3
 8002656:	4a69      	ldr	r2, [pc, #420]	@ (80027fc <HAL_I2C_Init+0x284>)
 8002658:	fba2 2303 	umull	r2, r3, r2, r3
 800265c:	099b      	lsrs	r3, r3, #6
 800265e:	3301      	adds	r3, #1
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	6812      	ldr	r2, [r2, #0]
 8002664:	430b      	orrs	r3, r1
 8002666:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002672:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	495c      	ldr	r1, [pc, #368]	@ (80027ec <HAL_I2C_Init+0x274>)
 800267c:	428b      	cmp	r3, r1
 800267e:	d819      	bhi.n	80026b4 <HAL_I2C_Init+0x13c>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	1e59      	subs	r1, r3, #1
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	fbb1 f3f3 	udiv	r3, r1, r3
 800268e:	1c59      	adds	r1, r3, #1
 8002690:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002694:	400b      	ands	r3, r1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00a      	beq.n	80026b0 <HAL_I2C_Init+0x138>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	1e59      	subs	r1, r3, #1
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80026a8:	3301      	adds	r3, #1
 80026aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ae:	e051      	b.n	8002754 <HAL_I2C_Init+0x1dc>
 80026b0:	2304      	movs	r3, #4
 80026b2:	e04f      	b.n	8002754 <HAL_I2C_Init+0x1dc>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d111      	bne.n	80026e0 <HAL_I2C_Init+0x168>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	1e58      	subs	r0, r3, #1
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6859      	ldr	r1, [r3, #4]
 80026c4:	460b      	mov	r3, r1
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	440b      	add	r3, r1
 80026ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ce:	3301      	adds	r3, #1
 80026d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	bf0c      	ite	eq
 80026d8:	2301      	moveq	r3, #1
 80026da:	2300      	movne	r3, #0
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	e012      	b.n	8002706 <HAL_I2C_Init+0x18e>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	1e58      	subs	r0, r3, #1
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6859      	ldr	r1, [r3, #4]
 80026e8:	460b      	mov	r3, r1
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	0099      	lsls	r1, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026f6:	3301      	adds	r3, #1
 80026f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	bf0c      	ite	eq
 8002700:	2301      	moveq	r3, #1
 8002702:	2300      	movne	r3, #0
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <HAL_I2C_Init+0x196>
 800270a:	2301      	movs	r3, #1
 800270c:	e022      	b.n	8002754 <HAL_I2C_Init+0x1dc>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10e      	bne.n	8002734 <HAL_I2C_Init+0x1bc>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	1e58      	subs	r0, r3, #1
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6859      	ldr	r1, [r3, #4]
 800271e:	460b      	mov	r3, r1
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	440b      	add	r3, r1
 8002724:	fbb0 f3f3 	udiv	r3, r0, r3
 8002728:	3301      	adds	r3, #1
 800272a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800272e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002732:	e00f      	b.n	8002754 <HAL_I2C_Init+0x1dc>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	1e58      	subs	r0, r3, #1
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6859      	ldr	r1, [r3, #4]
 800273c:	460b      	mov	r3, r1
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	0099      	lsls	r1, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	fbb0 f3f3 	udiv	r3, r0, r3
 800274a:	3301      	adds	r3, #1
 800274c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002750:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002754:	6879      	ldr	r1, [r7, #4]
 8002756:	6809      	ldr	r1, [r1, #0]
 8002758:	4313      	orrs	r3, r2
 800275a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	69da      	ldr	r2, [r3, #28]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002782:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6911      	ldr	r1, [r2, #16]
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	68d2      	ldr	r2, [r2, #12]
 800278e:	4311      	orrs	r1, r2
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6812      	ldr	r2, [r2, #0]
 8002794:	430b      	orrs	r3, r1
 8002796:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	695a      	ldr	r2, [r3, #20]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0201 	orr.w	r2, r2, #1
 80027c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2220      	movs	r2, #32
 80027ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	000186a0 	.word	0x000186a0
 80027f0:	001e847f 	.word	0x001e847f
 80027f4:	003d08ff 	.word	0x003d08ff
 80027f8:	431bde83 	.word	0x431bde83
 80027fc:	10624dd3 	.word	0x10624dd3

08002800 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b088      	sub	sp, #32
 8002804:	af02      	add	r7, sp, #8
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	607a      	str	r2, [r7, #4]
 800280a:	461a      	mov	r2, r3
 800280c:	460b      	mov	r3, r1
 800280e:	817b      	strh	r3, [r7, #10]
 8002810:	4613      	mov	r3, r2
 8002812:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002814:	f7fe ffa0 	bl	8001758 <HAL_GetTick>
 8002818:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b20      	cmp	r3, #32
 8002824:	f040 80e0 	bne.w	80029e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	2319      	movs	r3, #25
 800282e:	2201      	movs	r2, #1
 8002830:	4970      	ldr	r1, [pc, #448]	@ (80029f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f000 f964 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800283e:	2302      	movs	r3, #2
 8002840:	e0d3      	b.n	80029ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002848:	2b01      	cmp	r3, #1
 800284a:	d101      	bne.n	8002850 <HAL_I2C_Master_Transmit+0x50>
 800284c:	2302      	movs	r3, #2
 800284e:	e0cc      	b.n	80029ea <HAL_I2C_Master_Transmit+0x1ea>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b01      	cmp	r3, #1
 8002864:	d007      	beq.n	8002876 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f042 0201 	orr.w	r2, r2, #1
 8002874:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002884:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2221      	movs	r2, #33	@ 0x21
 800288a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2210      	movs	r2, #16
 8002892:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	893a      	ldrh	r2, [r7, #8]
 80028a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	4a50      	ldr	r2, [pc, #320]	@ (80029f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80028b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80028b8:	8979      	ldrh	r1, [r7, #10]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	6a3a      	ldr	r2, [r7, #32]
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f000 f89c 	bl	80029fc <I2C_MasterRequestWrite>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e08d      	b.n	80029ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ce:	2300      	movs	r3, #0
 80028d0:	613b      	str	r3, [r7, #16]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	613b      	str	r3, [r7, #16]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	613b      	str	r3, [r7, #16]
 80028e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80028e4:	e066      	b.n	80029b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	6a39      	ldr	r1, [r7, #32]
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 fa22 	bl	8002d34 <I2C_WaitOnTXEFlagUntilTimeout>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00d      	beq.n	8002912 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	d107      	bne.n	800290e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800290c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e06b      	b.n	80029ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002916:	781a      	ldrb	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800292c:	b29b      	uxth	r3, r3
 800292e:	3b01      	subs	r3, #1
 8002930:	b29a      	uxth	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800293a:	3b01      	subs	r3, #1
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b04      	cmp	r3, #4
 800294e:	d11b      	bne.n	8002988 <HAL_I2C_Master_Transmit+0x188>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002954:	2b00      	cmp	r3, #0
 8002956:	d017      	beq.n	8002988 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295c:	781a      	ldrb	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002968:	1c5a      	adds	r2, r3, #1
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002972:	b29b      	uxth	r3, r3
 8002974:	3b01      	subs	r3, #1
 8002976:	b29a      	uxth	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002980:	3b01      	subs	r3, #1
 8002982:	b29a      	uxth	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	6a39      	ldr	r1, [r7, #32]
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f000 fa19 	bl	8002dc4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00d      	beq.n	80029b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299c:	2b04      	cmp	r3, #4
 800299e:	d107      	bne.n	80029b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e01a      	b.n	80029ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d194      	bne.n	80028e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2220      	movs	r2, #32
 80029d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80029e4:	2300      	movs	r3, #0
 80029e6:	e000      	b.n	80029ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80029e8:	2302      	movs	r3, #2
  }
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3718      	adds	r7, #24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	00100002 	.word	0x00100002
 80029f8:	ffff0000 	.word	0xffff0000

080029fc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b088      	sub	sp, #32
 8002a00:	af02      	add	r7, sp, #8
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	607a      	str	r2, [r7, #4]
 8002a06:	603b      	str	r3, [r7, #0]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a10:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d006      	beq.n	8002a26 <I2C_MasterRequestWrite+0x2a>
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d003      	beq.n	8002a26 <I2C_MasterRequestWrite+0x2a>
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a24:	d108      	bne.n	8002a38 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	e00b      	b.n	8002a50 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3c:	2b12      	cmp	r3, #18
 8002a3e:	d107      	bne.n	8002a50 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 f84f 	bl	8002b00 <I2C_WaitOnFlagUntilTimeout>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00d      	beq.n	8002a84 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a76:	d103      	bne.n	8002a80 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a7e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e035      	b.n	8002af0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a8c:	d108      	bne.n	8002aa0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a8e:	897b      	ldrh	r3, [r7, #10]
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	461a      	mov	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a9c:	611a      	str	r2, [r3, #16]
 8002a9e:	e01b      	b.n	8002ad8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002aa0:	897b      	ldrh	r3, [r7, #10]
 8002aa2:	11db      	asrs	r3, r3, #7
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	f003 0306 	and.w	r3, r3, #6
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	f063 030f 	orn	r3, r3, #15
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	490e      	ldr	r1, [pc, #56]	@ (8002af8 <I2C_MasterRequestWrite+0xfc>)
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f000 f898 	bl	8002bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e010      	b.n	8002af0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ace:	897b      	ldrh	r3, [r7, #10]
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	4907      	ldr	r1, [pc, #28]	@ (8002afc <I2C_MasterRequestWrite+0x100>)
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 f888 	bl	8002bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e000      	b.n	8002af0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	00010008 	.word	0x00010008
 8002afc:	00010002 	.word	0x00010002

08002b00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b10:	e048      	b.n	8002ba4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b18:	d044      	beq.n	8002ba4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b1a:	f7fe fe1d 	bl	8001758 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d302      	bcc.n	8002b30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d139      	bne.n	8002ba4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	0c1b      	lsrs	r3, r3, #16
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d10d      	bne.n	8002b56 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	43da      	mvns	r2, r3
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	4013      	ands	r3, r2
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	bf0c      	ite	eq
 8002b4c:	2301      	moveq	r3, #1
 8002b4e:	2300      	movne	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	461a      	mov	r2, r3
 8002b54:	e00c      	b.n	8002b70 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	43da      	mvns	r2, r3
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	4013      	ands	r3, r2
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	bf0c      	ite	eq
 8002b68:	2301      	moveq	r3, #1
 8002b6a:	2300      	movne	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	461a      	mov	r2, r3
 8002b70:	79fb      	ldrb	r3, [r7, #7]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d116      	bne.n	8002ba4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b90:	f043 0220 	orr.w	r2, r3, #32
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e023      	b.n	8002bec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	0c1b      	lsrs	r3, r3, #16
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d10d      	bne.n	8002bca <I2C_WaitOnFlagUntilTimeout+0xca>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	43da      	mvns	r2, r3
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	bf0c      	ite	eq
 8002bc0:	2301      	moveq	r3, #1
 8002bc2:	2300      	movne	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	e00c      	b.n	8002be4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	43da      	mvns	r2, r3
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	bf0c      	ite	eq
 8002bdc:	2301      	moveq	r3, #1
 8002bde:	2300      	movne	r3, #0
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	461a      	mov	r2, r3
 8002be4:	79fb      	ldrb	r3, [r7, #7]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d093      	beq.n	8002b12 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c02:	e071      	b.n	8002ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c12:	d123      	bne.n	8002c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c22:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c48:	f043 0204 	orr.w	r2, r3, #4
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e067      	b.n	8002d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c62:	d041      	beq.n	8002ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c64:	f7fe fd78 	bl	8001758 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d302      	bcc.n	8002c7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d136      	bne.n	8002ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	0c1b      	lsrs	r3, r3, #16
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d10c      	bne.n	8002c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	43da      	mvns	r2, r3
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	bf14      	ite	ne
 8002c96:	2301      	movne	r3, #1
 8002c98:	2300      	moveq	r3, #0
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	e00b      	b.n	8002cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	43da      	mvns	r2, r3
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	bf14      	ite	ne
 8002cb0:	2301      	movne	r3, #1
 8002cb2:	2300      	moveq	r3, #0
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d016      	beq.n	8002ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd4:	f043 0220 	orr.w	r2, r3, #32
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e021      	b.n	8002d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	0c1b      	lsrs	r3, r3, #16
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d10c      	bne.n	8002d0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	43da      	mvns	r2, r3
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	bf14      	ite	ne
 8002d04:	2301      	movne	r3, #1
 8002d06:	2300      	moveq	r3, #0
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	e00b      	b.n	8002d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	43da      	mvns	r2, r3
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	4013      	ands	r3, r2
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	bf14      	ite	ne
 8002d1e:	2301      	movne	r3, #1
 8002d20:	2300      	moveq	r3, #0
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f47f af6d 	bne.w	8002c04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d40:	e034      	b.n	8002dac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 f886 	bl	8002e54 <I2C_IsAcknowledgeFailed>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e034      	b.n	8002dbc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d58:	d028      	beq.n	8002dac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d5a:	f7fe fcfd 	bl	8001758 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d302      	bcc.n	8002d70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d11d      	bne.n	8002dac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d7a:	2b80      	cmp	r3, #128	@ 0x80
 8002d7c:	d016      	beq.n	8002dac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2220      	movs	r2, #32
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d98:	f043 0220 	orr.w	r2, r3, #32
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e007      	b.n	8002dbc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002db6:	2b80      	cmp	r3, #128	@ 0x80
 8002db8:	d1c3      	bne.n	8002d42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dd0:	e034      	b.n	8002e3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 f83e 	bl	8002e54 <I2C_IsAcknowledgeFailed>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e034      	b.n	8002e4c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de8:	d028      	beq.n	8002e3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dea:	f7fe fcb5 	bl	8001758 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d302      	bcc.n	8002e00 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d11d      	bne.n	8002e3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d016      	beq.n	8002e3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2220      	movs	r2, #32
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e28:	f043 0220 	orr.w	r2, r3, #32
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e007      	b.n	8002e4c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	f003 0304 	and.w	r3, r3, #4
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d1c3      	bne.n	8002dd2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e6a:	d11b      	bne.n	8002ea4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e74:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e90:	f043 0204 	orr.w	r2, r3, #4
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e000      	b.n	8002ea6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
	...

08002eb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e267      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d075      	beq.n	8002fbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002ed2:	4b88      	ldr	r3, [pc, #544]	@ (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 030c 	and.w	r3, r3, #12
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d00c      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ede:	4b85      	ldr	r3, [pc, #532]	@ (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002ee6:	2b08      	cmp	r3, #8
 8002ee8:	d112      	bne.n	8002f10 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eea:	4b82      	ldr	r3, [pc, #520]	@ (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ef2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ef6:	d10b      	bne.n	8002f10 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef8:	4b7e      	ldr	r3, [pc, #504]	@ (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d05b      	beq.n	8002fbc <HAL_RCC_OscConfig+0x108>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d157      	bne.n	8002fbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e242      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f18:	d106      	bne.n	8002f28 <HAL_RCC_OscConfig+0x74>
 8002f1a:	4b76      	ldr	r3, [pc, #472]	@ (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a75      	ldr	r2, [pc, #468]	@ (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f24:	6013      	str	r3, [r2, #0]
 8002f26:	e01d      	b.n	8002f64 <HAL_RCC_OscConfig+0xb0>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f30:	d10c      	bne.n	8002f4c <HAL_RCC_OscConfig+0x98>
 8002f32:	4b70      	ldr	r3, [pc, #448]	@ (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a6f      	ldr	r2, [pc, #444]	@ (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	4b6d      	ldr	r3, [pc, #436]	@ (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a6c      	ldr	r2, [pc, #432]	@ (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	e00b      	b.n	8002f64 <HAL_RCC_OscConfig+0xb0>
 8002f4c:	4b69      	ldr	r3, [pc, #420]	@ (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a68      	ldr	r2, [pc, #416]	@ (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f56:	6013      	str	r3, [r2, #0]
 8002f58:	4b66      	ldr	r3, [pc, #408]	@ (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a65      	ldr	r2, [pc, #404]	@ (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d013      	beq.n	8002f94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6c:	f7fe fbf4 	bl	8001758 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f74:	f7fe fbf0 	bl	8001758 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b64      	cmp	r3, #100	@ 0x64
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e207      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f86:	4b5b      	ldr	r3, [pc, #364]	@ (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d0f0      	beq.n	8002f74 <HAL_RCC_OscConfig+0xc0>
 8002f92:	e014      	b.n	8002fbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f94:	f7fe fbe0 	bl	8001758 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f9c:	f7fe fbdc 	bl	8001758 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b64      	cmp	r3, #100	@ 0x64
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e1f3      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fae:	4b51      	ldr	r3, [pc, #324]	@ (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1f0      	bne.n	8002f9c <HAL_RCC_OscConfig+0xe8>
 8002fba:	e000      	b.n	8002fbe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d063      	beq.n	8003092 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002fca:	4b4a      	ldr	r3, [pc, #296]	@ (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 030c 	and.w	r3, r3, #12
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00b      	beq.n	8002fee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fd6:	4b47      	ldr	r3, [pc, #284]	@ (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002fde:	2b08      	cmp	r3, #8
 8002fe0:	d11c      	bne.n	800301c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fe2:	4b44      	ldr	r3, [pc, #272]	@ (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d116      	bne.n	800301c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fee:	4b41      	ldr	r3, [pc, #260]	@ (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d005      	beq.n	8003006 <HAL_RCC_OscConfig+0x152>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d001      	beq.n	8003006 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e1c7      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003006:	4b3b      	ldr	r3, [pc, #236]	@ (80030f4 <HAL_RCC_OscConfig+0x240>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	4937      	ldr	r1, [pc, #220]	@ (80030f4 <HAL_RCC_OscConfig+0x240>)
 8003016:	4313      	orrs	r3, r2
 8003018:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800301a:	e03a      	b.n	8003092 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d020      	beq.n	8003066 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003024:	4b34      	ldr	r3, [pc, #208]	@ (80030f8 <HAL_RCC_OscConfig+0x244>)
 8003026:	2201      	movs	r2, #1
 8003028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302a:	f7fe fb95 	bl	8001758 <HAL_GetTick>
 800302e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003032:	f7fe fb91 	bl	8001758 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e1a8      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003044:	4b2b      	ldr	r3, [pc, #172]	@ (80030f4 <HAL_RCC_OscConfig+0x240>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0f0      	beq.n	8003032 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003050:	4b28      	ldr	r3, [pc, #160]	@ (80030f4 <HAL_RCC_OscConfig+0x240>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	4925      	ldr	r1, [pc, #148]	@ (80030f4 <HAL_RCC_OscConfig+0x240>)
 8003060:	4313      	orrs	r3, r2
 8003062:	600b      	str	r3, [r1, #0]
 8003064:	e015      	b.n	8003092 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003066:	4b24      	ldr	r3, [pc, #144]	@ (80030f8 <HAL_RCC_OscConfig+0x244>)
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306c:	f7fe fb74 	bl	8001758 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003074:	f7fe fb70 	bl	8001758 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e187      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003086:	4b1b      	ldr	r3, [pc, #108]	@ (80030f4 <HAL_RCC_OscConfig+0x240>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d036      	beq.n	800310c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d016      	beq.n	80030d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030a6:	4b15      	ldr	r3, [pc, #84]	@ (80030fc <HAL_RCC_OscConfig+0x248>)
 80030a8:	2201      	movs	r2, #1
 80030aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ac:	f7fe fb54 	bl	8001758 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030b4:	f7fe fb50 	bl	8001758 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e167      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030c6:	4b0b      	ldr	r3, [pc, #44]	@ (80030f4 <HAL_RCC_OscConfig+0x240>)
 80030c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0x200>
 80030d2:	e01b      	b.n	800310c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030d4:	4b09      	ldr	r3, [pc, #36]	@ (80030fc <HAL_RCC_OscConfig+0x248>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030da:	f7fe fb3d 	bl	8001758 <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e0:	e00e      	b.n	8003100 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030e2:	f7fe fb39 	bl	8001758 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d907      	bls.n	8003100 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e150      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
 80030f4:	40023800 	.word	0x40023800
 80030f8:	42470000 	.word	0x42470000
 80030fc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003100:	4b88      	ldr	r3, [pc, #544]	@ (8003324 <HAL_RCC_OscConfig+0x470>)
 8003102:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1ea      	bne.n	80030e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 8097 	beq.w	8003248 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800311a:	2300      	movs	r3, #0
 800311c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800311e:	4b81      	ldr	r3, [pc, #516]	@ (8003324 <HAL_RCC_OscConfig+0x470>)
 8003120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10f      	bne.n	800314a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800312a:	2300      	movs	r3, #0
 800312c:	60bb      	str	r3, [r7, #8]
 800312e:	4b7d      	ldr	r3, [pc, #500]	@ (8003324 <HAL_RCC_OscConfig+0x470>)
 8003130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003132:	4a7c      	ldr	r2, [pc, #496]	@ (8003324 <HAL_RCC_OscConfig+0x470>)
 8003134:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003138:	6413      	str	r3, [r2, #64]	@ 0x40
 800313a:	4b7a      	ldr	r3, [pc, #488]	@ (8003324 <HAL_RCC_OscConfig+0x470>)
 800313c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003142:	60bb      	str	r3, [r7, #8]
 8003144:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003146:	2301      	movs	r3, #1
 8003148:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314a:	4b77      	ldr	r3, [pc, #476]	@ (8003328 <HAL_RCC_OscConfig+0x474>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003152:	2b00      	cmp	r3, #0
 8003154:	d118      	bne.n	8003188 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003156:	4b74      	ldr	r3, [pc, #464]	@ (8003328 <HAL_RCC_OscConfig+0x474>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a73      	ldr	r2, [pc, #460]	@ (8003328 <HAL_RCC_OscConfig+0x474>)
 800315c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003160:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003162:	f7fe faf9 	bl	8001758 <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003168:	e008      	b.n	800317c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800316a:	f7fe faf5 	bl	8001758 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e10c      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800317c:	4b6a      	ldr	r3, [pc, #424]	@ (8003328 <HAL_RCC_OscConfig+0x474>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0f0      	beq.n	800316a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d106      	bne.n	800319e <HAL_RCC_OscConfig+0x2ea>
 8003190:	4b64      	ldr	r3, [pc, #400]	@ (8003324 <HAL_RCC_OscConfig+0x470>)
 8003192:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003194:	4a63      	ldr	r2, [pc, #396]	@ (8003324 <HAL_RCC_OscConfig+0x470>)
 8003196:	f043 0301 	orr.w	r3, r3, #1
 800319a:	6713      	str	r3, [r2, #112]	@ 0x70
 800319c:	e01c      	b.n	80031d8 <HAL_RCC_OscConfig+0x324>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	2b05      	cmp	r3, #5
 80031a4:	d10c      	bne.n	80031c0 <HAL_RCC_OscConfig+0x30c>
 80031a6:	4b5f      	ldr	r3, [pc, #380]	@ (8003324 <HAL_RCC_OscConfig+0x470>)
 80031a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031aa:	4a5e      	ldr	r2, [pc, #376]	@ (8003324 <HAL_RCC_OscConfig+0x470>)
 80031ac:	f043 0304 	orr.w	r3, r3, #4
 80031b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80031b2:	4b5c      	ldr	r3, [pc, #368]	@ (8003324 <HAL_RCC_OscConfig+0x470>)
 80031b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031b6:	4a5b      	ldr	r2, [pc, #364]	@ (8003324 <HAL_RCC_OscConfig+0x470>)
 80031b8:	f043 0301 	orr.w	r3, r3, #1
 80031bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80031be:	e00b      	b.n	80031d8 <HAL_RCC_OscConfig+0x324>
 80031c0:	4b58      	ldr	r3, [pc, #352]	@ (8003324 <HAL_RCC_OscConfig+0x470>)
 80031c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c4:	4a57      	ldr	r2, [pc, #348]	@ (8003324 <HAL_RCC_OscConfig+0x470>)
 80031c6:	f023 0301 	bic.w	r3, r3, #1
 80031ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80031cc:	4b55      	ldr	r3, [pc, #340]	@ (8003324 <HAL_RCC_OscConfig+0x470>)
 80031ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031d0:	4a54      	ldr	r2, [pc, #336]	@ (8003324 <HAL_RCC_OscConfig+0x470>)
 80031d2:	f023 0304 	bic.w	r3, r3, #4
 80031d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d015      	beq.n	800320c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e0:	f7fe faba 	bl	8001758 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e6:	e00a      	b.n	80031fe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031e8:	f7fe fab6 	bl	8001758 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e0cb      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031fe:	4b49      	ldr	r3, [pc, #292]	@ (8003324 <HAL_RCC_OscConfig+0x470>)
 8003200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0ee      	beq.n	80031e8 <HAL_RCC_OscConfig+0x334>
 800320a:	e014      	b.n	8003236 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800320c:	f7fe faa4 	bl	8001758 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003212:	e00a      	b.n	800322a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003214:	f7fe faa0 	bl	8001758 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003222:	4293      	cmp	r3, r2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e0b5      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800322a:	4b3e      	ldr	r3, [pc, #248]	@ (8003324 <HAL_RCC_OscConfig+0x470>)
 800322c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1ee      	bne.n	8003214 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003236:	7dfb      	ldrb	r3, [r7, #23]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d105      	bne.n	8003248 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800323c:	4b39      	ldr	r3, [pc, #228]	@ (8003324 <HAL_RCC_OscConfig+0x470>)
 800323e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003240:	4a38      	ldr	r2, [pc, #224]	@ (8003324 <HAL_RCC_OscConfig+0x470>)
 8003242:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003246:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 80a1 	beq.w	8003394 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003252:	4b34      	ldr	r3, [pc, #208]	@ (8003324 <HAL_RCC_OscConfig+0x470>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 030c 	and.w	r3, r3, #12
 800325a:	2b08      	cmp	r3, #8
 800325c:	d05c      	beq.n	8003318 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	2b02      	cmp	r3, #2
 8003264:	d141      	bne.n	80032ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003266:	4b31      	ldr	r3, [pc, #196]	@ (800332c <HAL_RCC_OscConfig+0x478>)
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326c:	f7fe fa74 	bl	8001758 <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003274:	f7fe fa70 	bl	8001758 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e087      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003286:	4b27      	ldr	r3, [pc, #156]	@ (8003324 <HAL_RCC_OscConfig+0x470>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f0      	bne.n	8003274 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69da      	ldr	r2, [r3, #28]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a0:	019b      	lsls	r3, r3, #6
 80032a2:	431a      	orrs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a8:	085b      	lsrs	r3, r3, #1
 80032aa:	3b01      	subs	r3, #1
 80032ac:	041b      	lsls	r3, r3, #16
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b4:	061b      	lsls	r3, r3, #24
 80032b6:	491b      	ldr	r1, [pc, #108]	@ (8003324 <HAL_RCC_OscConfig+0x470>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032bc:	4b1b      	ldr	r3, [pc, #108]	@ (800332c <HAL_RCC_OscConfig+0x478>)
 80032be:	2201      	movs	r2, #1
 80032c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c2:	f7fe fa49 	bl	8001758 <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ca:	f7fe fa45 	bl	8001758 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e05c      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032dc:	4b11      	ldr	r3, [pc, #68]	@ (8003324 <HAL_RCC_OscConfig+0x470>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0f0      	beq.n	80032ca <HAL_RCC_OscConfig+0x416>
 80032e8:	e054      	b.n	8003394 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ea:	4b10      	ldr	r3, [pc, #64]	@ (800332c <HAL_RCC_OscConfig+0x478>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f0:	f7fe fa32 	bl	8001758 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f8:	f7fe fa2e 	bl	8001758 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e045      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800330a:	4b06      	ldr	r3, [pc, #24]	@ (8003324 <HAL_RCC_OscConfig+0x470>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f0      	bne.n	80032f8 <HAL_RCC_OscConfig+0x444>
 8003316:	e03d      	b.n	8003394 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d107      	bne.n	8003330 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e038      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
 8003324:	40023800 	.word	0x40023800
 8003328:	40007000 	.word	0x40007000
 800332c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003330:	4b1b      	ldr	r3, [pc, #108]	@ (80033a0 <HAL_RCC_OscConfig+0x4ec>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d028      	beq.n	8003390 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003348:	429a      	cmp	r2, r3
 800334a:	d121      	bne.n	8003390 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003356:	429a      	cmp	r2, r3
 8003358:	d11a      	bne.n	8003390 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003360:	4013      	ands	r3, r2
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003366:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003368:	4293      	cmp	r3, r2
 800336a:	d111      	bne.n	8003390 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003376:	085b      	lsrs	r3, r3, #1
 8003378:	3b01      	subs	r3, #1
 800337a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800337c:	429a      	cmp	r2, r3
 800337e:	d107      	bne.n	8003390 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800338a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800338c:	429a      	cmp	r2, r3
 800338e:	d001      	beq.n	8003394 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e000      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	40023800 	.word	0x40023800

080033a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e0cc      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033b8:	4b68      	ldr	r3, [pc, #416]	@ (800355c <HAL_RCC_ClockConfig+0x1b8>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d90c      	bls.n	80033e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c6:	4b65      	ldr	r3, [pc, #404]	@ (800355c <HAL_RCC_ClockConfig+0x1b8>)
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ce:	4b63      	ldr	r3, [pc, #396]	@ (800355c <HAL_RCC_ClockConfig+0x1b8>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0307 	and.w	r3, r3, #7
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d001      	beq.n	80033e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e0b8      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d020      	beq.n	800342e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d005      	beq.n	8003404 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033f8:	4b59      	ldr	r3, [pc, #356]	@ (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	4a58      	ldr	r2, [pc, #352]	@ (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 80033fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003402:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0308 	and.w	r3, r3, #8
 800340c:	2b00      	cmp	r3, #0
 800340e:	d005      	beq.n	800341c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003410:	4b53      	ldr	r3, [pc, #332]	@ (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	4a52      	ldr	r2, [pc, #328]	@ (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800341a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800341c:	4b50      	ldr	r3, [pc, #320]	@ (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	494d      	ldr	r1, [pc, #308]	@ (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 800342a:	4313      	orrs	r3, r2
 800342c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d044      	beq.n	80034c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d107      	bne.n	8003452 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003442:	4b47      	ldr	r3, [pc, #284]	@ (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d119      	bne.n	8003482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e07f      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b02      	cmp	r3, #2
 8003458:	d003      	beq.n	8003462 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800345e:	2b03      	cmp	r3, #3
 8003460:	d107      	bne.n	8003472 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003462:	4b3f      	ldr	r3, [pc, #252]	@ (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d109      	bne.n	8003482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e06f      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003472:	4b3b      	ldr	r3, [pc, #236]	@ (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e067      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003482:	4b37      	ldr	r3, [pc, #220]	@ (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f023 0203 	bic.w	r2, r3, #3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	4934      	ldr	r1, [pc, #208]	@ (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003490:	4313      	orrs	r3, r2
 8003492:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003494:	f7fe f960 	bl	8001758 <HAL_GetTick>
 8003498:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800349a:	e00a      	b.n	80034b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800349c:	f7fe f95c 	bl	8001758 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e04f      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034b2:	4b2b      	ldr	r3, [pc, #172]	@ (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 020c 	and.w	r2, r3, #12
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d1eb      	bne.n	800349c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034c4:	4b25      	ldr	r3, [pc, #148]	@ (800355c <HAL_RCC_ClockConfig+0x1b8>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d20c      	bcs.n	80034ec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d2:	4b22      	ldr	r3, [pc, #136]	@ (800355c <HAL_RCC_ClockConfig+0x1b8>)
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	b2d2      	uxtb	r2, r2
 80034d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034da:	4b20      	ldr	r3, [pc, #128]	@ (800355c <HAL_RCC_ClockConfig+0x1b8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d001      	beq.n	80034ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e032      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d008      	beq.n	800350a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034f8:	4b19      	ldr	r3, [pc, #100]	@ (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	4916      	ldr	r1, [pc, #88]	@ (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003506:	4313      	orrs	r3, r2
 8003508:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b00      	cmp	r3, #0
 8003514:	d009      	beq.n	800352a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003516:	4b12      	ldr	r3, [pc, #72]	@ (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	490e      	ldr	r1, [pc, #56]	@ (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003526:	4313      	orrs	r3, r2
 8003528:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800352a:	f000 f821 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 800352e:	4602      	mov	r2, r0
 8003530:	4b0b      	ldr	r3, [pc, #44]	@ (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	091b      	lsrs	r3, r3, #4
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	490a      	ldr	r1, [pc, #40]	@ (8003564 <HAL_RCC_ClockConfig+0x1c0>)
 800353c:	5ccb      	ldrb	r3, [r1, r3]
 800353e:	fa22 f303 	lsr.w	r3, r2, r3
 8003542:	4a09      	ldr	r2, [pc, #36]	@ (8003568 <HAL_RCC_ClockConfig+0x1c4>)
 8003544:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003546:	4b09      	ldr	r3, [pc, #36]	@ (800356c <HAL_RCC_ClockConfig+0x1c8>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f7fe f8c0 	bl	80016d0 <HAL_InitTick>

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40023c00 	.word	0x40023c00
 8003560:	40023800 	.word	0x40023800
 8003564:	08004194 	.word	0x08004194
 8003568:	20000014 	.word	0x20000014
 800356c:	20000018 	.word	0x20000018

08003570 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003570:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003574:	b094      	sub	sp, #80	@ 0x50
 8003576:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800357c:	2300      	movs	r3, #0
 800357e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003580:	2300      	movs	r3, #0
 8003582:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003584:	2300      	movs	r3, #0
 8003586:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003588:	4b79      	ldr	r3, [pc, #484]	@ (8003770 <HAL_RCC_GetSysClockFreq+0x200>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f003 030c 	and.w	r3, r3, #12
 8003590:	2b08      	cmp	r3, #8
 8003592:	d00d      	beq.n	80035b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003594:	2b08      	cmp	r3, #8
 8003596:	f200 80e1 	bhi.w	800375c <HAL_RCC_GetSysClockFreq+0x1ec>
 800359a:	2b00      	cmp	r3, #0
 800359c:	d002      	beq.n	80035a4 <HAL_RCC_GetSysClockFreq+0x34>
 800359e:	2b04      	cmp	r3, #4
 80035a0:	d003      	beq.n	80035aa <HAL_RCC_GetSysClockFreq+0x3a>
 80035a2:	e0db      	b.n	800375c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035a4:	4b73      	ldr	r3, [pc, #460]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x204>)
 80035a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035a8:	e0db      	b.n	8003762 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035aa:	4b73      	ldr	r3, [pc, #460]	@ (8003778 <HAL_RCC_GetSysClockFreq+0x208>)
 80035ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035ae:	e0d8      	b.n	8003762 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035b0:	4b6f      	ldr	r3, [pc, #444]	@ (8003770 <HAL_RCC_GetSysClockFreq+0x200>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035b8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035ba:	4b6d      	ldr	r3, [pc, #436]	@ (8003770 <HAL_RCC_GetSysClockFreq+0x200>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d063      	beq.n	800368e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035c6:	4b6a      	ldr	r3, [pc, #424]	@ (8003770 <HAL_RCC_GetSysClockFreq+0x200>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	099b      	lsrs	r3, r3, #6
 80035cc:	2200      	movs	r2, #0
 80035ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80035d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80035d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80035da:	2300      	movs	r3, #0
 80035dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80035de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80035e2:	4622      	mov	r2, r4
 80035e4:	462b      	mov	r3, r5
 80035e6:	f04f 0000 	mov.w	r0, #0
 80035ea:	f04f 0100 	mov.w	r1, #0
 80035ee:	0159      	lsls	r1, r3, #5
 80035f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035f4:	0150      	lsls	r0, r2, #5
 80035f6:	4602      	mov	r2, r0
 80035f8:	460b      	mov	r3, r1
 80035fa:	4621      	mov	r1, r4
 80035fc:	1a51      	subs	r1, r2, r1
 80035fe:	6139      	str	r1, [r7, #16]
 8003600:	4629      	mov	r1, r5
 8003602:	eb63 0301 	sbc.w	r3, r3, r1
 8003606:	617b      	str	r3, [r7, #20]
 8003608:	f04f 0200 	mov.w	r2, #0
 800360c:	f04f 0300 	mov.w	r3, #0
 8003610:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003614:	4659      	mov	r1, fp
 8003616:	018b      	lsls	r3, r1, #6
 8003618:	4651      	mov	r1, sl
 800361a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800361e:	4651      	mov	r1, sl
 8003620:	018a      	lsls	r2, r1, #6
 8003622:	4651      	mov	r1, sl
 8003624:	ebb2 0801 	subs.w	r8, r2, r1
 8003628:	4659      	mov	r1, fp
 800362a:	eb63 0901 	sbc.w	r9, r3, r1
 800362e:	f04f 0200 	mov.w	r2, #0
 8003632:	f04f 0300 	mov.w	r3, #0
 8003636:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800363a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800363e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003642:	4690      	mov	r8, r2
 8003644:	4699      	mov	r9, r3
 8003646:	4623      	mov	r3, r4
 8003648:	eb18 0303 	adds.w	r3, r8, r3
 800364c:	60bb      	str	r3, [r7, #8]
 800364e:	462b      	mov	r3, r5
 8003650:	eb49 0303 	adc.w	r3, r9, r3
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	f04f 0200 	mov.w	r2, #0
 800365a:	f04f 0300 	mov.w	r3, #0
 800365e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003662:	4629      	mov	r1, r5
 8003664:	024b      	lsls	r3, r1, #9
 8003666:	4621      	mov	r1, r4
 8003668:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800366c:	4621      	mov	r1, r4
 800366e:	024a      	lsls	r2, r1, #9
 8003670:	4610      	mov	r0, r2
 8003672:	4619      	mov	r1, r3
 8003674:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003676:	2200      	movs	r2, #0
 8003678:	62bb      	str	r3, [r7, #40]	@ 0x28
 800367a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800367c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003680:	f7fd f8fc 	bl	800087c <__aeabi_uldivmod>
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	4613      	mov	r3, r2
 800368a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800368c:	e058      	b.n	8003740 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800368e:	4b38      	ldr	r3, [pc, #224]	@ (8003770 <HAL_RCC_GetSysClockFreq+0x200>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	099b      	lsrs	r3, r3, #6
 8003694:	2200      	movs	r2, #0
 8003696:	4618      	mov	r0, r3
 8003698:	4611      	mov	r1, r2
 800369a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800369e:	623b      	str	r3, [r7, #32]
 80036a0:	2300      	movs	r3, #0
 80036a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80036a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036a8:	4642      	mov	r2, r8
 80036aa:	464b      	mov	r3, r9
 80036ac:	f04f 0000 	mov.w	r0, #0
 80036b0:	f04f 0100 	mov.w	r1, #0
 80036b4:	0159      	lsls	r1, r3, #5
 80036b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036ba:	0150      	lsls	r0, r2, #5
 80036bc:	4602      	mov	r2, r0
 80036be:	460b      	mov	r3, r1
 80036c0:	4641      	mov	r1, r8
 80036c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80036c6:	4649      	mov	r1, r9
 80036c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	f04f 0300 	mov.w	r3, #0
 80036d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036e0:	ebb2 040a 	subs.w	r4, r2, sl
 80036e4:	eb63 050b 	sbc.w	r5, r3, fp
 80036e8:	f04f 0200 	mov.w	r2, #0
 80036ec:	f04f 0300 	mov.w	r3, #0
 80036f0:	00eb      	lsls	r3, r5, #3
 80036f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036f6:	00e2      	lsls	r2, r4, #3
 80036f8:	4614      	mov	r4, r2
 80036fa:	461d      	mov	r5, r3
 80036fc:	4643      	mov	r3, r8
 80036fe:	18e3      	adds	r3, r4, r3
 8003700:	603b      	str	r3, [r7, #0]
 8003702:	464b      	mov	r3, r9
 8003704:	eb45 0303 	adc.w	r3, r5, r3
 8003708:	607b      	str	r3, [r7, #4]
 800370a:	f04f 0200 	mov.w	r2, #0
 800370e:	f04f 0300 	mov.w	r3, #0
 8003712:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003716:	4629      	mov	r1, r5
 8003718:	028b      	lsls	r3, r1, #10
 800371a:	4621      	mov	r1, r4
 800371c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003720:	4621      	mov	r1, r4
 8003722:	028a      	lsls	r2, r1, #10
 8003724:	4610      	mov	r0, r2
 8003726:	4619      	mov	r1, r3
 8003728:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800372a:	2200      	movs	r2, #0
 800372c:	61bb      	str	r3, [r7, #24]
 800372e:	61fa      	str	r2, [r7, #28]
 8003730:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003734:	f7fd f8a2 	bl	800087c <__aeabi_uldivmod>
 8003738:	4602      	mov	r2, r0
 800373a:	460b      	mov	r3, r1
 800373c:	4613      	mov	r3, r2
 800373e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003740:	4b0b      	ldr	r3, [pc, #44]	@ (8003770 <HAL_RCC_GetSysClockFreq+0x200>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	0c1b      	lsrs	r3, r3, #16
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	3301      	adds	r3, #1
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003750:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003752:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003754:	fbb2 f3f3 	udiv	r3, r2, r3
 8003758:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800375a:	e002      	b.n	8003762 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800375c:	4b05      	ldr	r3, [pc, #20]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x204>)
 800375e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003760:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003762:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003764:	4618      	mov	r0, r3
 8003766:	3750      	adds	r7, #80	@ 0x50
 8003768:	46bd      	mov	sp, r7
 800376a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800376e:	bf00      	nop
 8003770:	40023800 	.word	0x40023800
 8003774:	00f42400 	.word	0x00f42400
 8003778:	007a1200 	.word	0x007a1200

0800377c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003780:	4b03      	ldr	r3, [pc, #12]	@ (8003790 <HAL_RCC_GetHCLKFreq+0x14>)
 8003782:	681b      	ldr	r3, [r3, #0]
}
 8003784:	4618      	mov	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	20000014 	.word	0x20000014

08003794 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003798:	f7ff fff0 	bl	800377c <HAL_RCC_GetHCLKFreq>
 800379c:	4602      	mov	r2, r0
 800379e:	4b05      	ldr	r3, [pc, #20]	@ (80037b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	0a9b      	lsrs	r3, r3, #10
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	4903      	ldr	r1, [pc, #12]	@ (80037b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037aa:	5ccb      	ldrb	r3, [r1, r3]
 80037ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40023800 	.word	0x40023800
 80037b8:	080041a4 	.word	0x080041a4

080037bc <sniprintf>:
 80037bc:	b40c      	push	{r2, r3}
 80037be:	b530      	push	{r4, r5, lr}
 80037c0:	4b17      	ldr	r3, [pc, #92]	@ (8003820 <sniprintf+0x64>)
 80037c2:	1e0c      	subs	r4, r1, #0
 80037c4:	681d      	ldr	r5, [r3, #0]
 80037c6:	b09d      	sub	sp, #116	@ 0x74
 80037c8:	da08      	bge.n	80037dc <sniprintf+0x20>
 80037ca:	238b      	movs	r3, #139	@ 0x8b
 80037cc:	602b      	str	r3, [r5, #0]
 80037ce:	f04f 30ff 	mov.w	r0, #4294967295
 80037d2:	b01d      	add	sp, #116	@ 0x74
 80037d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80037d8:	b002      	add	sp, #8
 80037da:	4770      	bx	lr
 80037dc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80037e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80037e4:	bf14      	ite	ne
 80037e6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80037ea:	4623      	moveq	r3, r4
 80037ec:	9304      	str	r3, [sp, #16]
 80037ee:	9307      	str	r3, [sp, #28]
 80037f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037f4:	9002      	str	r0, [sp, #8]
 80037f6:	9006      	str	r0, [sp, #24]
 80037f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80037fc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80037fe:	ab21      	add	r3, sp, #132	@ 0x84
 8003800:	a902      	add	r1, sp, #8
 8003802:	4628      	mov	r0, r5
 8003804:	9301      	str	r3, [sp, #4]
 8003806:	f000 f995 	bl	8003b34 <_svfiprintf_r>
 800380a:	1c43      	adds	r3, r0, #1
 800380c:	bfbc      	itt	lt
 800380e:	238b      	movlt	r3, #139	@ 0x8b
 8003810:	602b      	strlt	r3, [r5, #0]
 8003812:	2c00      	cmp	r4, #0
 8003814:	d0dd      	beq.n	80037d2 <sniprintf+0x16>
 8003816:	9b02      	ldr	r3, [sp, #8]
 8003818:	2200      	movs	r2, #0
 800381a:	701a      	strb	r2, [r3, #0]
 800381c:	e7d9      	b.n	80037d2 <sniprintf+0x16>
 800381e:	bf00      	nop
 8003820:	20000020 	.word	0x20000020

08003824 <memset>:
 8003824:	4402      	add	r2, r0
 8003826:	4603      	mov	r3, r0
 8003828:	4293      	cmp	r3, r2
 800382a:	d100      	bne.n	800382e <memset+0xa>
 800382c:	4770      	bx	lr
 800382e:	f803 1b01 	strb.w	r1, [r3], #1
 8003832:	e7f9      	b.n	8003828 <memset+0x4>

08003834 <__errno>:
 8003834:	4b01      	ldr	r3, [pc, #4]	@ (800383c <__errno+0x8>)
 8003836:	6818      	ldr	r0, [r3, #0]
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	20000020 	.word	0x20000020

08003840 <__libc_init_array>:
 8003840:	b570      	push	{r4, r5, r6, lr}
 8003842:	4d0d      	ldr	r5, [pc, #52]	@ (8003878 <__libc_init_array+0x38>)
 8003844:	4c0d      	ldr	r4, [pc, #52]	@ (800387c <__libc_init_array+0x3c>)
 8003846:	1b64      	subs	r4, r4, r5
 8003848:	10a4      	asrs	r4, r4, #2
 800384a:	2600      	movs	r6, #0
 800384c:	42a6      	cmp	r6, r4
 800384e:	d109      	bne.n	8003864 <__libc_init_array+0x24>
 8003850:	4d0b      	ldr	r5, [pc, #44]	@ (8003880 <__libc_init_array+0x40>)
 8003852:	4c0c      	ldr	r4, [pc, #48]	@ (8003884 <__libc_init_array+0x44>)
 8003854:	f000 fc66 	bl	8004124 <_init>
 8003858:	1b64      	subs	r4, r4, r5
 800385a:	10a4      	asrs	r4, r4, #2
 800385c:	2600      	movs	r6, #0
 800385e:	42a6      	cmp	r6, r4
 8003860:	d105      	bne.n	800386e <__libc_init_array+0x2e>
 8003862:	bd70      	pop	{r4, r5, r6, pc}
 8003864:	f855 3b04 	ldr.w	r3, [r5], #4
 8003868:	4798      	blx	r3
 800386a:	3601      	adds	r6, #1
 800386c:	e7ee      	b.n	800384c <__libc_init_array+0xc>
 800386e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003872:	4798      	blx	r3
 8003874:	3601      	adds	r6, #1
 8003876:	e7f2      	b.n	800385e <__libc_init_array+0x1e>
 8003878:	080041e8 	.word	0x080041e8
 800387c:	080041e8 	.word	0x080041e8
 8003880:	080041e8 	.word	0x080041e8
 8003884:	080041ec 	.word	0x080041ec

08003888 <__retarget_lock_acquire_recursive>:
 8003888:	4770      	bx	lr

0800388a <__retarget_lock_release_recursive>:
 800388a:	4770      	bx	lr

0800388c <_free_r>:
 800388c:	b538      	push	{r3, r4, r5, lr}
 800388e:	4605      	mov	r5, r0
 8003890:	2900      	cmp	r1, #0
 8003892:	d041      	beq.n	8003918 <_free_r+0x8c>
 8003894:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003898:	1f0c      	subs	r4, r1, #4
 800389a:	2b00      	cmp	r3, #0
 800389c:	bfb8      	it	lt
 800389e:	18e4      	addlt	r4, r4, r3
 80038a0:	f000 f8e0 	bl	8003a64 <__malloc_lock>
 80038a4:	4a1d      	ldr	r2, [pc, #116]	@ (800391c <_free_r+0x90>)
 80038a6:	6813      	ldr	r3, [r2, #0]
 80038a8:	b933      	cbnz	r3, 80038b8 <_free_r+0x2c>
 80038aa:	6063      	str	r3, [r4, #4]
 80038ac:	6014      	str	r4, [r2, #0]
 80038ae:	4628      	mov	r0, r5
 80038b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038b4:	f000 b8dc 	b.w	8003a70 <__malloc_unlock>
 80038b8:	42a3      	cmp	r3, r4
 80038ba:	d908      	bls.n	80038ce <_free_r+0x42>
 80038bc:	6820      	ldr	r0, [r4, #0]
 80038be:	1821      	adds	r1, r4, r0
 80038c0:	428b      	cmp	r3, r1
 80038c2:	bf01      	itttt	eq
 80038c4:	6819      	ldreq	r1, [r3, #0]
 80038c6:	685b      	ldreq	r3, [r3, #4]
 80038c8:	1809      	addeq	r1, r1, r0
 80038ca:	6021      	streq	r1, [r4, #0]
 80038cc:	e7ed      	b.n	80038aa <_free_r+0x1e>
 80038ce:	461a      	mov	r2, r3
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	b10b      	cbz	r3, 80038d8 <_free_r+0x4c>
 80038d4:	42a3      	cmp	r3, r4
 80038d6:	d9fa      	bls.n	80038ce <_free_r+0x42>
 80038d8:	6811      	ldr	r1, [r2, #0]
 80038da:	1850      	adds	r0, r2, r1
 80038dc:	42a0      	cmp	r0, r4
 80038de:	d10b      	bne.n	80038f8 <_free_r+0x6c>
 80038e0:	6820      	ldr	r0, [r4, #0]
 80038e2:	4401      	add	r1, r0
 80038e4:	1850      	adds	r0, r2, r1
 80038e6:	4283      	cmp	r3, r0
 80038e8:	6011      	str	r1, [r2, #0]
 80038ea:	d1e0      	bne.n	80038ae <_free_r+0x22>
 80038ec:	6818      	ldr	r0, [r3, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	6053      	str	r3, [r2, #4]
 80038f2:	4408      	add	r0, r1
 80038f4:	6010      	str	r0, [r2, #0]
 80038f6:	e7da      	b.n	80038ae <_free_r+0x22>
 80038f8:	d902      	bls.n	8003900 <_free_r+0x74>
 80038fa:	230c      	movs	r3, #12
 80038fc:	602b      	str	r3, [r5, #0]
 80038fe:	e7d6      	b.n	80038ae <_free_r+0x22>
 8003900:	6820      	ldr	r0, [r4, #0]
 8003902:	1821      	adds	r1, r4, r0
 8003904:	428b      	cmp	r3, r1
 8003906:	bf04      	itt	eq
 8003908:	6819      	ldreq	r1, [r3, #0]
 800390a:	685b      	ldreq	r3, [r3, #4]
 800390c:	6063      	str	r3, [r4, #4]
 800390e:	bf04      	itt	eq
 8003910:	1809      	addeq	r1, r1, r0
 8003912:	6021      	streq	r1, [r4, #0]
 8003914:	6054      	str	r4, [r2, #4]
 8003916:	e7ca      	b.n	80038ae <_free_r+0x22>
 8003918:	bd38      	pop	{r3, r4, r5, pc}
 800391a:	bf00      	nop
 800391c:	20000284 	.word	0x20000284

08003920 <sbrk_aligned>:
 8003920:	b570      	push	{r4, r5, r6, lr}
 8003922:	4e0f      	ldr	r6, [pc, #60]	@ (8003960 <sbrk_aligned+0x40>)
 8003924:	460c      	mov	r4, r1
 8003926:	6831      	ldr	r1, [r6, #0]
 8003928:	4605      	mov	r5, r0
 800392a:	b911      	cbnz	r1, 8003932 <sbrk_aligned+0x12>
 800392c:	f000 fba6 	bl	800407c <_sbrk_r>
 8003930:	6030      	str	r0, [r6, #0]
 8003932:	4621      	mov	r1, r4
 8003934:	4628      	mov	r0, r5
 8003936:	f000 fba1 	bl	800407c <_sbrk_r>
 800393a:	1c43      	adds	r3, r0, #1
 800393c:	d103      	bne.n	8003946 <sbrk_aligned+0x26>
 800393e:	f04f 34ff 	mov.w	r4, #4294967295
 8003942:	4620      	mov	r0, r4
 8003944:	bd70      	pop	{r4, r5, r6, pc}
 8003946:	1cc4      	adds	r4, r0, #3
 8003948:	f024 0403 	bic.w	r4, r4, #3
 800394c:	42a0      	cmp	r0, r4
 800394e:	d0f8      	beq.n	8003942 <sbrk_aligned+0x22>
 8003950:	1a21      	subs	r1, r4, r0
 8003952:	4628      	mov	r0, r5
 8003954:	f000 fb92 	bl	800407c <_sbrk_r>
 8003958:	3001      	adds	r0, #1
 800395a:	d1f2      	bne.n	8003942 <sbrk_aligned+0x22>
 800395c:	e7ef      	b.n	800393e <sbrk_aligned+0x1e>
 800395e:	bf00      	nop
 8003960:	20000280 	.word	0x20000280

08003964 <_malloc_r>:
 8003964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003968:	1ccd      	adds	r5, r1, #3
 800396a:	f025 0503 	bic.w	r5, r5, #3
 800396e:	3508      	adds	r5, #8
 8003970:	2d0c      	cmp	r5, #12
 8003972:	bf38      	it	cc
 8003974:	250c      	movcc	r5, #12
 8003976:	2d00      	cmp	r5, #0
 8003978:	4606      	mov	r6, r0
 800397a:	db01      	blt.n	8003980 <_malloc_r+0x1c>
 800397c:	42a9      	cmp	r1, r5
 800397e:	d904      	bls.n	800398a <_malloc_r+0x26>
 8003980:	230c      	movs	r3, #12
 8003982:	6033      	str	r3, [r6, #0]
 8003984:	2000      	movs	r0, #0
 8003986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800398a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003a60 <_malloc_r+0xfc>
 800398e:	f000 f869 	bl	8003a64 <__malloc_lock>
 8003992:	f8d8 3000 	ldr.w	r3, [r8]
 8003996:	461c      	mov	r4, r3
 8003998:	bb44      	cbnz	r4, 80039ec <_malloc_r+0x88>
 800399a:	4629      	mov	r1, r5
 800399c:	4630      	mov	r0, r6
 800399e:	f7ff ffbf 	bl	8003920 <sbrk_aligned>
 80039a2:	1c43      	adds	r3, r0, #1
 80039a4:	4604      	mov	r4, r0
 80039a6:	d158      	bne.n	8003a5a <_malloc_r+0xf6>
 80039a8:	f8d8 4000 	ldr.w	r4, [r8]
 80039ac:	4627      	mov	r7, r4
 80039ae:	2f00      	cmp	r7, #0
 80039b0:	d143      	bne.n	8003a3a <_malloc_r+0xd6>
 80039b2:	2c00      	cmp	r4, #0
 80039b4:	d04b      	beq.n	8003a4e <_malloc_r+0xea>
 80039b6:	6823      	ldr	r3, [r4, #0]
 80039b8:	4639      	mov	r1, r7
 80039ba:	4630      	mov	r0, r6
 80039bc:	eb04 0903 	add.w	r9, r4, r3
 80039c0:	f000 fb5c 	bl	800407c <_sbrk_r>
 80039c4:	4581      	cmp	r9, r0
 80039c6:	d142      	bne.n	8003a4e <_malloc_r+0xea>
 80039c8:	6821      	ldr	r1, [r4, #0]
 80039ca:	1a6d      	subs	r5, r5, r1
 80039cc:	4629      	mov	r1, r5
 80039ce:	4630      	mov	r0, r6
 80039d0:	f7ff ffa6 	bl	8003920 <sbrk_aligned>
 80039d4:	3001      	adds	r0, #1
 80039d6:	d03a      	beq.n	8003a4e <_malloc_r+0xea>
 80039d8:	6823      	ldr	r3, [r4, #0]
 80039da:	442b      	add	r3, r5
 80039dc:	6023      	str	r3, [r4, #0]
 80039de:	f8d8 3000 	ldr.w	r3, [r8]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	bb62      	cbnz	r2, 8003a40 <_malloc_r+0xdc>
 80039e6:	f8c8 7000 	str.w	r7, [r8]
 80039ea:	e00f      	b.n	8003a0c <_malloc_r+0xa8>
 80039ec:	6822      	ldr	r2, [r4, #0]
 80039ee:	1b52      	subs	r2, r2, r5
 80039f0:	d420      	bmi.n	8003a34 <_malloc_r+0xd0>
 80039f2:	2a0b      	cmp	r2, #11
 80039f4:	d917      	bls.n	8003a26 <_malloc_r+0xc2>
 80039f6:	1961      	adds	r1, r4, r5
 80039f8:	42a3      	cmp	r3, r4
 80039fa:	6025      	str	r5, [r4, #0]
 80039fc:	bf18      	it	ne
 80039fe:	6059      	strne	r1, [r3, #4]
 8003a00:	6863      	ldr	r3, [r4, #4]
 8003a02:	bf08      	it	eq
 8003a04:	f8c8 1000 	streq.w	r1, [r8]
 8003a08:	5162      	str	r2, [r4, r5]
 8003a0a:	604b      	str	r3, [r1, #4]
 8003a0c:	4630      	mov	r0, r6
 8003a0e:	f000 f82f 	bl	8003a70 <__malloc_unlock>
 8003a12:	f104 000b 	add.w	r0, r4, #11
 8003a16:	1d23      	adds	r3, r4, #4
 8003a18:	f020 0007 	bic.w	r0, r0, #7
 8003a1c:	1ac2      	subs	r2, r0, r3
 8003a1e:	bf1c      	itt	ne
 8003a20:	1a1b      	subne	r3, r3, r0
 8003a22:	50a3      	strne	r3, [r4, r2]
 8003a24:	e7af      	b.n	8003986 <_malloc_r+0x22>
 8003a26:	6862      	ldr	r2, [r4, #4]
 8003a28:	42a3      	cmp	r3, r4
 8003a2a:	bf0c      	ite	eq
 8003a2c:	f8c8 2000 	streq.w	r2, [r8]
 8003a30:	605a      	strne	r2, [r3, #4]
 8003a32:	e7eb      	b.n	8003a0c <_malloc_r+0xa8>
 8003a34:	4623      	mov	r3, r4
 8003a36:	6864      	ldr	r4, [r4, #4]
 8003a38:	e7ae      	b.n	8003998 <_malloc_r+0x34>
 8003a3a:	463c      	mov	r4, r7
 8003a3c:	687f      	ldr	r7, [r7, #4]
 8003a3e:	e7b6      	b.n	80039ae <_malloc_r+0x4a>
 8003a40:	461a      	mov	r2, r3
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	42a3      	cmp	r3, r4
 8003a46:	d1fb      	bne.n	8003a40 <_malloc_r+0xdc>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	6053      	str	r3, [r2, #4]
 8003a4c:	e7de      	b.n	8003a0c <_malloc_r+0xa8>
 8003a4e:	230c      	movs	r3, #12
 8003a50:	6033      	str	r3, [r6, #0]
 8003a52:	4630      	mov	r0, r6
 8003a54:	f000 f80c 	bl	8003a70 <__malloc_unlock>
 8003a58:	e794      	b.n	8003984 <_malloc_r+0x20>
 8003a5a:	6005      	str	r5, [r0, #0]
 8003a5c:	e7d6      	b.n	8003a0c <_malloc_r+0xa8>
 8003a5e:	bf00      	nop
 8003a60:	20000284 	.word	0x20000284

08003a64 <__malloc_lock>:
 8003a64:	4801      	ldr	r0, [pc, #4]	@ (8003a6c <__malloc_lock+0x8>)
 8003a66:	f7ff bf0f 	b.w	8003888 <__retarget_lock_acquire_recursive>
 8003a6a:	bf00      	nop
 8003a6c:	2000027c 	.word	0x2000027c

08003a70 <__malloc_unlock>:
 8003a70:	4801      	ldr	r0, [pc, #4]	@ (8003a78 <__malloc_unlock+0x8>)
 8003a72:	f7ff bf0a 	b.w	800388a <__retarget_lock_release_recursive>
 8003a76:	bf00      	nop
 8003a78:	2000027c 	.word	0x2000027c

08003a7c <__ssputs_r>:
 8003a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a80:	688e      	ldr	r6, [r1, #8]
 8003a82:	461f      	mov	r7, r3
 8003a84:	42be      	cmp	r6, r7
 8003a86:	680b      	ldr	r3, [r1, #0]
 8003a88:	4682      	mov	sl, r0
 8003a8a:	460c      	mov	r4, r1
 8003a8c:	4690      	mov	r8, r2
 8003a8e:	d82d      	bhi.n	8003aec <__ssputs_r+0x70>
 8003a90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003a94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003a98:	d026      	beq.n	8003ae8 <__ssputs_r+0x6c>
 8003a9a:	6965      	ldr	r5, [r4, #20]
 8003a9c:	6909      	ldr	r1, [r1, #16]
 8003a9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003aa2:	eba3 0901 	sub.w	r9, r3, r1
 8003aa6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003aaa:	1c7b      	adds	r3, r7, #1
 8003aac:	444b      	add	r3, r9
 8003aae:	106d      	asrs	r5, r5, #1
 8003ab0:	429d      	cmp	r5, r3
 8003ab2:	bf38      	it	cc
 8003ab4:	461d      	movcc	r5, r3
 8003ab6:	0553      	lsls	r3, r2, #21
 8003ab8:	d527      	bpl.n	8003b0a <__ssputs_r+0x8e>
 8003aba:	4629      	mov	r1, r5
 8003abc:	f7ff ff52 	bl	8003964 <_malloc_r>
 8003ac0:	4606      	mov	r6, r0
 8003ac2:	b360      	cbz	r0, 8003b1e <__ssputs_r+0xa2>
 8003ac4:	6921      	ldr	r1, [r4, #16]
 8003ac6:	464a      	mov	r2, r9
 8003ac8:	f000 fae8 	bl	800409c <memcpy>
 8003acc:	89a3      	ldrh	r3, [r4, #12]
 8003ace:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003ad2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ad6:	81a3      	strh	r3, [r4, #12]
 8003ad8:	6126      	str	r6, [r4, #16]
 8003ada:	6165      	str	r5, [r4, #20]
 8003adc:	444e      	add	r6, r9
 8003ade:	eba5 0509 	sub.w	r5, r5, r9
 8003ae2:	6026      	str	r6, [r4, #0]
 8003ae4:	60a5      	str	r5, [r4, #8]
 8003ae6:	463e      	mov	r6, r7
 8003ae8:	42be      	cmp	r6, r7
 8003aea:	d900      	bls.n	8003aee <__ssputs_r+0x72>
 8003aec:	463e      	mov	r6, r7
 8003aee:	6820      	ldr	r0, [r4, #0]
 8003af0:	4632      	mov	r2, r6
 8003af2:	4641      	mov	r1, r8
 8003af4:	f000 faa8 	bl	8004048 <memmove>
 8003af8:	68a3      	ldr	r3, [r4, #8]
 8003afa:	1b9b      	subs	r3, r3, r6
 8003afc:	60a3      	str	r3, [r4, #8]
 8003afe:	6823      	ldr	r3, [r4, #0]
 8003b00:	4433      	add	r3, r6
 8003b02:	6023      	str	r3, [r4, #0]
 8003b04:	2000      	movs	r0, #0
 8003b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b0a:	462a      	mov	r2, r5
 8003b0c:	f000 fad4 	bl	80040b8 <_realloc_r>
 8003b10:	4606      	mov	r6, r0
 8003b12:	2800      	cmp	r0, #0
 8003b14:	d1e0      	bne.n	8003ad8 <__ssputs_r+0x5c>
 8003b16:	6921      	ldr	r1, [r4, #16]
 8003b18:	4650      	mov	r0, sl
 8003b1a:	f7ff feb7 	bl	800388c <_free_r>
 8003b1e:	230c      	movs	r3, #12
 8003b20:	f8ca 3000 	str.w	r3, [sl]
 8003b24:	89a3      	ldrh	r3, [r4, #12]
 8003b26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b2a:	81a3      	strh	r3, [r4, #12]
 8003b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b30:	e7e9      	b.n	8003b06 <__ssputs_r+0x8a>
	...

08003b34 <_svfiprintf_r>:
 8003b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b38:	4698      	mov	r8, r3
 8003b3a:	898b      	ldrh	r3, [r1, #12]
 8003b3c:	061b      	lsls	r3, r3, #24
 8003b3e:	b09d      	sub	sp, #116	@ 0x74
 8003b40:	4607      	mov	r7, r0
 8003b42:	460d      	mov	r5, r1
 8003b44:	4614      	mov	r4, r2
 8003b46:	d510      	bpl.n	8003b6a <_svfiprintf_r+0x36>
 8003b48:	690b      	ldr	r3, [r1, #16]
 8003b4a:	b973      	cbnz	r3, 8003b6a <_svfiprintf_r+0x36>
 8003b4c:	2140      	movs	r1, #64	@ 0x40
 8003b4e:	f7ff ff09 	bl	8003964 <_malloc_r>
 8003b52:	6028      	str	r0, [r5, #0]
 8003b54:	6128      	str	r0, [r5, #16]
 8003b56:	b930      	cbnz	r0, 8003b66 <_svfiprintf_r+0x32>
 8003b58:	230c      	movs	r3, #12
 8003b5a:	603b      	str	r3, [r7, #0]
 8003b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b60:	b01d      	add	sp, #116	@ 0x74
 8003b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b66:	2340      	movs	r3, #64	@ 0x40
 8003b68:	616b      	str	r3, [r5, #20]
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b6e:	2320      	movs	r3, #32
 8003b70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003b74:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b78:	2330      	movs	r3, #48	@ 0x30
 8003b7a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003d18 <_svfiprintf_r+0x1e4>
 8003b7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003b82:	f04f 0901 	mov.w	r9, #1
 8003b86:	4623      	mov	r3, r4
 8003b88:	469a      	mov	sl, r3
 8003b8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b8e:	b10a      	cbz	r2, 8003b94 <_svfiprintf_r+0x60>
 8003b90:	2a25      	cmp	r2, #37	@ 0x25
 8003b92:	d1f9      	bne.n	8003b88 <_svfiprintf_r+0x54>
 8003b94:	ebba 0b04 	subs.w	fp, sl, r4
 8003b98:	d00b      	beq.n	8003bb2 <_svfiprintf_r+0x7e>
 8003b9a:	465b      	mov	r3, fp
 8003b9c:	4622      	mov	r2, r4
 8003b9e:	4629      	mov	r1, r5
 8003ba0:	4638      	mov	r0, r7
 8003ba2:	f7ff ff6b 	bl	8003a7c <__ssputs_r>
 8003ba6:	3001      	adds	r0, #1
 8003ba8:	f000 80a7 	beq.w	8003cfa <_svfiprintf_r+0x1c6>
 8003bac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003bae:	445a      	add	r2, fp
 8003bb0:	9209      	str	r2, [sp, #36]	@ 0x24
 8003bb2:	f89a 3000 	ldrb.w	r3, [sl]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 809f 	beq.w	8003cfa <_svfiprintf_r+0x1c6>
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8003bc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bc6:	f10a 0a01 	add.w	sl, sl, #1
 8003bca:	9304      	str	r3, [sp, #16]
 8003bcc:	9307      	str	r3, [sp, #28]
 8003bce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003bd2:	931a      	str	r3, [sp, #104]	@ 0x68
 8003bd4:	4654      	mov	r4, sl
 8003bd6:	2205      	movs	r2, #5
 8003bd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bdc:	484e      	ldr	r0, [pc, #312]	@ (8003d18 <_svfiprintf_r+0x1e4>)
 8003bde:	f7fc faf7 	bl	80001d0 <memchr>
 8003be2:	9a04      	ldr	r2, [sp, #16]
 8003be4:	b9d8      	cbnz	r0, 8003c1e <_svfiprintf_r+0xea>
 8003be6:	06d0      	lsls	r0, r2, #27
 8003be8:	bf44      	itt	mi
 8003bea:	2320      	movmi	r3, #32
 8003bec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003bf0:	0711      	lsls	r1, r2, #28
 8003bf2:	bf44      	itt	mi
 8003bf4:	232b      	movmi	r3, #43	@ 0x2b
 8003bf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003bfa:	f89a 3000 	ldrb.w	r3, [sl]
 8003bfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c00:	d015      	beq.n	8003c2e <_svfiprintf_r+0xfa>
 8003c02:	9a07      	ldr	r2, [sp, #28]
 8003c04:	4654      	mov	r4, sl
 8003c06:	2000      	movs	r0, #0
 8003c08:	f04f 0c0a 	mov.w	ip, #10
 8003c0c:	4621      	mov	r1, r4
 8003c0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c12:	3b30      	subs	r3, #48	@ 0x30
 8003c14:	2b09      	cmp	r3, #9
 8003c16:	d94b      	bls.n	8003cb0 <_svfiprintf_r+0x17c>
 8003c18:	b1b0      	cbz	r0, 8003c48 <_svfiprintf_r+0x114>
 8003c1a:	9207      	str	r2, [sp, #28]
 8003c1c:	e014      	b.n	8003c48 <_svfiprintf_r+0x114>
 8003c1e:	eba0 0308 	sub.w	r3, r0, r8
 8003c22:	fa09 f303 	lsl.w	r3, r9, r3
 8003c26:	4313      	orrs	r3, r2
 8003c28:	9304      	str	r3, [sp, #16]
 8003c2a:	46a2      	mov	sl, r4
 8003c2c:	e7d2      	b.n	8003bd4 <_svfiprintf_r+0xa0>
 8003c2e:	9b03      	ldr	r3, [sp, #12]
 8003c30:	1d19      	adds	r1, r3, #4
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	9103      	str	r1, [sp, #12]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	bfbb      	ittet	lt
 8003c3a:	425b      	neglt	r3, r3
 8003c3c:	f042 0202 	orrlt.w	r2, r2, #2
 8003c40:	9307      	strge	r3, [sp, #28]
 8003c42:	9307      	strlt	r3, [sp, #28]
 8003c44:	bfb8      	it	lt
 8003c46:	9204      	strlt	r2, [sp, #16]
 8003c48:	7823      	ldrb	r3, [r4, #0]
 8003c4a:	2b2e      	cmp	r3, #46	@ 0x2e
 8003c4c:	d10a      	bne.n	8003c64 <_svfiprintf_r+0x130>
 8003c4e:	7863      	ldrb	r3, [r4, #1]
 8003c50:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c52:	d132      	bne.n	8003cba <_svfiprintf_r+0x186>
 8003c54:	9b03      	ldr	r3, [sp, #12]
 8003c56:	1d1a      	adds	r2, r3, #4
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	9203      	str	r2, [sp, #12]
 8003c5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003c60:	3402      	adds	r4, #2
 8003c62:	9305      	str	r3, [sp, #20]
 8003c64:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003d28 <_svfiprintf_r+0x1f4>
 8003c68:	7821      	ldrb	r1, [r4, #0]
 8003c6a:	2203      	movs	r2, #3
 8003c6c:	4650      	mov	r0, sl
 8003c6e:	f7fc faaf 	bl	80001d0 <memchr>
 8003c72:	b138      	cbz	r0, 8003c84 <_svfiprintf_r+0x150>
 8003c74:	9b04      	ldr	r3, [sp, #16]
 8003c76:	eba0 000a 	sub.w	r0, r0, sl
 8003c7a:	2240      	movs	r2, #64	@ 0x40
 8003c7c:	4082      	lsls	r2, r0
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	3401      	adds	r4, #1
 8003c82:	9304      	str	r3, [sp, #16]
 8003c84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c88:	4824      	ldr	r0, [pc, #144]	@ (8003d1c <_svfiprintf_r+0x1e8>)
 8003c8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003c8e:	2206      	movs	r2, #6
 8003c90:	f7fc fa9e 	bl	80001d0 <memchr>
 8003c94:	2800      	cmp	r0, #0
 8003c96:	d036      	beq.n	8003d06 <_svfiprintf_r+0x1d2>
 8003c98:	4b21      	ldr	r3, [pc, #132]	@ (8003d20 <_svfiprintf_r+0x1ec>)
 8003c9a:	bb1b      	cbnz	r3, 8003ce4 <_svfiprintf_r+0x1b0>
 8003c9c:	9b03      	ldr	r3, [sp, #12]
 8003c9e:	3307      	adds	r3, #7
 8003ca0:	f023 0307 	bic.w	r3, r3, #7
 8003ca4:	3308      	adds	r3, #8
 8003ca6:	9303      	str	r3, [sp, #12]
 8003ca8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003caa:	4433      	add	r3, r6
 8003cac:	9309      	str	r3, [sp, #36]	@ 0x24
 8003cae:	e76a      	b.n	8003b86 <_svfiprintf_r+0x52>
 8003cb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8003cb4:	460c      	mov	r4, r1
 8003cb6:	2001      	movs	r0, #1
 8003cb8:	e7a8      	b.n	8003c0c <_svfiprintf_r+0xd8>
 8003cba:	2300      	movs	r3, #0
 8003cbc:	3401      	adds	r4, #1
 8003cbe:	9305      	str	r3, [sp, #20]
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	f04f 0c0a 	mov.w	ip, #10
 8003cc6:	4620      	mov	r0, r4
 8003cc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ccc:	3a30      	subs	r2, #48	@ 0x30
 8003cce:	2a09      	cmp	r2, #9
 8003cd0:	d903      	bls.n	8003cda <_svfiprintf_r+0x1a6>
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d0c6      	beq.n	8003c64 <_svfiprintf_r+0x130>
 8003cd6:	9105      	str	r1, [sp, #20]
 8003cd8:	e7c4      	b.n	8003c64 <_svfiprintf_r+0x130>
 8003cda:	fb0c 2101 	mla	r1, ip, r1, r2
 8003cde:	4604      	mov	r4, r0
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e7f0      	b.n	8003cc6 <_svfiprintf_r+0x192>
 8003ce4:	ab03      	add	r3, sp, #12
 8003ce6:	9300      	str	r3, [sp, #0]
 8003ce8:	462a      	mov	r2, r5
 8003cea:	4b0e      	ldr	r3, [pc, #56]	@ (8003d24 <_svfiprintf_r+0x1f0>)
 8003cec:	a904      	add	r1, sp, #16
 8003cee:	4638      	mov	r0, r7
 8003cf0:	f3af 8000 	nop.w
 8003cf4:	1c42      	adds	r2, r0, #1
 8003cf6:	4606      	mov	r6, r0
 8003cf8:	d1d6      	bne.n	8003ca8 <_svfiprintf_r+0x174>
 8003cfa:	89ab      	ldrh	r3, [r5, #12]
 8003cfc:	065b      	lsls	r3, r3, #25
 8003cfe:	f53f af2d 	bmi.w	8003b5c <_svfiprintf_r+0x28>
 8003d02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003d04:	e72c      	b.n	8003b60 <_svfiprintf_r+0x2c>
 8003d06:	ab03      	add	r3, sp, #12
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	462a      	mov	r2, r5
 8003d0c:	4b05      	ldr	r3, [pc, #20]	@ (8003d24 <_svfiprintf_r+0x1f0>)
 8003d0e:	a904      	add	r1, sp, #16
 8003d10:	4638      	mov	r0, r7
 8003d12:	f000 f879 	bl	8003e08 <_printf_i>
 8003d16:	e7ed      	b.n	8003cf4 <_svfiprintf_r+0x1c0>
 8003d18:	080041ac 	.word	0x080041ac
 8003d1c:	080041b6 	.word	0x080041b6
 8003d20:	00000000 	.word	0x00000000
 8003d24:	08003a7d 	.word	0x08003a7d
 8003d28:	080041b2 	.word	0x080041b2

08003d2c <_printf_common>:
 8003d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d30:	4616      	mov	r6, r2
 8003d32:	4698      	mov	r8, r3
 8003d34:	688a      	ldr	r2, [r1, #8]
 8003d36:	690b      	ldr	r3, [r1, #16]
 8003d38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	bfb8      	it	lt
 8003d40:	4613      	movlt	r3, r2
 8003d42:	6033      	str	r3, [r6, #0]
 8003d44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003d48:	4607      	mov	r7, r0
 8003d4a:	460c      	mov	r4, r1
 8003d4c:	b10a      	cbz	r2, 8003d52 <_printf_common+0x26>
 8003d4e:	3301      	adds	r3, #1
 8003d50:	6033      	str	r3, [r6, #0]
 8003d52:	6823      	ldr	r3, [r4, #0]
 8003d54:	0699      	lsls	r1, r3, #26
 8003d56:	bf42      	ittt	mi
 8003d58:	6833      	ldrmi	r3, [r6, #0]
 8003d5a:	3302      	addmi	r3, #2
 8003d5c:	6033      	strmi	r3, [r6, #0]
 8003d5e:	6825      	ldr	r5, [r4, #0]
 8003d60:	f015 0506 	ands.w	r5, r5, #6
 8003d64:	d106      	bne.n	8003d74 <_printf_common+0x48>
 8003d66:	f104 0a19 	add.w	sl, r4, #25
 8003d6a:	68e3      	ldr	r3, [r4, #12]
 8003d6c:	6832      	ldr	r2, [r6, #0]
 8003d6e:	1a9b      	subs	r3, r3, r2
 8003d70:	42ab      	cmp	r3, r5
 8003d72:	dc26      	bgt.n	8003dc2 <_printf_common+0x96>
 8003d74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003d78:	6822      	ldr	r2, [r4, #0]
 8003d7a:	3b00      	subs	r3, #0
 8003d7c:	bf18      	it	ne
 8003d7e:	2301      	movne	r3, #1
 8003d80:	0692      	lsls	r2, r2, #26
 8003d82:	d42b      	bmi.n	8003ddc <_printf_common+0xb0>
 8003d84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003d88:	4641      	mov	r1, r8
 8003d8a:	4638      	mov	r0, r7
 8003d8c:	47c8      	blx	r9
 8003d8e:	3001      	adds	r0, #1
 8003d90:	d01e      	beq.n	8003dd0 <_printf_common+0xa4>
 8003d92:	6823      	ldr	r3, [r4, #0]
 8003d94:	6922      	ldr	r2, [r4, #16]
 8003d96:	f003 0306 	and.w	r3, r3, #6
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	bf02      	ittt	eq
 8003d9e:	68e5      	ldreq	r5, [r4, #12]
 8003da0:	6833      	ldreq	r3, [r6, #0]
 8003da2:	1aed      	subeq	r5, r5, r3
 8003da4:	68a3      	ldr	r3, [r4, #8]
 8003da6:	bf0c      	ite	eq
 8003da8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003dac:	2500      	movne	r5, #0
 8003dae:	4293      	cmp	r3, r2
 8003db0:	bfc4      	itt	gt
 8003db2:	1a9b      	subgt	r3, r3, r2
 8003db4:	18ed      	addgt	r5, r5, r3
 8003db6:	2600      	movs	r6, #0
 8003db8:	341a      	adds	r4, #26
 8003dba:	42b5      	cmp	r5, r6
 8003dbc:	d11a      	bne.n	8003df4 <_printf_common+0xc8>
 8003dbe:	2000      	movs	r0, #0
 8003dc0:	e008      	b.n	8003dd4 <_printf_common+0xa8>
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	4652      	mov	r2, sl
 8003dc6:	4641      	mov	r1, r8
 8003dc8:	4638      	mov	r0, r7
 8003dca:	47c8      	blx	r9
 8003dcc:	3001      	adds	r0, #1
 8003dce:	d103      	bne.n	8003dd8 <_printf_common+0xac>
 8003dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dd8:	3501      	adds	r5, #1
 8003dda:	e7c6      	b.n	8003d6a <_printf_common+0x3e>
 8003ddc:	18e1      	adds	r1, r4, r3
 8003dde:	1c5a      	adds	r2, r3, #1
 8003de0:	2030      	movs	r0, #48	@ 0x30
 8003de2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003de6:	4422      	add	r2, r4
 8003de8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003dec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003df0:	3302      	adds	r3, #2
 8003df2:	e7c7      	b.n	8003d84 <_printf_common+0x58>
 8003df4:	2301      	movs	r3, #1
 8003df6:	4622      	mov	r2, r4
 8003df8:	4641      	mov	r1, r8
 8003dfa:	4638      	mov	r0, r7
 8003dfc:	47c8      	blx	r9
 8003dfe:	3001      	adds	r0, #1
 8003e00:	d0e6      	beq.n	8003dd0 <_printf_common+0xa4>
 8003e02:	3601      	adds	r6, #1
 8003e04:	e7d9      	b.n	8003dba <_printf_common+0x8e>
	...

08003e08 <_printf_i>:
 8003e08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e0c:	7e0f      	ldrb	r7, [r1, #24]
 8003e0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003e10:	2f78      	cmp	r7, #120	@ 0x78
 8003e12:	4691      	mov	r9, r2
 8003e14:	4680      	mov	r8, r0
 8003e16:	460c      	mov	r4, r1
 8003e18:	469a      	mov	sl, r3
 8003e1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003e1e:	d807      	bhi.n	8003e30 <_printf_i+0x28>
 8003e20:	2f62      	cmp	r7, #98	@ 0x62
 8003e22:	d80a      	bhi.n	8003e3a <_printf_i+0x32>
 8003e24:	2f00      	cmp	r7, #0
 8003e26:	f000 80d2 	beq.w	8003fce <_printf_i+0x1c6>
 8003e2a:	2f58      	cmp	r7, #88	@ 0x58
 8003e2c:	f000 80b9 	beq.w	8003fa2 <_printf_i+0x19a>
 8003e30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003e38:	e03a      	b.n	8003eb0 <_printf_i+0xa8>
 8003e3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003e3e:	2b15      	cmp	r3, #21
 8003e40:	d8f6      	bhi.n	8003e30 <_printf_i+0x28>
 8003e42:	a101      	add	r1, pc, #4	@ (adr r1, 8003e48 <_printf_i+0x40>)
 8003e44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e48:	08003ea1 	.word	0x08003ea1
 8003e4c:	08003eb5 	.word	0x08003eb5
 8003e50:	08003e31 	.word	0x08003e31
 8003e54:	08003e31 	.word	0x08003e31
 8003e58:	08003e31 	.word	0x08003e31
 8003e5c:	08003e31 	.word	0x08003e31
 8003e60:	08003eb5 	.word	0x08003eb5
 8003e64:	08003e31 	.word	0x08003e31
 8003e68:	08003e31 	.word	0x08003e31
 8003e6c:	08003e31 	.word	0x08003e31
 8003e70:	08003e31 	.word	0x08003e31
 8003e74:	08003fb5 	.word	0x08003fb5
 8003e78:	08003edf 	.word	0x08003edf
 8003e7c:	08003f6f 	.word	0x08003f6f
 8003e80:	08003e31 	.word	0x08003e31
 8003e84:	08003e31 	.word	0x08003e31
 8003e88:	08003fd7 	.word	0x08003fd7
 8003e8c:	08003e31 	.word	0x08003e31
 8003e90:	08003edf 	.word	0x08003edf
 8003e94:	08003e31 	.word	0x08003e31
 8003e98:	08003e31 	.word	0x08003e31
 8003e9c:	08003f77 	.word	0x08003f77
 8003ea0:	6833      	ldr	r3, [r6, #0]
 8003ea2:	1d1a      	adds	r2, r3, #4
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	6032      	str	r2, [r6, #0]
 8003ea8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003eac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e09d      	b.n	8003ff0 <_printf_i+0x1e8>
 8003eb4:	6833      	ldr	r3, [r6, #0]
 8003eb6:	6820      	ldr	r0, [r4, #0]
 8003eb8:	1d19      	adds	r1, r3, #4
 8003eba:	6031      	str	r1, [r6, #0]
 8003ebc:	0606      	lsls	r6, r0, #24
 8003ebe:	d501      	bpl.n	8003ec4 <_printf_i+0xbc>
 8003ec0:	681d      	ldr	r5, [r3, #0]
 8003ec2:	e003      	b.n	8003ecc <_printf_i+0xc4>
 8003ec4:	0645      	lsls	r5, r0, #25
 8003ec6:	d5fb      	bpl.n	8003ec0 <_printf_i+0xb8>
 8003ec8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003ecc:	2d00      	cmp	r5, #0
 8003ece:	da03      	bge.n	8003ed8 <_printf_i+0xd0>
 8003ed0:	232d      	movs	r3, #45	@ 0x2d
 8003ed2:	426d      	negs	r5, r5
 8003ed4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ed8:	4859      	ldr	r0, [pc, #356]	@ (8004040 <_printf_i+0x238>)
 8003eda:	230a      	movs	r3, #10
 8003edc:	e011      	b.n	8003f02 <_printf_i+0xfa>
 8003ede:	6821      	ldr	r1, [r4, #0]
 8003ee0:	6833      	ldr	r3, [r6, #0]
 8003ee2:	0608      	lsls	r0, r1, #24
 8003ee4:	f853 5b04 	ldr.w	r5, [r3], #4
 8003ee8:	d402      	bmi.n	8003ef0 <_printf_i+0xe8>
 8003eea:	0649      	lsls	r1, r1, #25
 8003eec:	bf48      	it	mi
 8003eee:	b2ad      	uxthmi	r5, r5
 8003ef0:	2f6f      	cmp	r7, #111	@ 0x6f
 8003ef2:	4853      	ldr	r0, [pc, #332]	@ (8004040 <_printf_i+0x238>)
 8003ef4:	6033      	str	r3, [r6, #0]
 8003ef6:	bf14      	ite	ne
 8003ef8:	230a      	movne	r3, #10
 8003efa:	2308      	moveq	r3, #8
 8003efc:	2100      	movs	r1, #0
 8003efe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003f02:	6866      	ldr	r6, [r4, #4]
 8003f04:	60a6      	str	r6, [r4, #8]
 8003f06:	2e00      	cmp	r6, #0
 8003f08:	bfa2      	ittt	ge
 8003f0a:	6821      	ldrge	r1, [r4, #0]
 8003f0c:	f021 0104 	bicge.w	r1, r1, #4
 8003f10:	6021      	strge	r1, [r4, #0]
 8003f12:	b90d      	cbnz	r5, 8003f18 <_printf_i+0x110>
 8003f14:	2e00      	cmp	r6, #0
 8003f16:	d04b      	beq.n	8003fb0 <_printf_i+0x1a8>
 8003f18:	4616      	mov	r6, r2
 8003f1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f1e:	fb03 5711 	mls	r7, r3, r1, r5
 8003f22:	5dc7      	ldrb	r7, [r0, r7]
 8003f24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f28:	462f      	mov	r7, r5
 8003f2a:	42bb      	cmp	r3, r7
 8003f2c:	460d      	mov	r5, r1
 8003f2e:	d9f4      	bls.n	8003f1a <_printf_i+0x112>
 8003f30:	2b08      	cmp	r3, #8
 8003f32:	d10b      	bne.n	8003f4c <_printf_i+0x144>
 8003f34:	6823      	ldr	r3, [r4, #0]
 8003f36:	07df      	lsls	r7, r3, #31
 8003f38:	d508      	bpl.n	8003f4c <_printf_i+0x144>
 8003f3a:	6923      	ldr	r3, [r4, #16]
 8003f3c:	6861      	ldr	r1, [r4, #4]
 8003f3e:	4299      	cmp	r1, r3
 8003f40:	bfde      	ittt	le
 8003f42:	2330      	movle	r3, #48	@ 0x30
 8003f44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f48:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003f4c:	1b92      	subs	r2, r2, r6
 8003f4e:	6122      	str	r2, [r4, #16]
 8003f50:	f8cd a000 	str.w	sl, [sp]
 8003f54:	464b      	mov	r3, r9
 8003f56:	aa03      	add	r2, sp, #12
 8003f58:	4621      	mov	r1, r4
 8003f5a:	4640      	mov	r0, r8
 8003f5c:	f7ff fee6 	bl	8003d2c <_printf_common>
 8003f60:	3001      	adds	r0, #1
 8003f62:	d14a      	bne.n	8003ffa <_printf_i+0x1f2>
 8003f64:	f04f 30ff 	mov.w	r0, #4294967295
 8003f68:	b004      	add	sp, #16
 8003f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f6e:	6823      	ldr	r3, [r4, #0]
 8003f70:	f043 0320 	orr.w	r3, r3, #32
 8003f74:	6023      	str	r3, [r4, #0]
 8003f76:	4833      	ldr	r0, [pc, #204]	@ (8004044 <_printf_i+0x23c>)
 8003f78:	2778      	movs	r7, #120	@ 0x78
 8003f7a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003f7e:	6823      	ldr	r3, [r4, #0]
 8003f80:	6831      	ldr	r1, [r6, #0]
 8003f82:	061f      	lsls	r7, r3, #24
 8003f84:	f851 5b04 	ldr.w	r5, [r1], #4
 8003f88:	d402      	bmi.n	8003f90 <_printf_i+0x188>
 8003f8a:	065f      	lsls	r7, r3, #25
 8003f8c:	bf48      	it	mi
 8003f8e:	b2ad      	uxthmi	r5, r5
 8003f90:	6031      	str	r1, [r6, #0]
 8003f92:	07d9      	lsls	r1, r3, #31
 8003f94:	bf44      	itt	mi
 8003f96:	f043 0320 	orrmi.w	r3, r3, #32
 8003f9a:	6023      	strmi	r3, [r4, #0]
 8003f9c:	b11d      	cbz	r5, 8003fa6 <_printf_i+0x19e>
 8003f9e:	2310      	movs	r3, #16
 8003fa0:	e7ac      	b.n	8003efc <_printf_i+0xf4>
 8003fa2:	4827      	ldr	r0, [pc, #156]	@ (8004040 <_printf_i+0x238>)
 8003fa4:	e7e9      	b.n	8003f7a <_printf_i+0x172>
 8003fa6:	6823      	ldr	r3, [r4, #0]
 8003fa8:	f023 0320 	bic.w	r3, r3, #32
 8003fac:	6023      	str	r3, [r4, #0]
 8003fae:	e7f6      	b.n	8003f9e <_printf_i+0x196>
 8003fb0:	4616      	mov	r6, r2
 8003fb2:	e7bd      	b.n	8003f30 <_printf_i+0x128>
 8003fb4:	6833      	ldr	r3, [r6, #0]
 8003fb6:	6825      	ldr	r5, [r4, #0]
 8003fb8:	6961      	ldr	r1, [r4, #20]
 8003fba:	1d18      	adds	r0, r3, #4
 8003fbc:	6030      	str	r0, [r6, #0]
 8003fbe:	062e      	lsls	r6, r5, #24
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	d501      	bpl.n	8003fc8 <_printf_i+0x1c0>
 8003fc4:	6019      	str	r1, [r3, #0]
 8003fc6:	e002      	b.n	8003fce <_printf_i+0x1c6>
 8003fc8:	0668      	lsls	r0, r5, #25
 8003fca:	d5fb      	bpl.n	8003fc4 <_printf_i+0x1bc>
 8003fcc:	8019      	strh	r1, [r3, #0]
 8003fce:	2300      	movs	r3, #0
 8003fd0:	6123      	str	r3, [r4, #16]
 8003fd2:	4616      	mov	r6, r2
 8003fd4:	e7bc      	b.n	8003f50 <_printf_i+0x148>
 8003fd6:	6833      	ldr	r3, [r6, #0]
 8003fd8:	1d1a      	adds	r2, r3, #4
 8003fda:	6032      	str	r2, [r6, #0]
 8003fdc:	681e      	ldr	r6, [r3, #0]
 8003fde:	6862      	ldr	r2, [r4, #4]
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	4630      	mov	r0, r6
 8003fe4:	f7fc f8f4 	bl	80001d0 <memchr>
 8003fe8:	b108      	cbz	r0, 8003fee <_printf_i+0x1e6>
 8003fea:	1b80      	subs	r0, r0, r6
 8003fec:	6060      	str	r0, [r4, #4]
 8003fee:	6863      	ldr	r3, [r4, #4]
 8003ff0:	6123      	str	r3, [r4, #16]
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ff8:	e7aa      	b.n	8003f50 <_printf_i+0x148>
 8003ffa:	6923      	ldr	r3, [r4, #16]
 8003ffc:	4632      	mov	r2, r6
 8003ffe:	4649      	mov	r1, r9
 8004000:	4640      	mov	r0, r8
 8004002:	47d0      	blx	sl
 8004004:	3001      	adds	r0, #1
 8004006:	d0ad      	beq.n	8003f64 <_printf_i+0x15c>
 8004008:	6823      	ldr	r3, [r4, #0]
 800400a:	079b      	lsls	r3, r3, #30
 800400c:	d413      	bmi.n	8004036 <_printf_i+0x22e>
 800400e:	68e0      	ldr	r0, [r4, #12]
 8004010:	9b03      	ldr	r3, [sp, #12]
 8004012:	4298      	cmp	r0, r3
 8004014:	bfb8      	it	lt
 8004016:	4618      	movlt	r0, r3
 8004018:	e7a6      	b.n	8003f68 <_printf_i+0x160>
 800401a:	2301      	movs	r3, #1
 800401c:	4632      	mov	r2, r6
 800401e:	4649      	mov	r1, r9
 8004020:	4640      	mov	r0, r8
 8004022:	47d0      	blx	sl
 8004024:	3001      	adds	r0, #1
 8004026:	d09d      	beq.n	8003f64 <_printf_i+0x15c>
 8004028:	3501      	adds	r5, #1
 800402a:	68e3      	ldr	r3, [r4, #12]
 800402c:	9903      	ldr	r1, [sp, #12]
 800402e:	1a5b      	subs	r3, r3, r1
 8004030:	42ab      	cmp	r3, r5
 8004032:	dcf2      	bgt.n	800401a <_printf_i+0x212>
 8004034:	e7eb      	b.n	800400e <_printf_i+0x206>
 8004036:	2500      	movs	r5, #0
 8004038:	f104 0619 	add.w	r6, r4, #25
 800403c:	e7f5      	b.n	800402a <_printf_i+0x222>
 800403e:	bf00      	nop
 8004040:	080041bd 	.word	0x080041bd
 8004044:	080041ce 	.word	0x080041ce

08004048 <memmove>:
 8004048:	4288      	cmp	r0, r1
 800404a:	b510      	push	{r4, lr}
 800404c:	eb01 0402 	add.w	r4, r1, r2
 8004050:	d902      	bls.n	8004058 <memmove+0x10>
 8004052:	4284      	cmp	r4, r0
 8004054:	4623      	mov	r3, r4
 8004056:	d807      	bhi.n	8004068 <memmove+0x20>
 8004058:	1e43      	subs	r3, r0, #1
 800405a:	42a1      	cmp	r1, r4
 800405c:	d008      	beq.n	8004070 <memmove+0x28>
 800405e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004062:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004066:	e7f8      	b.n	800405a <memmove+0x12>
 8004068:	4402      	add	r2, r0
 800406a:	4601      	mov	r1, r0
 800406c:	428a      	cmp	r2, r1
 800406e:	d100      	bne.n	8004072 <memmove+0x2a>
 8004070:	bd10      	pop	{r4, pc}
 8004072:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004076:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800407a:	e7f7      	b.n	800406c <memmove+0x24>

0800407c <_sbrk_r>:
 800407c:	b538      	push	{r3, r4, r5, lr}
 800407e:	4d06      	ldr	r5, [pc, #24]	@ (8004098 <_sbrk_r+0x1c>)
 8004080:	2300      	movs	r3, #0
 8004082:	4604      	mov	r4, r0
 8004084:	4608      	mov	r0, r1
 8004086:	602b      	str	r3, [r5, #0]
 8004088:	f7fd fa8e 	bl	80015a8 <_sbrk>
 800408c:	1c43      	adds	r3, r0, #1
 800408e:	d102      	bne.n	8004096 <_sbrk_r+0x1a>
 8004090:	682b      	ldr	r3, [r5, #0]
 8004092:	b103      	cbz	r3, 8004096 <_sbrk_r+0x1a>
 8004094:	6023      	str	r3, [r4, #0]
 8004096:	bd38      	pop	{r3, r4, r5, pc}
 8004098:	20000278 	.word	0x20000278

0800409c <memcpy>:
 800409c:	440a      	add	r2, r1
 800409e:	4291      	cmp	r1, r2
 80040a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80040a4:	d100      	bne.n	80040a8 <memcpy+0xc>
 80040a6:	4770      	bx	lr
 80040a8:	b510      	push	{r4, lr}
 80040aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040b2:	4291      	cmp	r1, r2
 80040b4:	d1f9      	bne.n	80040aa <memcpy+0xe>
 80040b6:	bd10      	pop	{r4, pc}

080040b8 <_realloc_r>:
 80040b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040bc:	4680      	mov	r8, r0
 80040be:	4615      	mov	r5, r2
 80040c0:	460c      	mov	r4, r1
 80040c2:	b921      	cbnz	r1, 80040ce <_realloc_r+0x16>
 80040c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040c8:	4611      	mov	r1, r2
 80040ca:	f7ff bc4b 	b.w	8003964 <_malloc_r>
 80040ce:	b92a      	cbnz	r2, 80040dc <_realloc_r+0x24>
 80040d0:	f7ff fbdc 	bl	800388c <_free_r>
 80040d4:	2400      	movs	r4, #0
 80040d6:	4620      	mov	r0, r4
 80040d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040dc:	f000 f81a 	bl	8004114 <_malloc_usable_size_r>
 80040e0:	4285      	cmp	r5, r0
 80040e2:	4606      	mov	r6, r0
 80040e4:	d802      	bhi.n	80040ec <_realloc_r+0x34>
 80040e6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80040ea:	d8f4      	bhi.n	80040d6 <_realloc_r+0x1e>
 80040ec:	4629      	mov	r1, r5
 80040ee:	4640      	mov	r0, r8
 80040f0:	f7ff fc38 	bl	8003964 <_malloc_r>
 80040f4:	4607      	mov	r7, r0
 80040f6:	2800      	cmp	r0, #0
 80040f8:	d0ec      	beq.n	80040d4 <_realloc_r+0x1c>
 80040fa:	42b5      	cmp	r5, r6
 80040fc:	462a      	mov	r2, r5
 80040fe:	4621      	mov	r1, r4
 8004100:	bf28      	it	cs
 8004102:	4632      	movcs	r2, r6
 8004104:	f7ff ffca 	bl	800409c <memcpy>
 8004108:	4621      	mov	r1, r4
 800410a:	4640      	mov	r0, r8
 800410c:	f7ff fbbe 	bl	800388c <_free_r>
 8004110:	463c      	mov	r4, r7
 8004112:	e7e0      	b.n	80040d6 <_realloc_r+0x1e>

08004114 <_malloc_usable_size_r>:
 8004114:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004118:	1f18      	subs	r0, r3, #4
 800411a:	2b00      	cmp	r3, #0
 800411c:	bfbc      	itt	lt
 800411e:	580b      	ldrlt	r3, [r1, r0]
 8004120:	18c0      	addlt	r0, r0, r3
 8004122:	4770      	bx	lr

08004124 <_init>:
 8004124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004126:	bf00      	nop
 8004128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800412a:	bc08      	pop	{r3}
 800412c:	469e      	mov	lr, r3
 800412e:	4770      	bx	lr

08004130 <_fini>:
 8004130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004132:	bf00      	nop
 8004134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004136:	bc08      	pop	{r3}
 8004138:	469e      	mov	lr, r3
 800413a:	4770      	bx	lr
